<?xml version="1.0" encoding="utf-8"?>
<configuration>

    <configSections>
        <section name="database.constraints" type="Nimble.Business.Engine.Core.DatabaseConstraintConfiguration"/>
    </configSections>

    <startup>
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1"/>
    </startup>

    <appSettings>
        <!--
            WCF
            Maps connection string name to connection string attribute name of template database.
        -->
        <add key="GenericDatabase" value="Nimble"/>
        <!--
            WCF
            Maps connection string name to connection string attribute name of geolocation database.
        -->
        <add key="GeolocationDatabase" value=""/>
        <!--
            WCF
            Used to indicate folder pattern where backups of database can be stored.
            WARNING: be sure that sql user has access to backup databases and 
            read/write access into folder specified above.
        -->
        <add key="DatabaseBackupsFolderPattern" value=""/>
        <!--
            WCF
            Specifies database command timeout.
        -->
        <add key="DatabaseCommandTimeout" value="600"/>
        <!--
            WCF
            Specifies transaction scope timeout.
        -->
        <add key="TransactionScopeTimeout" value="00:30:00"/>
        <!--
            WCF
            Specifies transaction lock timeout.
        -->
        <add key="TransactionLockTimeout" value="00:00:30"/>
        <!--
            WCF
            Specifies transaction lock delay (in milliseconds).
        -->
        <add key="TransactionLockDelay" value="1000"/>
        <!-- 
            WCF
            If databases specified in connection strings do not exist, on first start of services 
            creates and restores databases from backup at filename indicated in value tags.
            WARNING: be sure that sql user has access to create databases and user under which service 
            runs has access to filename. Key tag and database name must be the same - service will create 
            databases at default path.
        -->
        <add key="Nimble" value="C:\Programs\Nimble\Nimble.Binaries\Database.Backups\Nimble.bak"/>
        <!--
            WCF/WA
            Specifies application event log source.
        -->
        <add key="ApplicationEventLogSource" value="Nimble.WebAdministration"/>
        <!--
            WCF
            On "true" service will try to restore databases even if they exists.
            WARNING: restore will fail if service has not exclusive access on databases.
        -->
        <add key="ForceRestoringDatabases" value="false"/>
        <!--
            WCF/WA
            List of business object which will be stored in cache to avoid frequent databases requests.
            WARNING: if records in databases are changed not through service then objects do not refresh.
        -->
        <add key="CachedEntityTypeNames" value="Culture; Resource; Translation"/>
        <!--
            WCF/WA
            On "true" use translation functionality for string, otherwise - do not translate.
        -->
        <add key="UseTranslationModule" value="true"/>
        <!--
            WCF/WA
            Indicates with how many days latency to update last used date of strings for translation management.
        -->
        <add key="ResourceLastUsedLatencyDays" value="10"/>
        <!--
            WCF
            On first start of services creates an culture with code as value tag and name as specified below
            if does not exists.
            WARNING: to create culture, code and name must be declared both.
        -->
        <add key="CultureCode" value="en"/>
        <!--
            WCF/WA
            WCF - on first start of services used for create an culture with name as value tag and code as 
                  specified above if does not exists;
            WA  - indicates default culture used in sources for accessing google translate service
                  in translation management.
        -->
        <add key="CultureName" value="English"/>
        <!--
            WCF
            On first start of services assigns culture specified above to emplacement specified below.
        -->
        <add key="DefineEmplacementCulture" value="true"/>
        <!--
            WCF
            On first start of services assigns culture specified above to account specified below.
        -->
        <add key="DefineAccountCulture" value="false"/>
        <!--
            WCF
            Indicates latency to update last used date of account for security management.
        -->
        <add key="AccountLastUsedLatency" value="00:30:00"/>
        <!--
            WCF
            On "true" at first start of services copies all not existing translation elements 
            (cultures, strings, translations) at specified above emplacement and application from database.
        -->
        <add key="MultilanguageCopy" value="false"/>
        <!--
            WCF/WA
            On "true" load all multilanguage objects in cache on first start to avoid frequent database/services requests.
            WARNING: on remote WCF services through loose coupling set "true" to avoid big traffic 
            provided by many SOAP messages.
        -->
        <add key="MultilanguageCacheOnLoad" value="true"/>
        <!--
            WCF
            Indicates context type for session (Win, WCF, Web).
            WARNING: on "Win" or "Web" emplacement and application code must be defined below.
        -->
        <add key="SessionContextType" value="Wcf"/>
        <!--
            WCF
            On true enable token context without GenericDatabase.
        -->
        <add key="UseProcessToken" value="false"/>
        <!--
            WCF
            Timeout for WCF inactive sessions.
            WARNING: ussually must be greater than timeout of consuming application.
        -->
        <add key="SessionInactivityTimeout" value="00:30:00"/>
        <!--
            WCF/WA
            WCF - on first start of services creates an emplacement with name as value tag if does not exists and
                  indicates default emplacement used for translation in web context;
            WA  - included in message header on every client requests to identify at which node from
                  distributed data warehouse belongs.
        -->
        <add key="EmplacementCode" value="Nimble.Central"/>
        <!--
            WCF
            On first start of services updates administrative flag of specified above emplacement.
            WARNING: on "true" management will extend over all objects, on "false" - just only objects 
                     belonging specified emplacement.
        -->
        <add key="EmplacementIsAdministrative" value="true"/>
        <!--
            WCF
            On first start of services creates an user/password at specified above emplacement.
        -->
        <add key="UserCode" value="sa"/>
        <add key="UserPassword" value="1"/>
        <!--
            WCF/WA
            WCF - on first start of services creates an application with name as value tag if does not exists and
                  indicates default application used for translation in web context;
            WA  - included in message header on every client requests to identify application used.
        -->
        <add key="ApplicationCode" value="Nimble.WebOperational"/>
        <!--
            WCF
            On first start of services updates administrative flag of specified above application.
            WARNING: on "true" management will extend over all objects, on "false" - just only objects 
                     belonging specified application.
        -->
        <add key="ApplicationIsAdministrative" value="true"/>
        <!--
            WCF
            On first start of services creates an role with name as value tag at specified above 
            emplacement and application, assigns it to user of application specified above and 
            assigns all existed or updated permissions to it.
        -->
        <add key="RoleCode" value="Administrators"/>
        <!--
            WCF
            On "true" at first start of services updates permissions entries,
            according with associated enumerator at application specified above
            (on "false" or disabling this tag will increase services start 
            if no need on creation/modification object at first start).
        -->
        <add key="UpdatePermissions" value="false"/>
        <!--
            WCF
            On "true" at first start of services updates permissions entries,
            according with employee actor type enumerator at application specified above
            (on "false" will increase services start if no need
            on creation/modification object at first start).
            WARNING: for assigning new permissions to actor roles, [UpdatePermissions] tag must be enabled.
        -->
        <add key="UpdateEmployeeActorTypeRoles" value="false"/>
        <!--
            WA
            Indicates state type for storing data on IIS pages (Session, View, Control) as:
            0 - 0
            1 - Session
            2 - View
            3 - Session, View
            4 - Control
            5 - Session, Control
            6 - View, Control
            7 - Session, View, Control
        -->
        <add key="IisStateType" value="1"/>
        <!--
            WA
            On "true" IIS marks page with tags that deny browser cache.
        -->
        <add key="DenyBrowserPageCache" value="true"/>
        <!--
            WA
            On "true" log page visits of authenticated users (user, application, page, IP-address).
        -->
        <add key="LogPageVisits" value="false"/>
        <!--
            WA
            Used to date representation.
        -->
        <add key="DateFormat" value="dd/MM/yyyy"/>
        <!--
            WA
            Used to mask date input.
        -->
        <add key="DateMask" value="99/99/9999"/>
        <!--
            WCF/WA
            On "true" IP info is stored with geolocation details (see http://www.maxmind.com/).
            WARNING: for big geolocation data getting IP info can troubleshoot performance.
        -->
        <add key="StoreIpInfo" value="false"/>
        <!--
            WCF/WA
            Used for sending mail.
        -->
        <add key="SmtpHost" value="smtp.mail.ru"/>
        <add key="SmtpPort" value="25"/>
        <add key="SmtpUserName" value="dujacorneliu@mail.ru"/>
        <add key="SmtpPassword" value="2009"/>
        <add key="SmtpFailedTimeout" value="5000"/>
        <!--
            WCF
            Used for minimal date value.
        -->
        <add key="MinDate" value="1800-01-01 00:00:00.000"/>
        <!--
            WCF
            Used for maximal date value.
        -->
        <add key="MaxDate" value="2200-12-31 23:59:59.997"/>
        <!--
            WA
            Used to overwrite WCF services host.
            WARNING: does not work for ServiceModel endpoints explicitly defined in ~.config.
        -->
        <add key="ServiceHost" value="http://localhost/Nimble.Server.Iis/"/>
    </appSettings>

    <connectionStrings>
        <add name="Nimble" connectionString="Data Source=EN30327\MSSQL2008E;Initial Catalog=Nimble;Persist Security Info=True;User ID=sa;Password=CSD/990407/;Max Pool Size=100;Min Pool Size=1;" providerName="System.Data.SqlClient"/>
        <!--<add name="MaxMind" connectionString="Data Source=CSD\MSSQL2008E;Initial Catalog=MaxMind;Persist Security Info=True;User ID=sa;Password=2004;Max Pool Size=100;Min Pool Size=1;" providerName="System.Data.SqlClient"/>-->
    </connectionStrings>

    <system.serviceModel>
        <bindings>
            <basicHttpBinding>
                <binding
                    name="httpBinding"
                    closeTimeout="01:00:00"
                    openTimeout="01:00:00"
                    receiveTimeout="01:00:00"
                    sendTimeout="01:00:00"
                    bypassProxyOnLocal="false"
                    hostNameComparisonMode="StrongWildcard"
                    maxBufferSize="2147483647"
                    maxBufferPoolSize="524288"
                    maxReceivedMessageSize="2147483647"
                    messageEncoding="Text"
                    textEncoding="utf-8"
                    transferMode="Buffered"
                    useDefaultWebProxy="true"
                    allowCookies="false">
                    <readerQuotas
                        maxDepth="32"
                        maxStringContentLength="2147483647"
                        maxArrayLength="2147483647"
                        maxBytesPerRead="4096"
                        maxNameTableCharCount="16384"/>
                    <security mode="None">
                        <transport
                            clientCredentialType="None"
                            proxyCredentialType="None"
                            realm=""/>
                        <message
                            algorithmSuite="Default"
                            clientCredentialType="UserName"/>
                    </security>
                </binding>
            </basicHttpBinding>
        </bindings>
        <client>
            <endpoint
                address="http://localhost/Nimble.Server.Iis/Framework/Common.svc"
                binding="basicHttpBinding"
                bindingConfiguration="httpBinding"
                contract="Common.ICommon"
                name="HttpBinding_ICommon"
                behaviorConfiguration="behaviorConfigurationEndpoint">
                <identity>
                    <dns value="localhost"/>
                </identity>
            </endpoint>
            <endpoint
                address="http://localhost/Nimble.Server.Iis/Framework/Security.svc"
                binding="basicHttpBinding"
                bindingConfiguration="httpBinding"
                contract="Security.ISecurity"
                name="HttpBinding_ISecurity"
                behaviorConfiguration="behaviorConfigurationEndpoint">
                <identity>
                    <dns value="localhost"/>
                </identity>
            </endpoint>
            <endpoint
                address="http://localhost/Nimble.Server.Iis/Framework/Multilanguage.svc"
                binding="basicHttpBinding"
                bindingConfiguration="httpBinding"
                contract="Multilanguage.IMultilanguage"
                name="HttpBinding_IMultilanguage"
                behaviorConfiguration="behaviorConfigurationEndpoint">
                <identity>
                    <dns value="localhost"/>
                </identity>
            </endpoint>
            <endpoint
                address="http://localhost/Nimble.Server.Iis/Framework/Maintenance.svc"
                binding="basicHttpBinding"
                bindingConfiguration="httpBinding"
                contract="Maintenance.IMaintenance"
                name="HttpBinding_IMaintenance"
                behaviorConfiguration="behaviorConfigurationEndpoint">
                <identity>
                    <dns value="localhost"/>
                </identity>
            </endpoint>
            <endpoint
                address="http://localhost/Nimble.Server.Iis/Framework/Geolocation.svc"
                binding="basicHttpBinding"
                bindingConfiguration="httpBinding"
                contract="Geolocation.IGeolocation"
                name="HttpBinding_IGeolocation"
                behaviorConfiguration="behaviorConfigurationEndpoint">
                <identity>
                    <dns value="localhost"/>
                </identity>
            </endpoint>
            <endpoint
                address="http://localhost/Nimble.Server.Iis/Framework/Owner.svc"
                binding="basicHttpBinding"
                bindingConfiguration="httpBinding"
                contract="Owner.IOwner"
                name="HttpBinding_IOwner"
                behaviorConfiguration="behaviorConfigurationEndpoint">
                <identity>
                    <dns value="localhost"/>
                </identity>
            </endpoint>
        </client>
        <behaviors>
            <endpointBehaviors>
                <behavior name="behaviorConfigurationEndpoint">
                    <dataContractSerializer maxItemsInObjectGraph="2147483647"/>
                </behavior>
            </endpointBehaviors>
        </behaviors>
    </system.serviceModel>

    <location path="Login.aspx">
        <system.web>
            <authorization>
                <allow users="*"/>
            </authorization>
        </system.web>
    </location>

    <location path="Default.aspx">
        <system.web>
            <authorization>
                <allow users="*"/>
            </authorization>
        </system.web>
    </location>

    <database.constraints>
        <add key="FK_Roles_Applications" primary="Application" foreign="Role" insert="" update="" delete=""/>
        <add key="FK_Logs_Applications" primary="Application" foreign="Log" insert="" update="" delete=""/>
    </database.constraints>

</configuration>
