//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Nimble.Silverlight.Client.Geolocation {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Geolocation.IGeolocation")]
    public interface IGeolocation {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/SourceCreate", ReplyAction="http://tempuri.org/IGeolocation/SourceCreateResponse")]
        System.IAsyncResult BeginSourceCreate(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/SourceRead", ReplyAction="http://tempuri.org/IGeolocation/SourceReadResponse")]
        System.IAsyncResult BeginSourceRead(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/SourceUpdate", ReplyAction="http://tempuri.org/IGeolocation/SourceUpdateResponse")]
        System.IAsyncResult BeginSourceUpdate(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/SourceDelete", ReplyAction="http://tempuri.org/IGeolocation/SourceDeleteResponse")]
        System.IAsyncResult BeginSourceDelete(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState);
        
        bool EndSourceDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/SourceSearch", ReplyAction="http://tempuri.org/IGeolocation/SourceSearchResponse")]
        System.IAsyncResult BeginSourceSearch(Nimble.Business.Library.Model.Framework.Geolocation.SourcePredicate sourcePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Source> EndSourceSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/SourceLoad", ReplyAction="http://tempuri.org/IGeolocation/SourceLoadResponse")]
        System.IAsyncResult BeginSourceLoad(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/SourceApprove", ReplyAction="http://tempuri.org/IGeolocation/SourceApproveResponse")]
        System.IAsyncResult BeginSourceApprove(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceApprove(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/LocationSearch", ReplyAction="http://tempuri.org/IGeolocation/LocationSearchResponse")]
        System.IAsyncResult BeginLocationSearch(Nimble.Business.Library.Model.Framework.Geolocation.LocationPredicate locationPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Location> EndLocationSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/BlockRead", ReplyAction="http://tempuri.org/IGeolocation/BlockReadResponse")]
        System.IAsyncResult BeginBlockRead(Nimble.Business.Library.Model.Framework.Geolocation.Block block, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Geolocation.Block EndBlockRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeolocation/BlockSearch", ReplyAction="http://tempuri.org/IGeolocation/BlockSearchResponse")]
        System.IAsyncResult BeginBlockSearch(Nimble.Business.Library.Model.Framework.Geolocation.BlockPredicate blockPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Block> EndBlockSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeolocationChannel : Nimble.Silverlight.Client.Geolocation.IGeolocation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Geolocation.Source Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Geolocation.Source Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Geolocation.Source Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Source> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Source>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Geolocation.Source Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceApproveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceApproveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Geolocation.Source Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocationSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LocationSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Location> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Location>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BlockReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BlockReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Geolocation.Block Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Geolocation.Block)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BlockSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BlockSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Block> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Block>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeolocationClient : System.ServiceModel.ClientBase<Nimble.Silverlight.Client.Geolocation.IGeolocation>, Nimble.Silverlight.Client.Geolocation.IGeolocation {
        
        private BeginOperationDelegate onBeginSourceCreateDelegate;
        
        private EndOperationDelegate onEndSourceCreateDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceReadDelegate;
        
        private EndOperationDelegate onEndSourceReadDelegate;
        
        private System.Threading.SendOrPostCallback onSourceReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceUpdateDelegate;
        
        private EndOperationDelegate onEndSourceUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onSourceUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceDeleteDelegate;
        
        private EndOperationDelegate onEndSourceDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onSourceDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceSearchDelegate;
        
        private EndOperationDelegate onEndSourceSearchDelegate;
        
        private System.Threading.SendOrPostCallback onSourceSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceLoadDelegate;
        
        private EndOperationDelegate onEndSourceLoadDelegate;
        
        private System.Threading.SendOrPostCallback onSourceLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceApproveDelegate;
        
        private EndOperationDelegate onEndSourceApproveDelegate;
        
        private System.Threading.SendOrPostCallback onSourceApproveCompletedDelegate;
        
        private BeginOperationDelegate onBeginLocationSearchDelegate;
        
        private EndOperationDelegate onEndLocationSearchDelegate;
        
        private System.Threading.SendOrPostCallback onLocationSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginBlockReadDelegate;
        
        private EndOperationDelegate onEndBlockReadDelegate;
        
        private System.Threading.SendOrPostCallback onBlockReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginBlockSearchDelegate;
        
        private EndOperationDelegate onEndBlockSearchDelegate;
        
        private System.Threading.SendOrPostCallback onBlockSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GeolocationClient() {
        }
        
        public GeolocationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeolocationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeolocationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeolocationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<SourceCreateCompletedEventArgs> SourceCreateCompleted;
        
        public event System.EventHandler<SourceReadCompletedEventArgs> SourceReadCompleted;
        
        public event System.EventHandler<SourceUpdateCompletedEventArgs> SourceUpdateCompleted;
        
        public event System.EventHandler<SourceDeleteCompletedEventArgs> SourceDeleteCompleted;
        
        public event System.EventHandler<SourceSearchCompletedEventArgs> SourceSearchCompleted;
        
        public event System.EventHandler<SourceLoadCompletedEventArgs> SourceLoadCompleted;
        
        public event System.EventHandler<SourceApproveCompletedEventArgs> SourceApproveCompleted;
        
        public event System.EventHandler<LocationSearchCompletedEventArgs> LocationSearchCompleted;
        
        public event System.EventHandler<BlockReadCompletedEventArgs> BlockReadCompleted;
        
        public event System.EventHandler<BlockSearchCompletedEventArgs> BlockSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginSourceCreate(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCreate(source, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Geolocation.Source Nimble.Silverlight.Client.Geolocation.IGeolocation.EndSourceCreate(System.IAsyncResult result) {
            return base.Channel.EndSourceCreate(result);
        }
        
        private System.IAsyncResult OnBeginSourceCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source source = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginSourceCreate(source, callback, asyncState);
        }
        
        private object[] OnEndSourceCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndSourceCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCreateCompleted(object state) {
            if ((this.SourceCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCreateCompleted(this, new SourceCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCreateAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source) {
            this.SourceCreateAsync(source, null);
        }
        
        public void SourceCreateAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source, object userState) {
            if ((this.onBeginSourceCreateDelegate == null)) {
                this.onBeginSourceCreateDelegate = new BeginOperationDelegate(this.OnBeginSourceCreate);
            }
            if ((this.onEndSourceCreateDelegate == null)) {
                this.onEndSourceCreateDelegate = new EndOperationDelegate(this.OnEndSourceCreate);
            }
            if ((this.onSourceCreateCompletedDelegate == null)) {
                this.onSourceCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCreateCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCreateDelegate, new object[] {
                        source}, this.onEndSourceCreateDelegate, this.onSourceCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginSourceRead(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceRead(source, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Geolocation.Source Nimble.Silverlight.Client.Geolocation.IGeolocation.EndSourceRead(System.IAsyncResult result) {
            return base.Channel.EndSourceRead(result);
        }
        
        private System.IAsyncResult OnBeginSourceRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source source = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginSourceRead(source, callback, asyncState);
        }
        
        private object[] OnEndSourceRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndSourceRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceReadCompleted(object state) {
            if ((this.SourceReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceReadCompleted(this, new SourceReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceReadAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source) {
            this.SourceReadAsync(source, null);
        }
        
        public void SourceReadAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source, object userState) {
            if ((this.onBeginSourceReadDelegate == null)) {
                this.onBeginSourceReadDelegate = new BeginOperationDelegate(this.OnBeginSourceRead);
            }
            if ((this.onEndSourceReadDelegate == null)) {
                this.onEndSourceReadDelegate = new EndOperationDelegate(this.OnEndSourceRead);
            }
            if ((this.onSourceReadCompletedDelegate == null)) {
                this.onSourceReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceReadCompleted);
            }
            base.InvokeAsync(this.onBeginSourceReadDelegate, new object[] {
                        source}, this.onEndSourceReadDelegate, this.onSourceReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginSourceUpdate(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceUpdate(source, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Geolocation.Source Nimble.Silverlight.Client.Geolocation.IGeolocation.EndSourceUpdate(System.IAsyncResult result) {
            return base.Channel.EndSourceUpdate(result);
        }
        
        private System.IAsyncResult OnBeginSourceUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source source = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginSourceUpdate(source, callback, asyncState);
        }
        
        private object[] OnEndSourceUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndSourceUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceUpdateCompleted(object state) {
            if ((this.SourceUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceUpdateCompleted(this, new SourceUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceUpdateAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source) {
            this.SourceUpdateAsync(source, null);
        }
        
        public void SourceUpdateAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source, object userState) {
            if ((this.onBeginSourceUpdateDelegate == null)) {
                this.onBeginSourceUpdateDelegate = new BeginOperationDelegate(this.OnBeginSourceUpdate);
            }
            if ((this.onEndSourceUpdateDelegate == null)) {
                this.onEndSourceUpdateDelegate = new EndOperationDelegate(this.OnEndSourceUpdate);
            }
            if ((this.onSourceUpdateCompletedDelegate == null)) {
                this.onSourceUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginSourceUpdateDelegate, new object[] {
                        source}, this.onEndSourceUpdateDelegate, this.onSourceUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginSourceDelete(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceDelete(source, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Nimble.Silverlight.Client.Geolocation.IGeolocation.EndSourceDelete(System.IAsyncResult result) {
            return base.Channel.EndSourceDelete(result);
        }
        
        private System.IAsyncResult OnBeginSourceDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source source = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginSourceDelete(source, callback, asyncState);
        }
        
        private object[] OnEndSourceDelete(System.IAsyncResult result) {
            bool retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndSourceDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceDeleteCompleted(object state) {
            if ((this.SourceDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceDeleteCompleted(this, new SourceDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceDeleteAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source) {
            this.SourceDeleteAsync(source, null);
        }
        
        public void SourceDeleteAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source, object userState) {
            if ((this.onBeginSourceDeleteDelegate == null)) {
                this.onBeginSourceDeleteDelegate = new BeginOperationDelegate(this.OnBeginSourceDelete);
            }
            if ((this.onEndSourceDeleteDelegate == null)) {
                this.onEndSourceDeleteDelegate = new EndOperationDelegate(this.OnEndSourceDelete);
            }
            if ((this.onSourceDeleteCompletedDelegate == null)) {
                this.onSourceDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginSourceDeleteDelegate, new object[] {
                        source}, this.onEndSourceDeleteDelegate, this.onSourceDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginSourceSearch(Nimble.Business.Library.Model.Framework.Geolocation.SourcePredicate sourcePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceSearch(sourcePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Source> Nimble.Silverlight.Client.Geolocation.IGeolocation.EndSourceSearch(System.IAsyncResult result) {
            return base.Channel.EndSourceSearch(result);
        }
        
        private System.IAsyncResult OnBeginSourceSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.SourcePredicate sourcePredicate = ((Nimble.Business.Library.Model.Framework.Geolocation.SourcePredicate)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginSourceSearch(sourcePredicate, callback, asyncState);
        }
        
        private object[] OnEndSourceSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Source> retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndSourceSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceSearchCompleted(object state) {
            if ((this.SourceSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceSearchCompleted(this, new SourceSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceSearchAsync(Nimble.Business.Library.Model.Framework.Geolocation.SourcePredicate sourcePredicate) {
            this.SourceSearchAsync(sourcePredicate, null);
        }
        
        public void SourceSearchAsync(Nimble.Business.Library.Model.Framework.Geolocation.SourcePredicate sourcePredicate, object userState) {
            if ((this.onBeginSourceSearchDelegate == null)) {
                this.onBeginSourceSearchDelegate = new BeginOperationDelegate(this.OnBeginSourceSearch);
            }
            if ((this.onEndSourceSearchDelegate == null)) {
                this.onEndSourceSearchDelegate = new EndOperationDelegate(this.OnEndSourceSearch);
            }
            if ((this.onSourceSearchCompletedDelegate == null)) {
                this.onSourceSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceSearchCompleted);
            }
            base.InvokeAsync(this.onBeginSourceSearchDelegate, new object[] {
                        sourcePredicate}, this.onEndSourceSearchDelegate, this.onSourceSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginSourceLoad(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceLoad(source, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Geolocation.Source Nimble.Silverlight.Client.Geolocation.IGeolocation.EndSourceLoad(System.IAsyncResult result) {
            return base.Channel.EndSourceLoad(result);
        }
        
        private System.IAsyncResult OnBeginSourceLoad(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source source = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginSourceLoad(source, callback, asyncState);
        }
        
        private object[] OnEndSourceLoad(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndSourceLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceLoadCompleted(object state) {
            if ((this.SourceLoadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceLoadCompleted(this, new SourceLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceLoadAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source) {
            this.SourceLoadAsync(source, null);
        }
        
        public void SourceLoadAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source, object userState) {
            if ((this.onBeginSourceLoadDelegate == null)) {
                this.onBeginSourceLoadDelegate = new BeginOperationDelegate(this.OnBeginSourceLoad);
            }
            if ((this.onEndSourceLoadDelegate == null)) {
                this.onEndSourceLoadDelegate = new EndOperationDelegate(this.OnEndSourceLoad);
            }
            if ((this.onSourceLoadCompletedDelegate == null)) {
                this.onSourceLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceLoadCompleted);
            }
            base.InvokeAsync(this.onBeginSourceLoadDelegate, new object[] {
                        source}, this.onEndSourceLoadDelegate, this.onSourceLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginSourceApprove(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceApprove(source, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Geolocation.Source Nimble.Silverlight.Client.Geolocation.IGeolocation.EndSourceApprove(System.IAsyncResult result) {
            return base.Channel.EndSourceApprove(result);
        }
        
        private System.IAsyncResult OnBeginSourceApprove(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source source = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginSourceApprove(source, callback, asyncState);
        }
        
        private object[] OnEndSourceApprove(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Geolocation.Source retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndSourceApprove(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceApproveCompleted(object state) {
            if ((this.SourceApproveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceApproveCompleted(this, new SourceApproveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceApproveAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source) {
            this.SourceApproveAsync(source, null);
        }
        
        public void SourceApproveAsync(Nimble.Business.Library.Model.Framework.Geolocation.Source source, object userState) {
            if ((this.onBeginSourceApproveDelegate == null)) {
                this.onBeginSourceApproveDelegate = new BeginOperationDelegate(this.OnBeginSourceApprove);
            }
            if ((this.onEndSourceApproveDelegate == null)) {
                this.onEndSourceApproveDelegate = new EndOperationDelegate(this.OnEndSourceApprove);
            }
            if ((this.onSourceApproveCompletedDelegate == null)) {
                this.onSourceApproveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceApproveCompleted);
            }
            base.InvokeAsync(this.onBeginSourceApproveDelegate, new object[] {
                        source}, this.onEndSourceApproveDelegate, this.onSourceApproveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginLocationSearch(Nimble.Business.Library.Model.Framework.Geolocation.LocationPredicate locationPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLocationSearch(locationPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Location> Nimble.Silverlight.Client.Geolocation.IGeolocation.EndLocationSearch(System.IAsyncResult result) {
            return base.Channel.EndLocationSearch(result);
        }
        
        private System.IAsyncResult OnBeginLocationSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.LocationPredicate locationPredicate = ((Nimble.Business.Library.Model.Framework.Geolocation.LocationPredicate)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginLocationSearch(locationPredicate, callback, asyncState);
        }
        
        private object[] OnEndLocationSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Location> retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndLocationSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLocationSearchCompleted(object state) {
            if ((this.LocationSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LocationSearchCompleted(this, new LocationSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LocationSearchAsync(Nimble.Business.Library.Model.Framework.Geolocation.LocationPredicate locationPredicate) {
            this.LocationSearchAsync(locationPredicate, null);
        }
        
        public void LocationSearchAsync(Nimble.Business.Library.Model.Framework.Geolocation.LocationPredicate locationPredicate, object userState) {
            if ((this.onBeginLocationSearchDelegate == null)) {
                this.onBeginLocationSearchDelegate = new BeginOperationDelegate(this.OnBeginLocationSearch);
            }
            if ((this.onEndLocationSearchDelegate == null)) {
                this.onEndLocationSearchDelegate = new EndOperationDelegate(this.OnEndLocationSearch);
            }
            if ((this.onLocationSearchCompletedDelegate == null)) {
                this.onLocationSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLocationSearchCompleted);
            }
            base.InvokeAsync(this.onBeginLocationSearchDelegate, new object[] {
                        locationPredicate}, this.onEndLocationSearchDelegate, this.onLocationSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginBlockRead(Nimble.Business.Library.Model.Framework.Geolocation.Block block, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBlockRead(block, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Geolocation.Block Nimble.Silverlight.Client.Geolocation.IGeolocation.EndBlockRead(System.IAsyncResult result) {
            return base.Channel.EndBlockRead(result);
        }
        
        private System.IAsyncResult OnBeginBlockRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.Block block = ((Nimble.Business.Library.Model.Framework.Geolocation.Block)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginBlockRead(block, callback, asyncState);
        }
        
        private object[] OnEndBlockRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Geolocation.Block retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndBlockRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBlockReadCompleted(object state) {
            if ((this.BlockReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BlockReadCompleted(this, new BlockReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BlockReadAsync(Nimble.Business.Library.Model.Framework.Geolocation.Block block) {
            this.BlockReadAsync(block, null);
        }
        
        public void BlockReadAsync(Nimble.Business.Library.Model.Framework.Geolocation.Block block, object userState) {
            if ((this.onBeginBlockReadDelegate == null)) {
                this.onBeginBlockReadDelegate = new BeginOperationDelegate(this.OnBeginBlockRead);
            }
            if ((this.onEndBlockReadDelegate == null)) {
                this.onEndBlockReadDelegate = new EndOperationDelegate(this.OnEndBlockRead);
            }
            if ((this.onBlockReadCompletedDelegate == null)) {
                this.onBlockReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBlockReadCompleted);
            }
            base.InvokeAsync(this.onBeginBlockReadDelegate, new object[] {
                        block}, this.onEndBlockReadDelegate, this.onBlockReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Silverlight.Client.Geolocation.IGeolocation.BeginBlockSearch(Nimble.Business.Library.Model.Framework.Geolocation.BlockPredicate blockPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBlockSearch(blockPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Block> Nimble.Silverlight.Client.Geolocation.IGeolocation.EndBlockSearch(System.IAsyncResult result) {
            return base.Channel.EndBlockSearch(result);
        }
        
        private System.IAsyncResult OnBeginBlockSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Geolocation.BlockPredicate blockPredicate = ((Nimble.Business.Library.Model.Framework.Geolocation.BlockPredicate)(inValues[0]));
            return ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).BeginBlockSearch(blockPredicate, callback, asyncState);
        }
        
        private object[] OnEndBlockSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Block> retVal = ((Nimble.Silverlight.Client.Geolocation.IGeolocation)(this)).EndBlockSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBlockSearchCompleted(object state) {
            if ((this.BlockSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BlockSearchCompleted(this, new BlockSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BlockSearchAsync(Nimble.Business.Library.Model.Framework.Geolocation.BlockPredicate blockPredicate) {
            this.BlockSearchAsync(blockPredicate, null);
        }
        
        public void BlockSearchAsync(Nimble.Business.Library.Model.Framework.Geolocation.BlockPredicate blockPredicate, object userState) {
            if ((this.onBeginBlockSearchDelegate == null)) {
                this.onBeginBlockSearchDelegate = new BeginOperationDelegate(this.OnBeginBlockSearch);
            }
            if ((this.onEndBlockSearchDelegate == null)) {
                this.onEndBlockSearchDelegate = new EndOperationDelegate(this.OnEndBlockSearch);
            }
            if ((this.onBlockSearchCompletedDelegate == null)) {
                this.onBlockSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBlockSearchCompleted);
            }
            base.InvokeAsync(this.onBeginBlockSearchDelegate, new object[] {
                        blockPredicate}, this.onEndBlockSearchDelegate, this.onBlockSearchCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Nimble.Silverlight.Client.Geolocation.IGeolocation CreateChannel() {
            return new GeolocationClientChannel(this);
        }
        
        private class GeolocationClientChannel : ChannelBase<Nimble.Silverlight.Client.Geolocation.IGeolocation>, Nimble.Silverlight.Client.Geolocation.IGeolocation {
            
            public GeolocationClientChannel(System.ServiceModel.ClientBase<Nimble.Silverlight.Client.Geolocation.IGeolocation> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSourceCreate(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = source;
                System.IAsyncResult _result = base.BeginInvoke("SourceCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Geolocation.Source _result = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(base.EndInvoke("SourceCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSourceRead(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = source;
                System.IAsyncResult _result = base.BeginInvoke("SourceRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Geolocation.Source _result = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(base.EndInvoke("SourceRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSourceUpdate(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = source;
                System.IAsyncResult _result = base.BeginInvoke("SourceUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Geolocation.Source _result = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(base.EndInvoke("SourceUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSourceDelete(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = source;
                System.IAsyncResult _result = base.BeginInvoke("SourceDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSourceDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SourceDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSourceSearch(Nimble.Business.Library.Model.Framework.Geolocation.SourcePredicate sourcePredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sourcePredicate;
                System.IAsyncResult _result = base.BeginInvoke("SourceSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Source> EndSourceSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Source> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Source>)(base.EndInvoke("SourceSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSourceLoad(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = source;
                System.IAsyncResult _result = base.BeginInvoke("SourceLoad", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceLoad(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Geolocation.Source _result = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(base.EndInvoke("SourceLoad", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSourceApprove(Nimble.Business.Library.Model.Framework.Geolocation.Source source, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = source;
                System.IAsyncResult _result = base.BeginInvoke("SourceApprove", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Geolocation.Source EndSourceApprove(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Geolocation.Source _result = ((Nimble.Business.Library.Model.Framework.Geolocation.Source)(base.EndInvoke("SourceApprove", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLocationSearch(Nimble.Business.Library.Model.Framework.Geolocation.LocationPredicate locationPredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = locationPredicate;
                System.IAsyncResult _result = base.BeginInvoke("LocationSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Location> EndLocationSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Location> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Location>)(base.EndInvoke("LocationSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBlockRead(Nimble.Business.Library.Model.Framework.Geolocation.Block block, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = block;
                System.IAsyncResult _result = base.BeginInvoke("BlockRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Geolocation.Block EndBlockRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Geolocation.Block _result = ((Nimble.Business.Library.Model.Framework.Geolocation.Block)(base.EndInvoke("BlockRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBlockSearch(Nimble.Business.Library.Model.Framework.Geolocation.BlockPredicate blockPredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = blockPredicate;
                System.IAsyncResult _result = base.BeginInvoke("BlockSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Block> EndBlockSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Block> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Geolocation.Block>)(base.EndInvoke("BlockSearch", _args, result)));
                return _result;
            }
        }
    }
}
