//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nimble.Portable.Client.Multilanguage {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Multilanguage.IMultilanguage")]
    public interface IMultilanguage {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/CultureCreate", ReplyAction="http://tempuri.org/IMultilanguage/CultureCreateResponse")]
        System.IAsyncResult BeginCultureCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Culture EndCultureCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/CultureRead", ReplyAction="http://tempuri.org/IMultilanguage/CultureReadResponse")]
        System.IAsyncResult BeginCultureRead(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Culture EndCultureRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/CultureUpdate", ReplyAction="http://tempuri.org/IMultilanguage/CultureUpdateResponse")]
        System.IAsyncResult BeginCultureUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Culture EndCultureUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/CultureDelete", ReplyAction="http://tempuri.org/IMultilanguage/CultureDeleteResponse")]
        System.IAsyncResult BeginCultureDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState);
        
        bool EndCultureDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/CultureSearch", ReplyAction="http://tempuri.org/IMultilanguage/CultureSearchResponse")]
        System.IAsyncResult BeginCultureSearch(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Culture> EndCultureSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/ResourceCreate", ReplyAction="http://tempuri.org/IMultilanguage/ResourceCreateResponse")]
        System.IAsyncResult BeginResourceCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Resource EndResourceCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/ResourceRead", ReplyAction="http://tempuri.org/IMultilanguage/ResourceReadResponse")]
        System.IAsyncResult BeginResourceRead(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Resource EndResourceRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/ResourceUpdate", ReplyAction="http://tempuri.org/IMultilanguage/ResourceUpdateResponse")]
        System.IAsyncResult BeginResourceUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Resource EndResourceUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/ResourceDelete", ReplyAction="http://tempuri.org/IMultilanguage/ResourceDeleteResponse")]
        System.IAsyncResult BeginResourceDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState);
        
        bool EndResourceDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/ResourceSearch", ReplyAction="http://tempuri.org/IMultilanguage/ResourceSearchResponse")]
        System.IAsyncResult BeginResourceSearch(Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Resource> EndResourceSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/TranslationCreate", ReplyAction="http://tempuri.org/IMultilanguage/TranslationCreateResponse")]
        System.IAsyncResult BeginTranslationCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Translation EndTranslationCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/TranslationRead", ReplyAction="http://tempuri.org/IMultilanguage/TranslationReadResponse")]
        System.IAsyncResult BeginTranslationRead(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Translation EndTranslationRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/TranslationUpdate", ReplyAction="http://tempuri.org/IMultilanguage/TranslationUpdateResponse")]
        System.IAsyncResult BeginTranslationUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Translation EndTranslationUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/TranslationDelete", ReplyAction="http://tempuri.org/IMultilanguage/TranslationDeleteResponse")]
        System.IAsyncResult BeginTranslationDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState);
        
        bool EndTranslationDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMultilanguage/TranslationSearch", ReplyAction="http://tempuri.org/IMultilanguage/TranslationSearchResponse")]
        System.IAsyncResult BeginTranslationSearch(Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Translation> EndTranslationSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMultilanguageChannel : Nimble.Portable.Client.Multilanguage.IMultilanguage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CultureCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CultureCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Culture Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CultureReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CultureReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Culture Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CultureUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CultureUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Culture Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CultureDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CultureDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CultureSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CultureSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Culture> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Culture>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Resource Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Resource Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Resource Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Resource> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Resource>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslationCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslationCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Translation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslationReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslationReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Translation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslationUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslationUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Translation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslationDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslationDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslationSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslationSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Translation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Translation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MultilanguageClient : System.ServiceModel.ClientBase<Nimble.Portable.Client.Multilanguage.IMultilanguage>, Nimble.Portable.Client.Multilanguage.IMultilanguage {
        
        private BeginOperationDelegate onBeginCultureCreateDelegate;
        
        private EndOperationDelegate onEndCultureCreateDelegate;
        
        private System.Threading.SendOrPostCallback onCultureCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCultureReadDelegate;
        
        private EndOperationDelegate onEndCultureReadDelegate;
        
        private System.Threading.SendOrPostCallback onCultureReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginCultureUpdateDelegate;
        
        private EndOperationDelegate onEndCultureUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onCultureUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCultureDeleteDelegate;
        
        private EndOperationDelegate onEndCultureDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onCultureDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginCultureSearchDelegate;
        
        private EndOperationDelegate onEndCultureSearchDelegate;
        
        private System.Threading.SendOrPostCallback onCultureSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceCreateDelegate;
        
        private EndOperationDelegate onEndResourceCreateDelegate;
        
        private System.Threading.SendOrPostCallback onResourceCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceReadDelegate;
        
        private EndOperationDelegate onEndResourceReadDelegate;
        
        private System.Threading.SendOrPostCallback onResourceReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceUpdateDelegate;
        
        private EndOperationDelegate onEndResourceUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onResourceUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceDeleteDelegate;
        
        private EndOperationDelegate onEndResourceDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onResourceDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceSearchDelegate;
        
        private EndOperationDelegate onEndResourceSearchDelegate;
        
        private System.Threading.SendOrPostCallback onResourceSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslationCreateDelegate;
        
        private EndOperationDelegate onEndTranslationCreateDelegate;
        
        private System.Threading.SendOrPostCallback onTranslationCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslationReadDelegate;
        
        private EndOperationDelegate onEndTranslationReadDelegate;
        
        private System.Threading.SendOrPostCallback onTranslationReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslationUpdateDelegate;
        
        private EndOperationDelegate onEndTranslationUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTranslationUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslationDeleteDelegate;
        
        private EndOperationDelegate onEndTranslationDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTranslationDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslationSearchDelegate;
        
        private EndOperationDelegate onEndTranslationSearchDelegate;
        
        private System.Threading.SendOrPostCallback onTranslationSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MultilanguageClient() : 
                base(MultilanguageClient.GetDefaultBinding(), MultilanguageClient.GetDefaultEndpointAddress()) {
        }
        
        public MultilanguageClient(EndpointConfiguration endpointConfiguration) : 
                base(MultilanguageClient.GetBindingForEndpoint(endpointConfiguration), MultilanguageClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public MultilanguageClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MultilanguageClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public MultilanguageClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MultilanguageClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public MultilanguageClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CultureCreateCompletedEventArgs> CultureCreateCompleted;
        
        public event System.EventHandler<CultureReadCompletedEventArgs> CultureReadCompleted;
        
        public event System.EventHandler<CultureUpdateCompletedEventArgs> CultureUpdateCompleted;
        
        public event System.EventHandler<CultureDeleteCompletedEventArgs> CultureDeleteCompleted;
        
        public event System.EventHandler<CultureSearchCompletedEventArgs> CultureSearchCompleted;
        
        public event System.EventHandler<ResourceCreateCompletedEventArgs> ResourceCreateCompleted;
        
        public event System.EventHandler<ResourceReadCompletedEventArgs> ResourceReadCompleted;
        
        public event System.EventHandler<ResourceUpdateCompletedEventArgs> ResourceUpdateCompleted;
        
        public event System.EventHandler<ResourceDeleteCompletedEventArgs> ResourceDeleteCompleted;
        
        public event System.EventHandler<ResourceSearchCompletedEventArgs> ResourceSearchCompleted;
        
        public event System.EventHandler<TranslationCreateCompletedEventArgs> TranslationCreateCompleted;
        
        public event System.EventHandler<TranslationReadCompletedEventArgs> TranslationReadCompleted;
        
        public event System.EventHandler<TranslationUpdateCompletedEventArgs> TranslationUpdateCompleted;
        
        public event System.EventHandler<TranslationDeleteCompletedEventArgs> TranslationDeleteCompleted;
        
        public event System.EventHandler<TranslationSearchCompletedEventArgs> TranslationSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginCultureCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCultureCreate(culture, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Culture Nimble.Portable.Client.Multilanguage.IMultilanguage.EndCultureCreate(System.IAsyncResult result) {
            return base.Channel.EndCultureCreate(result);
        }
        
        private System.IAsyncResult OnBeginCultureCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture = ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginCultureCreate(culture, callback, asyncState);
        }
        
        private object[] OnEndCultureCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Culture retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndCultureCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCultureCreateCompleted(object state) {
            if ((this.CultureCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CultureCreateCompleted(this, new CultureCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CultureCreateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture) {
            this.CultureCreateAsync(culture, null);
        }
        
        public void CultureCreateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, object userState) {
            if ((this.onBeginCultureCreateDelegate == null)) {
                this.onBeginCultureCreateDelegate = new BeginOperationDelegate(this.OnBeginCultureCreate);
            }
            if ((this.onEndCultureCreateDelegate == null)) {
                this.onEndCultureCreateDelegate = new EndOperationDelegate(this.OnEndCultureCreate);
            }
            if ((this.onCultureCreateCompletedDelegate == null)) {
                this.onCultureCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCultureCreateCompleted);
            }
            base.InvokeAsync(this.onBeginCultureCreateDelegate, new object[] {
                        culture}, this.onEndCultureCreateDelegate, this.onCultureCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginCultureRead(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCultureRead(culture, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Culture Nimble.Portable.Client.Multilanguage.IMultilanguage.EndCultureRead(System.IAsyncResult result) {
            return base.Channel.EndCultureRead(result);
        }
        
        private System.IAsyncResult OnBeginCultureRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture = ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginCultureRead(culture, callback, asyncState);
        }
        
        private object[] OnEndCultureRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Culture retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndCultureRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCultureReadCompleted(object state) {
            if ((this.CultureReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CultureReadCompleted(this, new CultureReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CultureReadAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture) {
            this.CultureReadAsync(culture, null);
        }
        
        public void CultureReadAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, object userState) {
            if ((this.onBeginCultureReadDelegate == null)) {
                this.onBeginCultureReadDelegate = new BeginOperationDelegate(this.OnBeginCultureRead);
            }
            if ((this.onEndCultureReadDelegate == null)) {
                this.onEndCultureReadDelegate = new EndOperationDelegate(this.OnEndCultureRead);
            }
            if ((this.onCultureReadCompletedDelegate == null)) {
                this.onCultureReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCultureReadCompleted);
            }
            base.InvokeAsync(this.onBeginCultureReadDelegate, new object[] {
                        culture}, this.onEndCultureReadDelegate, this.onCultureReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginCultureUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCultureUpdate(culture, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Culture Nimble.Portable.Client.Multilanguage.IMultilanguage.EndCultureUpdate(System.IAsyncResult result) {
            return base.Channel.EndCultureUpdate(result);
        }
        
        private System.IAsyncResult OnBeginCultureUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture = ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginCultureUpdate(culture, callback, asyncState);
        }
        
        private object[] OnEndCultureUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Culture retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndCultureUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCultureUpdateCompleted(object state) {
            if ((this.CultureUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CultureUpdateCompleted(this, new CultureUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CultureUpdateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture) {
            this.CultureUpdateAsync(culture, null);
        }
        
        public void CultureUpdateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, object userState) {
            if ((this.onBeginCultureUpdateDelegate == null)) {
                this.onBeginCultureUpdateDelegate = new BeginOperationDelegate(this.OnBeginCultureUpdate);
            }
            if ((this.onEndCultureUpdateDelegate == null)) {
                this.onEndCultureUpdateDelegate = new EndOperationDelegate(this.OnEndCultureUpdate);
            }
            if ((this.onCultureUpdateCompletedDelegate == null)) {
                this.onCultureUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCultureUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginCultureUpdateDelegate, new object[] {
                        culture}, this.onEndCultureUpdateDelegate, this.onCultureUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginCultureDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCultureDelete(culture, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Nimble.Portable.Client.Multilanguage.IMultilanguage.EndCultureDelete(System.IAsyncResult result) {
            return base.Channel.EndCultureDelete(result);
        }
        
        private System.IAsyncResult OnBeginCultureDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture = ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginCultureDelete(culture, callback, asyncState);
        }
        
        private object[] OnEndCultureDelete(System.IAsyncResult result) {
            bool retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndCultureDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCultureDeleteCompleted(object state) {
            if ((this.CultureDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CultureDeleteCompleted(this, new CultureDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CultureDeleteAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture) {
            this.CultureDeleteAsync(culture, null);
        }
        
        public void CultureDeleteAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, object userState) {
            if ((this.onBeginCultureDeleteDelegate == null)) {
                this.onBeginCultureDeleteDelegate = new BeginOperationDelegate(this.OnBeginCultureDelete);
            }
            if ((this.onEndCultureDeleteDelegate == null)) {
                this.onEndCultureDeleteDelegate = new EndOperationDelegate(this.OnEndCultureDelete);
            }
            if ((this.onCultureDeleteCompletedDelegate == null)) {
                this.onCultureDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCultureDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginCultureDeleteDelegate, new object[] {
                        culture}, this.onEndCultureDeleteDelegate, this.onCultureDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginCultureSearch(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCultureSearch(culturePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Culture> Nimble.Portable.Client.Multilanguage.IMultilanguage.EndCultureSearch(System.IAsyncResult result) {
            return base.Channel.EndCultureSearch(result);
        }
        
        private System.IAsyncResult OnBeginCultureSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate = ((Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginCultureSearch(culturePredicate, callback, asyncState);
        }
        
        private object[] OnEndCultureSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Culture> retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndCultureSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCultureSearchCompleted(object state) {
            if ((this.CultureSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CultureSearchCompleted(this, new CultureSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CultureSearchAsync(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate) {
            this.CultureSearchAsync(culturePredicate, null);
        }
        
        public void CultureSearchAsync(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, object userState) {
            if ((this.onBeginCultureSearchDelegate == null)) {
                this.onBeginCultureSearchDelegate = new BeginOperationDelegate(this.OnBeginCultureSearch);
            }
            if ((this.onEndCultureSearchDelegate == null)) {
                this.onEndCultureSearchDelegate = new EndOperationDelegate(this.OnEndCultureSearch);
            }
            if ((this.onCultureSearchCompletedDelegate == null)) {
                this.onCultureSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCultureSearchCompleted);
            }
            base.InvokeAsync(this.onBeginCultureSearchDelegate, new object[] {
                        culturePredicate}, this.onEndCultureSearchDelegate, this.onCultureSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginResourceCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceCreate(resource, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Resource Nimble.Portable.Client.Multilanguage.IMultilanguage.EndResourceCreate(System.IAsyncResult result) {
            return base.Channel.EndResourceCreate(result);
        }
        
        private System.IAsyncResult OnBeginResourceCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource = ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginResourceCreate(resource, callback, asyncState);
        }
        
        private object[] OnEndResourceCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Resource retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndResourceCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceCreateCompleted(object state) {
            if ((this.ResourceCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceCreateCompleted(this, new ResourceCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceCreateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource) {
            this.ResourceCreateAsync(resource, null);
        }
        
        public void ResourceCreateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, object userState) {
            if ((this.onBeginResourceCreateDelegate == null)) {
                this.onBeginResourceCreateDelegate = new BeginOperationDelegate(this.OnBeginResourceCreate);
            }
            if ((this.onEndResourceCreateDelegate == null)) {
                this.onEndResourceCreateDelegate = new EndOperationDelegate(this.OnEndResourceCreate);
            }
            if ((this.onResourceCreateCompletedDelegate == null)) {
                this.onResourceCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceCreateCompleted);
            }
            base.InvokeAsync(this.onBeginResourceCreateDelegate, new object[] {
                        resource}, this.onEndResourceCreateDelegate, this.onResourceCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginResourceRead(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceRead(resource, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Resource Nimble.Portable.Client.Multilanguage.IMultilanguage.EndResourceRead(System.IAsyncResult result) {
            return base.Channel.EndResourceRead(result);
        }
        
        private System.IAsyncResult OnBeginResourceRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource = ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginResourceRead(resource, callback, asyncState);
        }
        
        private object[] OnEndResourceRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Resource retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndResourceRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceReadCompleted(object state) {
            if ((this.ResourceReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceReadCompleted(this, new ResourceReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceReadAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource) {
            this.ResourceReadAsync(resource, null);
        }
        
        public void ResourceReadAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, object userState) {
            if ((this.onBeginResourceReadDelegate == null)) {
                this.onBeginResourceReadDelegate = new BeginOperationDelegate(this.OnBeginResourceRead);
            }
            if ((this.onEndResourceReadDelegate == null)) {
                this.onEndResourceReadDelegate = new EndOperationDelegate(this.OnEndResourceRead);
            }
            if ((this.onResourceReadCompletedDelegate == null)) {
                this.onResourceReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceReadCompleted);
            }
            base.InvokeAsync(this.onBeginResourceReadDelegate, new object[] {
                        resource}, this.onEndResourceReadDelegate, this.onResourceReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginResourceUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceUpdate(resource, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Resource Nimble.Portable.Client.Multilanguage.IMultilanguage.EndResourceUpdate(System.IAsyncResult result) {
            return base.Channel.EndResourceUpdate(result);
        }
        
        private System.IAsyncResult OnBeginResourceUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource = ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginResourceUpdate(resource, callback, asyncState);
        }
        
        private object[] OnEndResourceUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Resource retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndResourceUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceUpdateCompleted(object state) {
            if ((this.ResourceUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceUpdateCompleted(this, new ResourceUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceUpdateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource) {
            this.ResourceUpdateAsync(resource, null);
        }
        
        public void ResourceUpdateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, object userState) {
            if ((this.onBeginResourceUpdateDelegate == null)) {
                this.onBeginResourceUpdateDelegate = new BeginOperationDelegate(this.OnBeginResourceUpdate);
            }
            if ((this.onEndResourceUpdateDelegate == null)) {
                this.onEndResourceUpdateDelegate = new EndOperationDelegate(this.OnEndResourceUpdate);
            }
            if ((this.onResourceUpdateCompletedDelegate == null)) {
                this.onResourceUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginResourceUpdateDelegate, new object[] {
                        resource}, this.onEndResourceUpdateDelegate, this.onResourceUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginResourceDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceDelete(resource, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Nimble.Portable.Client.Multilanguage.IMultilanguage.EndResourceDelete(System.IAsyncResult result) {
            return base.Channel.EndResourceDelete(result);
        }
        
        private System.IAsyncResult OnBeginResourceDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource = ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginResourceDelete(resource, callback, asyncState);
        }
        
        private object[] OnEndResourceDelete(System.IAsyncResult result) {
            bool retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndResourceDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceDeleteCompleted(object state) {
            if ((this.ResourceDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceDeleteCompleted(this, new ResourceDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceDeleteAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource) {
            this.ResourceDeleteAsync(resource, null);
        }
        
        public void ResourceDeleteAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, object userState) {
            if ((this.onBeginResourceDeleteDelegate == null)) {
                this.onBeginResourceDeleteDelegate = new BeginOperationDelegate(this.OnBeginResourceDelete);
            }
            if ((this.onEndResourceDeleteDelegate == null)) {
                this.onEndResourceDeleteDelegate = new EndOperationDelegate(this.OnEndResourceDelete);
            }
            if ((this.onResourceDeleteCompletedDelegate == null)) {
                this.onResourceDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginResourceDeleteDelegate, new object[] {
                        resource}, this.onEndResourceDeleteDelegate, this.onResourceDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginResourceSearch(Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceSearch(resourcePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Resource> Nimble.Portable.Client.Multilanguage.IMultilanguage.EndResourceSearch(System.IAsyncResult result) {
            return base.Channel.EndResourceSearch(result);
        }
        
        private System.IAsyncResult OnBeginResourceSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate = ((Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginResourceSearch(resourcePredicate, callback, asyncState);
        }
        
        private object[] OnEndResourceSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Resource> retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndResourceSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceSearchCompleted(object state) {
            if ((this.ResourceSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceSearchCompleted(this, new ResourceSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceSearchAsync(Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate) {
            this.ResourceSearchAsync(resourcePredicate, null);
        }
        
        public void ResourceSearchAsync(Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, object userState) {
            if ((this.onBeginResourceSearchDelegate == null)) {
                this.onBeginResourceSearchDelegate = new BeginOperationDelegate(this.OnBeginResourceSearch);
            }
            if ((this.onEndResourceSearchDelegate == null)) {
                this.onEndResourceSearchDelegate = new EndOperationDelegate(this.OnEndResourceSearch);
            }
            if ((this.onResourceSearchCompletedDelegate == null)) {
                this.onResourceSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceSearchCompleted);
            }
            base.InvokeAsync(this.onBeginResourceSearchDelegate, new object[] {
                        resourcePredicate}, this.onEndResourceSearchDelegate, this.onResourceSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginTranslationCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslationCreate(translation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Translation Nimble.Portable.Client.Multilanguage.IMultilanguage.EndTranslationCreate(System.IAsyncResult result) {
            return base.Channel.EndTranslationCreate(result);
        }
        
        private System.IAsyncResult OnBeginTranslationCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation = ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginTranslationCreate(translation, callback, asyncState);
        }
        
        private object[] OnEndTranslationCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Translation retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndTranslationCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslationCreateCompleted(object state) {
            if ((this.TranslationCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslationCreateCompleted(this, new TranslationCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslationCreateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation) {
            this.TranslationCreateAsync(translation, null);
        }
        
        public void TranslationCreateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, object userState) {
            if ((this.onBeginTranslationCreateDelegate == null)) {
                this.onBeginTranslationCreateDelegate = new BeginOperationDelegate(this.OnBeginTranslationCreate);
            }
            if ((this.onEndTranslationCreateDelegate == null)) {
                this.onEndTranslationCreateDelegate = new EndOperationDelegate(this.OnEndTranslationCreate);
            }
            if ((this.onTranslationCreateCompletedDelegate == null)) {
                this.onTranslationCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslationCreateCompleted);
            }
            base.InvokeAsync(this.onBeginTranslationCreateDelegate, new object[] {
                        translation}, this.onEndTranslationCreateDelegate, this.onTranslationCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginTranslationRead(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslationRead(translation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Translation Nimble.Portable.Client.Multilanguage.IMultilanguage.EndTranslationRead(System.IAsyncResult result) {
            return base.Channel.EndTranslationRead(result);
        }
        
        private System.IAsyncResult OnBeginTranslationRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation = ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginTranslationRead(translation, callback, asyncState);
        }
        
        private object[] OnEndTranslationRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Translation retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndTranslationRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslationReadCompleted(object state) {
            if ((this.TranslationReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslationReadCompleted(this, new TranslationReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslationReadAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation) {
            this.TranslationReadAsync(translation, null);
        }
        
        public void TranslationReadAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, object userState) {
            if ((this.onBeginTranslationReadDelegate == null)) {
                this.onBeginTranslationReadDelegate = new BeginOperationDelegate(this.OnBeginTranslationRead);
            }
            if ((this.onEndTranslationReadDelegate == null)) {
                this.onEndTranslationReadDelegate = new EndOperationDelegate(this.OnEndTranslationRead);
            }
            if ((this.onTranslationReadCompletedDelegate == null)) {
                this.onTranslationReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslationReadCompleted);
            }
            base.InvokeAsync(this.onBeginTranslationReadDelegate, new object[] {
                        translation}, this.onEndTranslationReadDelegate, this.onTranslationReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginTranslationUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslationUpdate(translation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multilanguage.Translation Nimble.Portable.Client.Multilanguage.IMultilanguage.EndTranslationUpdate(System.IAsyncResult result) {
            return base.Channel.EndTranslationUpdate(result);
        }
        
        private System.IAsyncResult OnBeginTranslationUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation = ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginTranslationUpdate(translation, callback, asyncState);
        }
        
        private object[] OnEndTranslationUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Translation retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndTranslationUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslationUpdateCompleted(object state) {
            if ((this.TranslationUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslationUpdateCompleted(this, new TranslationUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslationUpdateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation) {
            this.TranslationUpdateAsync(translation, null);
        }
        
        public void TranslationUpdateAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, object userState) {
            if ((this.onBeginTranslationUpdateDelegate == null)) {
                this.onBeginTranslationUpdateDelegate = new BeginOperationDelegate(this.OnBeginTranslationUpdate);
            }
            if ((this.onEndTranslationUpdateDelegate == null)) {
                this.onEndTranslationUpdateDelegate = new EndOperationDelegate(this.OnEndTranslationUpdate);
            }
            if ((this.onTranslationUpdateCompletedDelegate == null)) {
                this.onTranslationUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslationUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTranslationUpdateDelegate, new object[] {
                        translation}, this.onEndTranslationUpdateDelegate, this.onTranslationUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginTranslationDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslationDelete(translation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Nimble.Portable.Client.Multilanguage.IMultilanguage.EndTranslationDelete(System.IAsyncResult result) {
            return base.Channel.EndTranslationDelete(result);
        }
        
        private System.IAsyncResult OnBeginTranslationDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation = ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginTranslationDelete(translation, callback, asyncState);
        }
        
        private object[] OnEndTranslationDelete(System.IAsyncResult result) {
            bool retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndTranslationDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslationDeleteCompleted(object state) {
            if ((this.TranslationDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslationDeleteCompleted(this, new TranslationDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslationDeleteAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation) {
            this.TranslationDeleteAsync(translation, null);
        }
        
        public void TranslationDeleteAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, object userState) {
            if ((this.onBeginTranslationDeleteDelegate == null)) {
                this.onBeginTranslationDeleteDelegate = new BeginOperationDelegate(this.OnBeginTranslationDelete);
            }
            if ((this.onEndTranslationDeleteDelegate == null)) {
                this.onEndTranslationDeleteDelegate = new EndOperationDelegate(this.OnEndTranslationDelete);
            }
            if ((this.onTranslationDeleteCompletedDelegate == null)) {
                this.onTranslationDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslationDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTranslationDeleteDelegate, new object[] {
                        translation}, this.onEndTranslationDeleteDelegate, this.onTranslationDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multilanguage.IMultilanguage.BeginTranslationSearch(Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslationSearch(translationPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Translation> Nimble.Portable.Client.Multilanguage.IMultilanguage.EndTranslationSearch(System.IAsyncResult result) {
            return base.Channel.EndTranslationSearch(result);
        }
        
        private System.IAsyncResult OnBeginTranslationSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate = ((Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).BeginTranslationSearch(translationPredicate, callback, asyncState);
        }
        
        private object[] OnEndTranslationSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Translation> retVal = ((Nimble.Portable.Client.Multilanguage.IMultilanguage)(this)).EndTranslationSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslationSearchCompleted(object state) {
            if ((this.TranslationSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslationSearchCompleted(this, new TranslationSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslationSearchAsync(Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate) {
            this.TranslationSearchAsync(translationPredicate, null);
        }
        
        public void TranslationSearchAsync(Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate, object userState) {
            if ((this.onBeginTranslationSearchDelegate == null)) {
                this.onBeginTranslationSearchDelegate = new BeginOperationDelegate(this.OnBeginTranslationSearch);
            }
            if ((this.onEndTranslationSearchDelegate == null)) {
                this.onEndTranslationSearchDelegate = new EndOperationDelegate(this.OnEndTranslationSearch);
            }
            if ((this.onTranslationSearchCompletedDelegate == null)) {
                this.onTranslationSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslationSearchCompleted);
            }
            base.InvokeAsync(this.onBeginTranslationSearchDelegate, new object[] {
                        translationPredicate}, this.onEndTranslationSearchDelegate, this.onTranslationSearchCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Nimble.Portable.Client.Multilanguage.IMultilanguage CreateChannel() {
            return new MultilanguageClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMultilanguage)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMultilanguage)) {
                return new System.ServiceModel.EndpointAddress("http://localhost/Nimble.Server.Iis/Framework/Multilanguage.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MultilanguageClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMultilanguage);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MultilanguageClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMultilanguage);
        }
        
        private class MultilanguageClientChannel : ChannelBase<Nimble.Portable.Client.Multilanguage.IMultilanguage>, Nimble.Portable.Client.Multilanguage.IMultilanguage {
            
            public MultilanguageClientChannel(System.ServiceModel.ClientBase<Nimble.Portable.Client.Multilanguage.IMultilanguage> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCultureCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = culture;
                System.IAsyncResult _result = base.BeginInvoke("CultureCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Culture EndCultureCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Culture _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(base.EndInvoke("CultureCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCultureRead(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = culture;
                System.IAsyncResult _result = base.BeginInvoke("CultureRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Culture EndCultureRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Culture _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(base.EndInvoke("CultureRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCultureUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = culture;
                System.IAsyncResult _result = base.BeginInvoke("CultureUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Culture EndCultureUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Culture _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Culture)(base.EndInvoke("CultureUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCultureDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Culture culture, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = culture;
                System.IAsyncResult _result = base.BeginInvoke("CultureDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCultureDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CultureDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCultureSearch(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = culturePredicate;
                System.IAsyncResult _result = base.BeginInvoke("CultureSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Culture> EndCultureSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Culture> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Culture>)(base.EndInvoke("CultureSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResourceCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = resource;
                System.IAsyncResult _result = base.BeginInvoke("ResourceCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Resource EndResourceCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Resource _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(base.EndInvoke("ResourceCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResourceRead(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = resource;
                System.IAsyncResult _result = base.BeginInvoke("ResourceRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Resource EndResourceRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Resource _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(base.EndInvoke("ResourceRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResourceUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = resource;
                System.IAsyncResult _result = base.BeginInvoke("ResourceUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Resource EndResourceUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Resource _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(base.EndInvoke("ResourceUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResourceDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = resource;
                System.IAsyncResult _result = base.BeginInvoke("ResourceDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndResourceDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ResourceDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResourceSearch(Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = resourcePredicate;
                System.IAsyncResult _result = base.BeginInvoke("ResourceSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Resource> EndResourceSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Resource> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Resource>)(base.EndInvoke("ResourceSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTranslationCreate(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = translation;
                System.IAsyncResult _result = base.BeginInvoke("TranslationCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Translation EndTranslationCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Translation _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(base.EndInvoke("TranslationCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTranslationRead(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = translation;
                System.IAsyncResult _result = base.BeginInvoke("TranslationRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Translation EndTranslationRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Translation _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(base.EndInvoke("TranslationRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTranslationUpdate(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = translation;
                System.IAsyncResult _result = base.BeginInvoke("TranslationUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multilanguage.Translation EndTranslationUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multilanguage.Translation _result = ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(base.EndInvoke("TranslationUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTranslationDelete(Nimble.Business.Library.Model.Framework.Multilanguage.Translation translation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = translation;
                System.IAsyncResult _result = base.BeginInvoke("TranslationDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndTranslationDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("TranslationDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTranslationSearch(Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = translationPredicate;
                System.IAsyncResult _result = base.BeginInvoke("TranslationSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Translation> EndTranslationSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Translation> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multilanguage.Translation>)(base.EndInvoke("TranslationSearch", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMultilanguage,
        }
    }
}
