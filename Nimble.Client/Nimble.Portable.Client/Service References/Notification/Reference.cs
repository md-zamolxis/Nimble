//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nimble.Portable.Client.Notification {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Notification.INotification")]
    public interface INotification {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/PublisherCreate", ReplyAction="http://tempuri.org/INotification/PublisherCreateResponse")]
        System.IAsyncResult BeginPublisherCreate(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Publisher EndPublisherCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/PublisherRead", ReplyAction="http://tempuri.org/INotification/PublisherReadResponse")]
        System.IAsyncResult BeginPublisherRead(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Publisher EndPublisherRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/PublisherUpdate", ReplyAction="http://tempuri.org/INotification/PublisherUpdateResponse")]
        System.IAsyncResult BeginPublisherUpdate(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Publisher EndPublisherUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/PublisherDelete", ReplyAction="http://tempuri.org/INotification/PublisherDeleteResponse")]
        System.IAsyncResult BeginPublisherDelete(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState);
        
        bool EndPublisherDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/PublisherSearch", ReplyAction="http://tempuri.org/INotification/PublisherSearchResponse")]
        System.IAsyncResult BeginPublisherSearch(Nimble.Business.Library.Model.Framework.Notification.PublisherPredicate publisherPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Publisher> EndPublisherSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/SubscriberCreate", ReplyAction="http://tempuri.org/INotification/SubscriberCreateResponse")]
        System.IAsyncResult BeginSubscriberCreate(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Subscriber EndSubscriberCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/SubscriberRead", ReplyAction="http://tempuri.org/INotification/SubscriberReadResponse")]
        System.IAsyncResult BeginSubscriberRead(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Subscriber EndSubscriberRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/SubscriberUpdate", ReplyAction="http://tempuri.org/INotification/SubscriberUpdateResponse")]
        System.IAsyncResult BeginSubscriberUpdate(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Subscriber EndSubscriberUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/SubscriberDelete", ReplyAction="http://tempuri.org/INotification/SubscriberDeleteResponse")]
        System.IAsyncResult BeginSubscriberDelete(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState);
        
        bool EndSubscriberDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/SubscriberSearch", ReplyAction="http://tempuri.org/INotification/SubscriberSearchResponse")]
        System.IAsyncResult BeginSubscriberSearch(Nimble.Business.Library.Model.Framework.Notification.SubscriberPredicate subscriberPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Subscriber> EndSubscriberSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/MessageCreate", ReplyAction="http://tempuri.org/INotification/MessageCreateResponse")]
        System.IAsyncResult BeginMessageCreate(Nimble.Business.Library.Model.Framework.Notification.Message message, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Message EndMessageCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/MessageRead", ReplyAction="http://tempuri.org/INotification/MessageReadResponse")]
        System.IAsyncResult BeginMessageRead(Nimble.Business.Library.Model.Framework.Notification.Message message, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Message EndMessageRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/MessageSearch", ReplyAction="http://tempuri.org/INotification/MessageSearchResponse")]
        System.IAsyncResult BeginMessageSearch(Nimble.Business.Library.Model.Framework.Notification.MessagePredicate messagePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Message> EndMessageSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/TraceCreate", ReplyAction="http://tempuri.org/INotification/TraceCreateResponse")]
        System.IAsyncResult BeginTraceCreate(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Trace EndTraceCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/TraceRead", ReplyAction="http://tempuri.org/INotification/TraceReadResponse")]
        System.IAsyncResult BeginTraceRead(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Trace EndTraceRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/TraceUpdate", ReplyAction="http://tempuri.org/INotification/TraceUpdateResponse")]
        System.IAsyncResult BeginTraceUpdate(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Notification.Trace EndTraceUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotification/TraceSearch", ReplyAction="http://tempuri.org/INotification/TraceSearchResponse")]
        System.IAsyncResult BeginTraceSearch(Nimble.Business.Library.Model.Framework.Notification.TracePredicate tracePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Trace> EndTraceSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationChannel : Nimble.Portable.Client.Notification.INotification, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublisherCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PublisherCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Publisher Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublisherReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PublisherReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Publisher Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublisherUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PublisherUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Publisher Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublisherDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PublisherDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublisherSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PublisherSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Publisher> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Publisher>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriberCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscriberCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Subscriber Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriberReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscriberReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Subscriber Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriberUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscriberUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Subscriber Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriberDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscriberDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriberSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscriberSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Subscriber> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Subscriber>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MessageCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Message Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Message)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MessageReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Message Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Message)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MessageSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Message> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Message>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TraceCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TraceCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Trace Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Trace)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TraceReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TraceReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Trace Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Trace)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TraceUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TraceUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Notification.Trace Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Notification.Trace)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TraceSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TraceSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Trace> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Trace>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationClient : System.ServiceModel.ClientBase<Nimble.Portable.Client.Notification.INotification>, Nimble.Portable.Client.Notification.INotification {
        
        private BeginOperationDelegate onBeginPublisherCreateDelegate;
        
        private EndOperationDelegate onEndPublisherCreateDelegate;
        
        private System.Threading.SendOrPostCallback onPublisherCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublisherReadDelegate;
        
        private EndOperationDelegate onEndPublisherReadDelegate;
        
        private System.Threading.SendOrPostCallback onPublisherReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublisherUpdateDelegate;
        
        private EndOperationDelegate onEndPublisherUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onPublisherUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublisherDeleteDelegate;
        
        private EndOperationDelegate onEndPublisherDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onPublisherDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublisherSearchDelegate;
        
        private EndOperationDelegate onEndPublisherSearchDelegate;
        
        private System.Threading.SendOrPostCallback onPublisherSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscriberCreateDelegate;
        
        private EndOperationDelegate onEndSubscriberCreateDelegate;
        
        private System.Threading.SendOrPostCallback onSubscriberCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscriberReadDelegate;
        
        private EndOperationDelegate onEndSubscriberReadDelegate;
        
        private System.Threading.SendOrPostCallback onSubscriberReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscriberUpdateDelegate;
        
        private EndOperationDelegate onEndSubscriberUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onSubscriberUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscriberDeleteDelegate;
        
        private EndOperationDelegate onEndSubscriberDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onSubscriberDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscriberSearchDelegate;
        
        private EndOperationDelegate onEndSubscriberSearchDelegate;
        
        private System.Threading.SendOrPostCallback onSubscriberSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessageCreateDelegate;
        
        private EndOperationDelegate onEndMessageCreateDelegate;
        
        private System.Threading.SendOrPostCallback onMessageCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessageReadDelegate;
        
        private EndOperationDelegate onEndMessageReadDelegate;
        
        private System.Threading.SendOrPostCallback onMessageReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessageSearchDelegate;
        
        private EndOperationDelegate onEndMessageSearchDelegate;
        
        private System.Threading.SendOrPostCallback onMessageSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginTraceCreateDelegate;
        
        private EndOperationDelegate onEndTraceCreateDelegate;
        
        private System.Threading.SendOrPostCallback onTraceCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTraceReadDelegate;
        
        private EndOperationDelegate onEndTraceReadDelegate;
        
        private System.Threading.SendOrPostCallback onTraceReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginTraceUpdateDelegate;
        
        private EndOperationDelegate onEndTraceUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTraceUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTraceSearchDelegate;
        
        private EndOperationDelegate onEndTraceSearchDelegate;
        
        private System.Threading.SendOrPostCallback onTraceSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NotificationClient() : 
                base(NotificationClient.GetDefaultBinding(), NotificationClient.GetDefaultEndpointAddress()) {
        }
        
        public NotificationClient(EndpointConfiguration endpointConfiguration) : 
                base(NotificationClient.GetBindingForEndpoint(endpointConfiguration), NotificationClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public NotificationClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(NotificationClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public NotificationClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(NotificationClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public NotificationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<PublisherCreateCompletedEventArgs> PublisherCreateCompleted;
        
        public event System.EventHandler<PublisherReadCompletedEventArgs> PublisherReadCompleted;
        
        public event System.EventHandler<PublisherUpdateCompletedEventArgs> PublisherUpdateCompleted;
        
        public event System.EventHandler<PublisherDeleteCompletedEventArgs> PublisherDeleteCompleted;
        
        public event System.EventHandler<PublisherSearchCompletedEventArgs> PublisherSearchCompleted;
        
        public event System.EventHandler<SubscriberCreateCompletedEventArgs> SubscriberCreateCompleted;
        
        public event System.EventHandler<SubscriberReadCompletedEventArgs> SubscriberReadCompleted;
        
        public event System.EventHandler<SubscriberUpdateCompletedEventArgs> SubscriberUpdateCompleted;
        
        public event System.EventHandler<SubscriberDeleteCompletedEventArgs> SubscriberDeleteCompleted;
        
        public event System.EventHandler<SubscriberSearchCompletedEventArgs> SubscriberSearchCompleted;
        
        public event System.EventHandler<MessageCreateCompletedEventArgs> MessageCreateCompleted;
        
        public event System.EventHandler<MessageReadCompletedEventArgs> MessageReadCompleted;
        
        public event System.EventHandler<MessageSearchCompletedEventArgs> MessageSearchCompleted;
        
        public event System.EventHandler<TraceCreateCompletedEventArgs> TraceCreateCompleted;
        
        public event System.EventHandler<TraceReadCompletedEventArgs> TraceReadCompleted;
        
        public event System.EventHandler<TraceUpdateCompletedEventArgs> TraceUpdateCompleted;
        
        public event System.EventHandler<TraceSearchCompletedEventArgs> TraceSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginPublisherCreate(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublisherCreate(publisher, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Publisher Nimble.Portable.Client.Notification.INotification.EndPublisherCreate(System.IAsyncResult result) {
            return base.Channel.EndPublisherCreate(result);
        }
        
        private System.IAsyncResult OnBeginPublisherCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Publisher publisher = ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginPublisherCreate(publisher, callback, asyncState);
        }
        
        private object[] OnEndPublisherCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Publisher retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndPublisherCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPublisherCreateCompleted(object state) {
            if ((this.PublisherCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublisherCreateCompleted(this, new PublisherCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublisherCreateAsync(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher) {
            this.PublisherCreateAsync(publisher, null);
        }
        
        public void PublisherCreateAsync(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, object userState) {
            if ((this.onBeginPublisherCreateDelegate == null)) {
                this.onBeginPublisherCreateDelegate = new BeginOperationDelegate(this.OnBeginPublisherCreate);
            }
            if ((this.onEndPublisherCreateDelegate == null)) {
                this.onEndPublisherCreateDelegate = new EndOperationDelegate(this.OnEndPublisherCreate);
            }
            if ((this.onPublisherCreateCompletedDelegate == null)) {
                this.onPublisherCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublisherCreateCompleted);
            }
            base.InvokeAsync(this.onBeginPublisherCreateDelegate, new object[] {
                        publisher}, this.onEndPublisherCreateDelegate, this.onPublisherCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginPublisherRead(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublisherRead(publisher, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Publisher Nimble.Portable.Client.Notification.INotification.EndPublisherRead(System.IAsyncResult result) {
            return base.Channel.EndPublisherRead(result);
        }
        
        private System.IAsyncResult OnBeginPublisherRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Publisher publisher = ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginPublisherRead(publisher, callback, asyncState);
        }
        
        private object[] OnEndPublisherRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Publisher retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndPublisherRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPublisherReadCompleted(object state) {
            if ((this.PublisherReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublisherReadCompleted(this, new PublisherReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublisherReadAsync(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher) {
            this.PublisherReadAsync(publisher, null);
        }
        
        public void PublisherReadAsync(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, object userState) {
            if ((this.onBeginPublisherReadDelegate == null)) {
                this.onBeginPublisherReadDelegate = new BeginOperationDelegate(this.OnBeginPublisherRead);
            }
            if ((this.onEndPublisherReadDelegate == null)) {
                this.onEndPublisherReadDelegate = new EndOperationDelegate(this.OnEndPublisherRead);
            }
            if ((this.onPublisherReadCompletedDelegate == null)) {
                this.onPublisherReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublisherReadCompleted);
            }
            base.InvokeAsync(this.onBeginPublisherReadDelegate, new object[] {
                        publisher}, this.onEndPublisherReadDelegate, this.onPublisherReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginPublisherUpdate(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublisherUpdate(publisher, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Publisher Nimble.Portable.Client.Notification.INotification.EndPublisherUpdate(System.IAsyncResult result) {
            return base.Channel.EndPublisherUpdate(result);
        }
        
        private System.IAsyncResult OnBeginPublisherUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Publisher publisher = ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginPublisherUpdate(publisher, callback, asyncState);
        }
        
        private object[] OnEndPublisherUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Publisher retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndPublisherUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPublisherUpdateCompleted(object state) {
            if ((this.PublisherUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublisherUpdateCompleted(this, new PublisherUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublisherUpdateAsync(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher) {
            this.PublisherUpdateAsync(publisher, null);
        }
        
        public void PublisherUpdateAsync(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, object userState) {
            if ((this.onBeginPublisherUpdateDelegate == null)) {
                this.onBeginPublisherUpdateDelegate = new BeginOperationDelegate(this.OnBeginPublisherUpdate);
            }
            if ((this.onEndPublisherUpdateDelegate == null)) {
                this.onEndPublisherUpdateDelegate = new EndOperationDelegate(this.OnEndPublisherUpdate);
            }
            if ((this.onPublisherUpdateCompletedDelegate == null)) {
                this.onPublisherUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublisherUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginPublisherUpdateDelegate, new object[] {
                        publisher}, this.onEndPublisherUpdateDelegate, this.onPublisherUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginPublisherDelete(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublisherDelete(publisher, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Nimble.Portable.Client.Notification.INotification.EndPublisherDelete(System.IAsyncResult result) {
            return base.Channel.EndPublisherDelete(result);
        }
        
        private System.IAsyncResult OnBeginPublisherDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Publisher publisher = ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginPublisherDelete(publisher, callback, asyncState);
        }
        
        private object[] OnEndPublisherDelete(System.IAsyncResult result) {
            bool retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndPublisherDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPublisherDeleteCompleted(object state) {
            if ((this.PublisherDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublisherDeleteCompleted(this, new PublisherDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublisherDeleteAsync(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher) {
            this.PublisherDeleteAsync(publisher, null);
        }
        
        public void PublisherDeleteAsync(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, object userState) {
            if ((this.onBeginPublisherDeleteDelegate == null)) {
                this.onBeginPublisherDeleteDelegate = new BeginOperationDelegate(this.OnBeginPublisherDelete);
            }
            if ((this.onEndPublisherDeleteDelegate == null)) {
                this.onEndPublisherDeleteDelegate = new EndOperationDelegate(this.OnEndPublisherDelete);
            }
            if ((this.onPublisherDeleteCompletedDelegate == null)) {
                this.onPublisherDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublisherDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginPublisherDeleteDelegate, new object[] {
                        publisher}, this.onEndPublisherDeleteDelegate, this.onPublisherDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginPublisherSearch(Nimble.Business.Library.Model.Framework.Notification.PublisherPredicate publisherPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublisherSearch(publisherPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Publisher> Nimble.Portable.Client.Notification.INotification.EndPublisherSearch(System.IAsyncResult result) {
            return base.Channel.EndPublisherSearch(result);
        }
        
        private System.IAsyncResult OnBeginPublisherSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.PublisherPredicate publisherPredicate = ((Nimble.Business.Library.Model.Framework.Notification.PublisherPredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginPublisherSearch(publisherPredicate, callback, asyncState);
        }
        
        private object[] OnEndPublisherSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Publisher> retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndPublisherSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPublisherSearchCompleted(object state) {
            if ((this.PublisherSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublisherSearchCompleted(this, new PublisherSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublisherSearchAsync(Nimble.Business.Library.Model.Framework.Notification.PublisherPredicate publisherPredicate) {
            this.PublisherSearchAsync(publisherPredicate, null);
        }
        
        public void PublisherSearchAsync(Nimble.Business.Library.Model.Framework.Notification.PublisherPredicate publisherPredicate, object userState) {
            if ((this.onBeginPublisherSearchDelegate == null)) {
                this.onBeginPublisherSearchDelegate = new BeginOperationDelegate(this.OnBeginPublisherSearch);
            }
            if ((this.onEndPublisherSearchDelegate == null)) {
                this.onEndPublisherSearchDelegate = new EndOperationDelegate(this.OnEndPublisherSearch);
            }
            if ((this.onPublisherSearchCompletedDelegate == null)) {
                this.onPublisherSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublisherSearchCompleted);
            }
            base.InvokeAsync(this.onBeginPublisherSearchDelegate, new object[] {
                        publisherPredicate}, this.onEndPublisherSearchDelegate, this.onPublisherSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginSubscriberCreate(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscriberCreate(subscriber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Subscriber Nimble.Portable.Client.Notification.INotification.EndSubscriberCreate(System.IAsyncResult result) {
            return base.Channel.EndSubscriberCreate(result);
        }
        
        private System.IAsyncResult OnBeginSubscriberCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber = ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginSubscriberCreate(subscriber, callback, asyncState);
        }
        
        private object[] OnEndSubscriberCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Subscriber retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndSubscriberCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscriberCreateCompleted(object state) {
            if ((this.SubscriberCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscriberCreateCompleted(this, new SubscriberCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscriberCreateAsync(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber) {
            this.SubscriberCreateAsync(subscriber, null);
        }
        
        public void SubscriberCreateAsync(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, object userState) {
            if ((this.onBeginSubscriberCreateDelegate == null)) {
                this.onBeginSubscriberCreateDelegate = new BeginOperationDelegate(this.OnBeginSubscriberCreate);
            }
            if ((this.onEndSubscriberCreateDelegate == null)) {
                this.onEndSubscriberCreateDelegate = new EndOperationDelegate(this.OnEndSubscriberCreate);
            }
            if ((this.onSubscriberCreateCompletedDelegate == null)) {
                this.onSubscriberCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscriberCreateCompleted);
            }
            base.InvokeAsync(this.onBeginSubscriberCreateDelegate, new object[] {
                        subscriber}, this.onEndSubscriberCreateDelegate, this.onSubscriberCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginSubscriberRead(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscriberRead(subscriber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Subscriber Nimble.Portable.Client.Notification.INotification.EndSubscriberRead(System.IAsyncResult result) {
            return base.Channel.EndSubscriberRead(result);
        }
        
        private System.IAsyncResult OnBeginSubscriberRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber = ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginSubscriberRead(subscriber, callback, asyncState);
        }
        
        private object[] OnEndSubscriberRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Subscriber retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndSubscriberRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscriberReadCompleted(object state) {
            if ((this.SubscriberReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscriberReadCompleted(this, new SubscriberReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscriberReadAsync(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber) {
            this.SubscriberReadAsync(subscriber, null);
        }
        
        public void SubscriberReadAsync(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, object userState) {
            if ((this.onBeginSubscriberReadDelegate == null)) {
                this.onBeginSubscriberReadDelegate = new BeginOperationDelegate(this.OnBeginSubscriberRead);
            }
            if ((this.onEndSubscriberReadDelegate == null)) {
                this.onEndSubscriberReadDelegate = new EndOperationDelegate(this.OnEndSubscriberRead);
            }
            if ((this.onSubscriberReadCompletedDelegate == null)) {
                this.onSubscriberReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscriberReadCompleted);
            }
            base.InvokeAsync(this.onBeginSubscriberReadDelegate, new object[] {
                        subscriber}, this.onEndSubscriberReadDelegate, this.onSubscriberReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginSubscriberUpdate(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscriberUpdate(subscriber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Subscriber Nimble.Portable.Client.Notification.INotification.EndSubscriberUpdate(System.IAsyncResult result) {
            return base.Channel.EndSubscriberUpdate(result);
        }
        
        private System.IAsyncResult OnBeginSubscriberUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber = ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginSubscriberUpdate(subscriber, callback, asyncState);
        }
        
        private object[] OnEndSubscriberUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Subscriber retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndSubscriberUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscriberUpdateCompleted(object state) {
            if ((this.SubscriberUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscriberUpdateCompleted(this, new SubscriberUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscriberUpdateAsync(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber) {
            this.SubscriberUpdateAsync(subscriber, null);
        }
        
        public void SubscriberUpdateAsync(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, object userState) {
            if ((this.onBeginSubscriberUpdateDelegate == null)) {
                this.onBeginSubscriberUpdateDelegate = new BeginOperationDelegate(this.OnBeginSubscriberUpdate);
            }
            if ((this.onEndSubscriberUpdateDelegate == null)) {
                this.onEndSubscriberUpdateDelegate = new EndOperationDelegate(this.OnEndSubscriberUpdate);
            }
            if ((this.onSubscriberUpdateCompletedDelegate == null)) {
                this.onSubscriberUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscriberUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginSubscriberUpdateDelegate, new object[] {
                        subscriber}, this.onEndSubscriberUpdateDelegate, this.onSubscriberUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginSubscriberDelete(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscriberDelete(subscriber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Nimble.Portable.Client.Notification.INotification.EndSubscriberDelete(System.IAsyncResult result) {
            return base.Channel.EndSubscriberDelete(result);
        }
        
        private System.IAsyncResult OnBeginSubscriberDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber = ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginSubscriberDelete(subscriber, callback, asyncState);
        }
        
        private object[] OnEndSubscriberDelete(System.IAsyncResult result) {
            bool retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndSubscriberDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscriberDeleteCompleted(object state) {
            if ((this.SubscriberDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscriberDeleteCompleted(this, new SubscriberDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscriberDeleteAsync(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber) {
            this.SubscriberDeleteAsync(subscriber, null);
        }
        
        public void SubscriberDeleteAsync(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, object userState) {
            if ((this.onBeginSubscriberDeleteDelegate == null)) {
                this.onBeginSubscriberDeleteDelegate = new BeginOperationDelegate(this.OnBeginSubscriberDelete);
            }
            if ((this.onEndSubscriberDeleteDelegate == null)) {
                this.onEndSubscriberDeleteDelegate = new EndOperationDelegate(this.OnEndSubscriberDelete);
            }
            if ((this.onSubscriberDeleteCompletedDelegate == null)) {
                this.onSubscriberDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscriberDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginSubscriberDeleteDelegate, new object[] {
                        subscriber}, this.onEndSubscriberDeleteDelegate, this.onSubscriberDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginSubscriberSearch(Nimble.Business.Library.Model.Framework.Notification.SubscriberPredicate subscriberPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscriberSearch(subscriberPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Subscriber> Nimble.Portable.Client.Notification.INotification.EndSubscriberSearch(System.IAsyncResult result) {
            return base.Channel.EndSubscriberSearch(result);
        }
        
        private System.IAsyncResult OnBeginSubscriberSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.SubscriberPredicate subscriberPredicate = ((Nimble.Business.Library.Model.Framework.Notification.SubscriberPredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginSubscriberSearch(subscriberPredicate, callback, asyncState);
        }
        
        private object[] OnEndSubscriberSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Subscriber> retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndSubscriberSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscriberSearchCompleted(object state) {
            if ((this.SubscriberSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscriberSearchCompleted(this, new SubscriberSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscriberSearchAsync(Nimble.Business.Library.Model.Framework.Notification.SubscriberPredicate subscriberPredicate) {
            this.SubscriberSearchAsync(subscriberPredicate, null);
        }
        
        public void SubscriberSearchAsync(Nimble.Business.Library.Model.Framework.Notification.SubscriberPredicate subscriberPredicate, object userState) {
            if ((this.onBeginSubscriberSearchDelegate == null)) {
                this.onBeginSubscriberSearchDelegate = new BeginOperationDelegate(this.OnBeginSubscriberSearch);
            }
            if ((this.onEndSubscriberSearchDelegate == null)) {
                this.onEndSubscriberSearchDelegate = new EndOperationDelegate(this.OnEndSubscriberSearch);
            }
            if ((this.onSubscriberSearchCompletedDelegate == null)) {
                this.onSubscriberSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscriberSearchCompleted);
            }
            base.InvokeAsync(this.onBeginSubscriberSearchDelegate, new object[] {
                        subscriberPredicate}, this.onEndSubscriberSearchDelegate, this.onSubscriberSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginMessageCreate(Nimble.Business.Library.Model.Framework.Notification.Message message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessageCreate(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Message Nimble.Portable.Client.Notification.INotification.EndMessageCreate(System.IAsyncResult result) {
            return base.Channel.EndMessageCreate(result);
        }
        
        private System.IAsyncResult OnBeginMessageCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Message message = ((Nimble.Business.Library.Model.Framework.Notification.Message)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginMessageCreate(message, callback, asyncState);
        }
        
        private object[] OnEndMessageCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Message retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndMessageCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessageCreateCompleted(object state) {
            if ((this.MessageCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MessageCreateCompleted(this, new MessageCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MessageCreateAsync(Nimble.Business.Library.Model.Framework.Notification.Message message) {
            this.MessageCreateAsync(message, null);
        }
        
        public void MessageCreateAsync(Nimble.Business.Library.Model.Framework.Notification.Message message, object userState) {
            if ((this.onBeginMessageCreateDelegate == null)) {
                this.onBeginMessageCreateDelegate = new BeginOperationDelegate(this.OnBeginMessageCreate);
            }
            if ((this.onEndMessageCreateDelegate == null)) {
                this.onEndMessageCreateDelegate = new EndOperationDelegate(this.OnEndMessageCreate);
            }
            if ((this.onMessageCreateCompletedDelegate == null)) {
                this.onMessageCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessageCreateCompleted);
            }
            base.InvokeAsync(this.onBeginMessageCreateDelegate, new object[] {
                        message}, this.onEndMessageCreateDelegate, this.onMessageCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginMessageRead(Nimble.Business.Library.Model.Framework.Notification.Message message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessageRead(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Message Nimble.Portable.Client.Notification.INotification.EndMessageRead(System.IAsyncResult result) {
            return base.Channel.EndMessageRead(result);
        }
        
        private System.IAsyncResult OnBeginMessageRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Message message = ((Nimble.Business.Library.Model.Framework.Notification.Message)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginMessageRead(message, callback, asyncState);
        }
        
        private object[] OnEndMessageRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Message retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndMessageRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessageReadCompleted(object state) {
            if ((this.MessageReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MessageReadCompleted(this, new MessageReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MessageReadAsync(Nimble.Business.Library.Model.Framework.Notification.Message message) {
            this.MessageReadAsync(message, null);
        }
        
        public void MessageReadAsync(Nimble.Business.Library.Model.Framework.Notification.Message message, object userState) {
            if ((this.onBeginMessageReadDelegate == null)) {
                this.onBeginMessageReadDelegate = new BeginOperationDelegate(this.OnBeginMessageRead);
            }
            if ((this.onEndMessageReadDelegate == null)) {
                this.onEndMessageReadDelegate = new EndOperationDelegate(this.OnEndMessageRead);
            }
            if ((this.onMessageReadCompletedDelegate == null)) {
                this.onMessageReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessageReadCompleted);
            }
            base.InvokeAsync(this.onBeginMessageReadDelegate, new object[] {
                        message}, this.onEndMessageReadDelegate, this.onMessageReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginMessageSearch(Nimble.Business.Library.Model.Framework.Notification.MessagePredicate messagePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessageSearch(messagePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Message> Nimble.Portable.Client.Notification.INotification.EndMessageSearch(System.IAsyncResult result) {
            return base.Channel.EndMessageSearch(result);
        }
        
        private System.IAsyncResult OnBeginMessageSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.MessagePredicate messagePredicate = ((Nimble.Business.Library.Model.Framework.Notification.MessagePredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginMessageSearch(messagePredicate, callback, asyncState);
        }
        
        private object[] OnEndMessageSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Message> retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndMessageSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessageSearchCompleted(object state) {
            if ((this.MessageSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MessageSearchCompleted(this, new MessageSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MessageSearchAsync(Nimble.Business.Library.Model.Framework.Notification.MessagePredicate messagePredicate) {
            this.MessageSearchAsync(messagePredicate, null);
        }
        
        public void MessageSearchAsync(Nimble.Business.Library.Model.Framework.Notification.MessagePredicate messagePredicate, object userState) {
            if ((this.onBeginMessageSearchDelegate == null)) {
                this.onBeginMessageSearchDelegate = new BeginOperationDelegate(this.OnBeginMessageSearch);
            }
            if ((this.onEndMessageSearchDelegate == null)) {
                this.onEndMessageSearchDelegate = new EndOperationDelegate(this.OnEndMessageSearch);
            }
            if ((this.onMessageSearchCompletedDelegate == null)) {
                this.onMessageSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessageSearchCompleted);
            }
            base.InvokeAsync(this.onBeginMessageSearchDelegate, new object[] {
                        messagePredicate}, this.onEndMessageSearchDelegate, this.onMessageSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginTraceCreate(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTraceCreate(trace, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Trace Nimble.Portable.Client.Notification.INotification.EndTraceCreate(System.IAsyncResult result) {
            return base.Channel.EndTraceCreate(result);
        }
        
        private System.IAsyncResult OnBeginTraceCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Trace trace = ((Nimble.Business.Library.Model.Framework.Notification.Trace)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginTraceCreate(trace, callback, asyncState);
        }
        
        private object[] OnEndTraceCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Trace retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndTraceCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTraceCreateCompleted(object state) {
            if ((this.TraceCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TraceCreateCompleted(this, new TraceCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TraceCreateAsync(Nimble.Business.Library.Model.Framework.Notification.Trace trace) {
            this.TraceCreateAsync(trace, null);
        }
        
        public void TraceCreateAsync(Nimble.Business.Library.Model.Framework.Notification.Trace trace, object userState) {
            if ((this.onBeginTraceCreateDelegate == null)) {
                this.onBeginTraceCreateDelegate = new BeginOperationDelegate(this.OnBeginTraceCreate);
            }
            if ((this.onEndTraceCreateDelegate == null)) {
                this.onEndTraceCreateDelegate = new EndOperationDelegate(this.OnEndTraceCreate);
            }
            if ((this.onTraceCreateCompletedDelegate == null)) {
                this.onTraceCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTraceCreateCompleted);
            }
            base.InvokeAsync(this.onBeginTraceCreateDelegate, new object[] {
                        trace}, this.onEndTraceCreateDelegate, this.onTraceCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginTraceRead(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTraceRead(trace, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Trace Nimble.Portable.Client.Notification.INotification.EndTraceRead(System.IAsyncResult result) {
            return base.Channel.EndTraceRead(result);
        }
        
        private System.IAsyncResult OnBeginTraceRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Trace trace = ((Nimble.Business.Library.Model.Framework.Notification.Trace)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginTraceRead(trace, callback, asyncState);
        }
        
        private object[] OnEndTraceRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Trace retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndTraceRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTraceReadCompleted(object state) {
            if ((this.TraceReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TraceReadCompleted(this, new TraceReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TraceReadAsync(Nimble.Business.Library.Model.Framework.Notification.Trace trace) {
            this.TraceReadAsync(trace, null);
        }
        
        public void TraceReadAsync(Nimble.Business.Library.Model.Framework.Notification.Trace trace, object userState) {
            if ((this.onBeginTraceReadDelegate == null)) {
                this.onBeginTraceReadDelegate = new BeginOperationDelegate(this.OnBeginTraceRead);
            }
            if ((this.onEndTraceReadDelegate == null)) {
                this.onEndTraceReadDelegate = new EndOperationDelegate(this.OnEndTraceRead);
            }
            if ((this.onTraceReadCompletedDelegate == null)) {
                this.onTraceReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTraceReadCompleted);
            }
            base.InvokeAsync(this.onBeginTraceReadDelegate, new object[] {
                        trace}, this.onEndTraceReadDelegate, this.onTraceReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginTraceUpdate(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTraceUpdate(trace, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Notification.Trace Nimble.Portable.Client.Notification.INotification.EndTraceUpdate(System.IAsyncResult result) {
            return base.Channel.EndTraceUpdate(result);
        }
        
        private System.IAsyncResult OnBeginTraceUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.Trace trace = ((Nimble.Business.Library.Model.Framework.Notification.Trace)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginTraceUpdate(trace, callback, asyncState);
        }
        
        private object[] OnEndTraceUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Notification.Trace retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndTraceUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTraceUpdateCompleted(object state) {
            if ((this.TraceUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TraceUpdateCompleted(this, new TraceUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TraceUpdateAsync(Nimble.Business.Library.Model.Framework.Notification.Trace trace) {
            this.TraceUpdateAsync(trace, null);
        }
        
        public void TraceUpdateAsync(Nimble.Business.Library.Model.Framework.Notification.Trace trace, object userState) {
            if ((this.onBeginTraceUpdateDelegate == null)) {
                this.onBeginTraceUpdateDelegate = new BeginOperationDelegate(this.OnBeginTraceUpdate);
            }
            if ((this.onEndTraceUpdateDelegate == null)) {
                this.onEndTraceUpdateDelegate = new EndOperationDelegate(this.OnEndTraceUpdate);
            }
            if ((this.onTraceUpdateCompletedDelegate == null)) {
                this.onTraceUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTraceUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTraceUpdateDelegate, new object[] {
                        trace}, this.onEndTraceUpdateDelegate, this.onTraceUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Notification.INotification.BeginTraceSearch(Nimble.Business.Library.Model.Framework.Notification.TracePredicate tracePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTraceSearch(tracePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Trace> Nimble.Portable.Client.Notification.INotification.EndTraceSearch(System.IAsyncResult result) {
            return base.Channel.EndTraceSearch(result);
        }
        
        private System.IAsyncResult OnBeginTraceSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Notification.TracePredicate tracePredicate = ((Nimble.Business.Library.Model.Framework.Notification.TracePredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Notification.INotification)(this)).BeginTraceSearch(tracePredicate, callback, asyncState);
        }
        
        private object[] OnEndTraceSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Trace> retVal = ((Nimble.Portable.Client.Notification.INotification)(this)).EndTraceSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTraceSearchCompleted(object state) {
            if ((this.TraceSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TraceSearchCompleted(this, new TraceSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TraceSearchAsync(Nimble.Business.Library.Model.Framework.Notification.TracePredicate tracePredicate) {
            this.TraceSearchAsync(tracePredicate, null);
        }
        
        public void TraceSearchAsync(Nimble.Business.Library.Model.Framework.Notification.TracePredicate tracePredicate, object userState) {
            if ((this.onBeginTraceSearchDelegate == null)) {
                this.onBeginTraceSearchDelegate = new BeginOperationDelegate(this.OnBeginTraceSearch);
            }
            if ((this.onEndTraceSearchDelegate == null)) {
                this.onEndTraceSearchDelegate = new EndOperationDelegate(this.OnEndTraceSearch);
            }
            if ((this.onTraceSearchCompletedDelegate == null)) {
                this.onTraceSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTraceSearchCompleted);
            }
            base.InvokeAsync(this.onBeginTraceSearchDelegate, new object[] {
                        tracePredicate}, this.onEndTraceSearchDelegate, this.onTraceSearchCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Nimble.Portable.Client.Notification.INotification CreateChannel() {
            return new NotificationClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_INotification)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_INotification)) {
                return new System.ServiceModel.EndpointAddress("http://localhost/Nimble.Server.Iis/Framework/Notification.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return NotificationClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_INotification);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return NotificationClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_INotification);
        }
        
        private class NotificationClientChannel : ChannelBase<Nimble.Portable.Client.Notification.INotification>, Nimble.Portable.Client.Notification.INotification {
            
            public NotificationClientChannel(System.ServiceModel.ClientBase<Nimble.Portable.Client.Notification.INotification> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginPublisherCreate(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = publisher;
                System.IAsyncResult _result = base.BeginInvoke("PublisherCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Publisher EndPublisherCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Publisher _result = ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(base.EndInvoke("PublisherCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPublisherRead(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = publisher;
                System.IAsyncResult _result = base.BeginInvoke("PublisherRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Publisher EndPublisherRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Publisher _result = ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(base.EndInvoke("PublisherRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPublisherUpdate(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = publisher;
                System.IAsyncResult _result = base.BeginInvoke("PublisherUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Publisher EndPublisherUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Publisher _result = ((Nimble.Business.Library.Model.Framework.Notification.Publisher)(base.EndInvoke("PublisherUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPublisherDelete(Nimble.Business.Library.Model.Framework.Notification.Publisher publisher, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = publisher;
                System.IAsyncResult _result = base.BeginInvoke("PublisherDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPublisherDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PublisherDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPublisherSearch(Nimble.Business.Library.Model.Framework.Notification.PublisherPredicate publisherPredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = publisherPredicate;
                System.IAsyncResult _result = base.BeginInvoke("PublisherSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Publisher> EndPublisherSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Publisher> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Publisher>)(base.EndInvoke("PublisherSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscriberCreate(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = subscriber;
                System.IAsyncResult _result = base.BeginInvoke("SubscriberCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Subscriber EndSubscriberCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Subscriber _result = ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(base.EndInvoke("SubscriberCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscriberRead(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = subscriber;
                System.IAsyncResult _result = base.BeginInvoke("SubscriberRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Subscriber EndSubscriberRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Subscriber _result = ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(base.EndInvoke("SubscriberRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscriberUpdate(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = subscriber;
                System.IAsyncResult _result = base.BeginInvoke("SubscriberUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Subscriber EndSubscriberUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Subscriber _result = ((Nimble.Business.Library.Model.Framework.Notification.Subscriber)(base.EndInvoke("SubscriberUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscriberDelete(Nimble.Business.Library.Model.Framework.Notification.Subscriber subscriber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = subscriber;
                System.IAsyncResult _result = base.BeginInvoke("SubscriberDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSubscriberDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SubscriberDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscriberSearch(Nimble.Business.Library.Model.Framework.Notification.SubscriberPredicate subscriberPredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = subscriberPredicate;
                System.IAsyncResult _result = base.BeginInvoke("SubscriberSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Subscriber> EndSubscriberSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Subscriber> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Subscriber>)(base.EndInvoke("SubscriberSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMessageCreate(Nimble.Business.Library.Model.Framework.Notification.Message message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = message;
                System.IAsyncResult _result = base.BeginInvoke("MessageCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Message EndMessageCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Message _result = ((Nimble.Business.Library.Model.Framework.Notification.Message)(base.EndInvoke("MessageCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMessageRead(Nimble.Business.Library.Model.Framework.Notification.Message message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = message;
                System.IAsyncResult _result = base.BeginInvoke("MessageRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Message EndMessageRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Message _result = ((Nimble.Business.Library.Model.Framework.Notification.Message)(base.EndInvoke("MessageRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMessageSearch(Nimble.Business.Library.Model.Framework.Notification.MessagePredicate messagePredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = messagePredicate;
                System.IAsyncResult _result = base.BeginInvoke("MessageSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Message> EndMessageSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Message> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Message>)(base.EndInvoke("MessageSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTraceCreate(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trace;
                System.IAsyncResult _result = base.BeginInvoke("TraceCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Trace EndTraceCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Trace _result = ((Nimble.Business.Library.Model.Framework.Notification.Trace)(base.EndInvoke("TraceCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTraceRead(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trace;
                System.IAsyncResult _result = base.BeginInvoke("TraceRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Trace EndTraceRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Trace _result = ((Nimble.Business.Library.Model.Framework.Notification.Trace)(base.EndInvoke("TraceRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTraceUpdate(Nimble.Business.Library.Model.Framework.Notification.Trace trace, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trace;
                System.IAsyncResult _result = base.BeginInvoke("TraceUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Notification.Trace EndTraceUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Notification.Trace _result = ((Nimble.Business.Library.Model.Framework.Notification.Trace)(base.EndInvoke("TraceUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTraceSearch(Nimble.Business.Library.Model.Framework.Notification.TracePredicate tracePredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tracePredicate;
                System.IAsyncResult _result = base.BeginInvoke("TraceSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Trace> EndTraceSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Trace> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Notification.Trace>)(base.EndInvoke("TraceSearch", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_INotification,
        }
    }
}
