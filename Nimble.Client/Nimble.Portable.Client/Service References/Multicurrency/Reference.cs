//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nimble.Portable.Client.Multicurrency {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Multicurrency.IMulticurrency")]
    public interface IMulticurrency {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/CurrencyCreate", ReplyAction="http://tempuri.org/IMulticurrency/CurrencyCreateResponse")]
        System.IAsyncResult BeginCurrencyCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Currency EndCurrencyCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/CurrencyRead", ReplyAction="http://tempuri.org/IMulticurrency/CurrencyReadResponse")]
        System.IAsyncResult BeginCurrencyRead(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Currency EndCurrencyRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/CurrencyUpdate", ReplyAction="http://tempuri.org/IMulticurrency/CurrencyUpdateResponse")]
        System.IAsyncResult BeginCurrencyUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Currency EndCurrencyUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/CurrencyDelete", ReplyAction="http://tempuri.org/IMulticurrency/CurrencyDeleteResponse")]
        System.IAsyncResult BeginCurrencyDelete(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState);
        
        bool EndCurrencyDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/CurrencySearch", ReplyAction="http://tempuri.org/IMulticurrency/CurrencySearchResponse")]
        System.IAsyncResult BeginCurrencySearch(Nimble.Business.Library.Model.Framework.Multicurrency.CurrencyPredicate currencyPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Currency> EndCurrencySearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/TradeCreate", ReplyAction="http://tempuri.org/IMulticurrency/TradeCreateResponse")]
        System.IAsyncResult BeginTradeCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Trade EndTradeCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/TradeRead", ReplyAction="http://tempuri.org/IMulticurrency/TradeReadResponse")]
        System.IAsyncResult BeginTradeRead(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Trade EndTradeRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/TradeUpdate", ReplyAction="http://tempuri.org/IMulticurrency/TradeUpdateResponse")]
        System.IAsyncResult BeginTradeUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Trade EndTradeUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/TradeDelete", ReplyAction="http://tempuri.org/IMulticurrency/TradeDeleteResponse")]
        System.IAsyncResult BeginTradeDelete(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState);
        
        bool EndTradeDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/TradeSearch", ReplyAction="http://tempuri.org/IMulticurrency/TradeSearchResponse")]
        System.IAsyncResult BeginTradeSearch(Nimble.Business.Library.Model.Framework.Multicurrency.TradePredicate tradePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Trade> EndTradeSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/RateCreate", ReplyAction="http://tempuri.org/IMulticurrency/RateCreateResponse")]
        System.IAsyncResult BeginRateCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Rate EndRateCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/RateRead", ReplyAction="http://tempuri.org/IMulticurrency/RateReadResponse")]
        System.IAsyncResult BeginRateRead(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Rate EndRateRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/RateUpdate", ReplyAction="http://tempuri.org/IMulticurrency/RateUpdateResponse")]
        System.IAsyncResult BeginRateUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multicurrency.Rate EndRateUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMulticurrency/RateSearch", ReplyAction="http://tempuri.org/IMulticurrency/RateSearchResponse")]
        System.IAsyncResult BeginRateSearch(Nimble.Business.Library.Model.Framework.Multicurrency.RatePredicate ratePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Rate> EndRateSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMulticurrencyChannel : Nimble.Portable.Client.Multicurrency.IMulticurrency, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrencyCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Currency Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrencyReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Currency Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrencyUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Currency Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrencyDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencySearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrencySearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Currency> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Currency>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TradeCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TradeCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Trade Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TradeReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TradeReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Trade Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TradeUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TradeUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Trade Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TradeDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TradeDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TradeSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TradeSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Trade> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Trade>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RateCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RateCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Rate Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RateReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RateReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Rate Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RateUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RateUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multicurrency.Rate Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RateSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RateSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Rate> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Rate>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MulticurrencyClient : System.ServiceModel.ClientBase<Nimble.Portable.Client.Multicurrency.IMulticurrency>, Nimble.Portable.Client.Multicurrency.IMulticurrency {
        
        private BeginOperationDelegate onBeginCurrencyCreateDelegate;
        
        private EndOperationDelegate onEndCurrencyCreateDelegate;
        
        private System.Threading.SendOrPostCallback onCurrencyCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrencyReadDelegate;
        
        private EndOperationDelegate onEndCurrencyReadDelegate;
        
        private System.Threading.SendOrPostCallback onCurrencyReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrencyUpdateDelegate;
        
        private EndOperationDelegate onEndCurrencyUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onCurrencyUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrencyDeleteDelegate;
        
        private EndOperationDelegate onEndCurrencyDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onCurrencyDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrencySearchDelegate;
        
        private EndOperationDelegate onEndCurrencySearchDelegate;
        
        private System.Threading.SendOrPostCallback onCurrencySearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginTradeCreateDelegate;
        
        private EndOperationDelegate onEndTradeCreateDelegate;
        
        private System.Threading.SendOrPostCallback onTradeCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTradeReadDelegate;
        
        private EndOperationDelegate onEndTradeReadDelegate;
        
        private System.Threading.SendOrPostCallback onTradeReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginTradeUpdateDelegate;
        
        private EndOperationDelegate onEndTradeUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTradeUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTradeDeleteDelegate;
        
        private EndOperationDelegate onEndTradeDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTradeDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTradeSearchDelegate;
        
        private EndOperationDelegate onEndTradeSearchDelegate;
        
        private System.Threading.SendOrPostCallback onTradeSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginRateCreateDelegate;
        
        private EndOperationDelegate onEndRateCreateDelegate;
        
        private System.Threading.SendOrPostCallback onRateCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRateReadDelegate;
        
        private EndOperationDelegate onEndRateReadDelegate;
        
        private System.Threading.SendOrPostCallback onRateReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginRateUpdateDelegate;
        
        private EndOperationDelegate onEndRateUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onRateUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRateSearchDelegate;
        
        private EndOperationDelegate onEndRateSearchDelegate;
        
        private System.Threading.SendOrPostCallback onRateSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MulticurrencyClient() : 
                base(MulticurrencyClient.GetDefaultBinding(), MulticurrencyClient.GetDefaultEndpointAddress()) {
        }
        
        public MulticurrencyClient(EndpointConfiguration endpointConfiguration) : 
                base(MulticurrencyClient.GetBindingForEndpoint(endpointConfiguration), MulticurrencyClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public MulticurrencyClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MulticurrencyClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public MulticurrencyClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MulticurrencyClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public MulticurrencyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CurrencyCreateCompletedEventArgs> CurrencyCreateCompleted;
        
        public event System.EventHandler<CurrencyReadCompletedEventArgs> CurrencyReadCompleted;
        
        public event System.EventHandler<CurrencyUpdateCompletedEventArgs> CurrencyUpdateCompleted;
        
        public event System.EventHandler<CurrencyDeleteCompletedEventArgs> CurrencyDeleteCompleted;
        
        public event System.EventHandler<CurrencySearchCompletedEventArgs> CurrencySearchCompleted;
        
        public event System.EventHandler<TradeCreateCompletedEventArgs> TradeCreateCompleted;
        
        public event System.EventHandler<TradeReadCompletedEventArgs> TradeReadCompleted;
        
        public event System.EventHandler<TradeUpdateCompletedEventArgs> TradeUpdateCompleted;
        
        public event System.EventHandler<TradeDeleteCompletedEventArgs> TradeDeleteCompleted;
        
        public event System.EventHandler<TradeSearchCompletedEventArgs> TradeSearchCompleted;
        
        public event System.EventHandler<RateCreateCompletedEventArgs> RateCreateCompleted;
        
        public event System.EventHandler<RateReadCompletedEventArgs> RateReadCompleted;
        
        public event System.EventHandler<RateUpdateCompletedEventArgs> RateUpdateCompleted;
        
        public event System.EventHandler<RateSearchCompletedEventArgs> RateSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginCurrencyCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrencyCreate(currency, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Currency Nimble.Portable.Client.Multicurrency.IMulticurrency.EndCurrencyCreate(System.IAsyncResult result) {
            return base.Channel.EndCurrencyCreate(result);
        }
        
        private System.IAsyncResult OnBeginCurrencyCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency = ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginCurrencyCreate(currency, callback, asyncState);
        }
        
        private object[] OnEndCurrencyCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Currency retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndCurrencyCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrencyCreateCompleted(object state) {
            if ((this.CurrencyCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrencyCreateCompleted(this, new CurrencyCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrencyCreateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency) {
            this.CurrencyCreateAsync(currency, null);
        }
        
        public void CurrencyCreateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, object userState) {
            if ((this.onBeginCurrencyCreateDelegate == null)) {
                this.onBeginCurrencyCreateDelegate = new BeginOperationDelegate(this.OnBeginCurrencyCreate);
            }
            if ((this.onEndCurrencyCreateDelegate == null)) {
                this.onEndCurrencyCreateDelegate = new EndOperationDelegate(this.OnEndCurrencyCreate);
            }
            if ((this.onCurrencyCreateCompletedDelegate == null)) {
                this.onCurrencyCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrencyCreateCompleted);
            }
            base.InvokeAsync(this.onBeginCurrencyCreateDelegate, new object[] {
                        currency}, this.onEndCurrencyCreateDelegate, this.onCurrencyCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginCurrencyRead(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrencyRead(currency, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Currency Nimble.Portable.Client.Multicurrency.IMulticurrency.EndCurrencyRead(System.IAsyncResult result) {
            return base.Channel.EndCurrencyRead(result);
        }
        
        private System.IAsyncResult OnBeginCurrencyRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency = ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginCurrencyRead(currency, callback, asyncState);
        }
        
        private object[] OnEndCurrencyRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Currency retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndCurrencyRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrencyReadCompleted(object state) {
            if ((this.CurrencyReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrencyReadCompleted(this, new CurrencyReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrencyReadAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency) {
            this.CurrencyReadAsync(currency, null);
        }
        
        public void CurrencyReadAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, object userState) {
            if ((this.onBeginCurrencyReadDelegate == null)) {
                this.onBeginCurrencyReadDelegate = new BeginOperationDelegate(this.OnBeginCurrencyRead);
            }
            if ((this.onEndCurrencyReadDelegate == null)) {
                this.onEndCurrencyReadDelegate = new EndOperationDelegate(this.OnEndCurrencyRead);
            }
            if ((this.onCurrencyReadCompletedDelegate == null)) {
                this.onCurrencyReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrencyReadCompleted);
            }
            base.InvokeAsync(this.onBeginCurrencyReadDelegate, new object[] {
                        currency}, this.onEndCurrencyReadDelegate, this.onCurrencyReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginCurrencyUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrencyUpdate(currency, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Currency Nimble.Portable.Client.Multicurrency.IMulticurrency.EndCurrencyUpdate(System.IAsyncResult result) {
            return base.Channel.EndCurrencyUpdate(result);
        }
        
        private System.IAsyncResult OnBeginCurrencyUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency = ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginCurrencyUpdate(currency, callback, asyncState);
        }
        
        private object[] OnEndCurrencyUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Currency retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndCurrencyUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrencyUpdateCompleted(object state) {
            if ((this.CurrencyUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrencyUpdateCompleted(this, new CurrencyUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrencyUpdateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency) {
            this.CurrencyUpdateAsync(currency, null);
        }
        
        public void CurrencyUpdateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, object userState) {
            if ((this.onBeginCurrencyUpdateDelegate == null)) {
                this.onBeginCurrencyUpdateDelegate = new BeginOperationDelegate(this.OnBeginCurrencyUpdate);
            }
            if ((this.onEndCurrencyUpdateDelegate == null)) {
                this.onEndCurrencyUpdateDelegate = new EndOperationDelegate(this.OnEndCurrencyUpdate);
            }
            if ((this.onCurrencyUpdateCompletedDelegate == null)) {
                this.onCurrencyUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrencyUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginCurrencyUpdateDelegate, new object[] {
                        currency}, this.onEndCurrencyUpdateDelegate, this.onCurrencyUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginCurrencyDelete(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrencyDelete(currency, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Nimble.Portable.Client.Multicurrency.IMulticurrency.EndCurrencyDelete(System.IAsyncResult result) {
            return base.Channel.EndCurrencyDelete(result);
        }
        
        private System.IAsyncResult OnBeginCurrencyDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency = ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginCurrencyDelete(currency, callback, asyncState);
        }
        
        private object[] OnEndCurrencyDelete(System.IAsyncResult result) {
            bool retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndCurrencyDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrencyDeleteCompleted(object state) {
            if ((this.CurrencyDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrencyDeleteCompleted(this, new CurrencyDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrencyDeleteAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency) {
            this.CurrencyDeleteAsync(currency, null);
        }
        
        public void CurrencyDeleteAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, object userState) {
            if ((this.onBeginCurrencyDeleteDelegate == null)) {
                this.onBeginCurrencyDeleteDelegate = new BeginOperationDelegate(this.OnBeginCurrencyDelete);
            }
            if ((this.onEndCurrencyDeleteDelegate == null)) {
                this.onEndCurrencyDeleteDelegate = new EndOperationDelegate(this.OnEndCurrencyDelete);
            }
            if ((this.onCurrencyDeleteCompletedDelegate == null)) {
                this.onCurrencyDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrencyDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginCurrencyDeleteDelegate, new object[] {
                        currency}, this.onEndCurrencyDeleteDelegate, this.onCurrencyDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginCurrencySearch(Nimble.Business.Library.Model.Framework.Multicurrency.CurrencyPredicate currencyPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrencySearch(currencyPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Currency> Nimble.Portable.Client.Multicurrency.IMulticurrency.EndCurrencySearch(System.IAsyncResult result) {
            return base.Channel.EndCurrencySearch(result);
        }
        
        private System.IAsyncResult OnBeginCurrencySearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.CurrencyPredicate currencyPredicate = ((Nimble.Business.Library.Model.Framework.Multicurrency.CurrencyPredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginCurrencySearch(currencyPredicate, callback, asyncState);
        }
        
        private object[] OnEndCurrencySearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Currency> retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndCurrencySearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrencySearchCompleted(object state) {
            if ((this.CurrencySearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrencySearchCompleted(this, new CurrencySearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrencySearchAsync(Nimble.Business.Library.Model.Framework.Multicurrency.CurrencyPredicate currencyPredicate) {
            this.CurrencySearchAsync(currencyPredicate, null);
        }
        
        public void CurrencySearchAsync(Nimble.Business.Library.Model.Framework.Multicurrency.CurrencyPredicate currencyPredicate, object userState) {
            if ((this.onBeginCurrencySearchDelegate == null)) {
                this.onBeginCurrencySearchDelegate = new BeginOperationDelegate(this.OnBeginCurrencySearch);
            }
            if ((this.onEndCurrencySearchDelegate == null)) {
                this.onEndCurrencySearchDelegate = new EndOperationDelegate(this.OnEndCurrencySearch);
            }
            if ((this.onCurrencySearchCompletedDelegate == null)) {
                this.onCurrencySearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrencySearchCompleted);
            }
            base.InvokeAsync(this.onBeginCurrencySearchDelegate, new object[] {
                        currencyPredicate}, this.onEndCurrencySearchDelegate, this.onCurrencySearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginTradeCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTradeCreate(trade, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Trade Nimble.Portable.Client.Multicurrency.IMulticurrency.EndTradeCreate(System.IAsyncResult result) {
            return base.Channel.EndTradeCreate(result);
        }
        
        private System.IAsyncResult OnBeginTradeCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade = ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginTradeCreate(trade, callback, asyncState);
        }
        
        private object[] OnEndTradeCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Trade retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndTradeCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTradeCreateCompleted(object state) {
            if ((this.TradeCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TradeCreateCompleted(this, new TradeCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TradeCreateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade) {
            this.TradeCreateAsync(trade, null);
        }
        
        public void TradeCreateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, object userState) {
            if ((this.onBeginTradeCreateDelegate == null)) {
                this.onBeginTradeCreateDelegate = new BeginOperationDelegate(this.OnBeginTradeCreate);
            }
            if ((this.onEndTradeCreateDelegate == null)) {
                this.onEndTradeCreateDelegate = new EndOperationDelegate(this.OnEndTradeCreate);
            }
            if ((this.onTradeCreateCompletedDelegate == null)) {
                this.onTradeCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTradeCreateCompleted);
            }
            base.InvokeAsync(this.onBeginTradeCreateDelegate, new object[] {
                        trade}, this.onEndTradeCreateDelegate, this.onTradeCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginTradeRead(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTradeRead(trade, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Trade Nimble.Portable.Client.Multicurrency.IMulticurrency.EndTradeRead(System.IAsyncResult result) {
            return base.Channel.EndTradeRead(result);
        }
        
        private System.IAsyncResult OnBeginTradeRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade = ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginTradeRead(trade, callback, asyncState);
        }
        
        private object[] OnEndTradeRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Trade retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndTradeRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTradeReadCompleted(object state) {
            if ((this.TradeReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TradeReadCompleted(this, new TradeReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TradeReadAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade) {
            this.TradeReadAsync(trade, null);
        }
        
        public void TradeReadAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, object userState) {
            if ((this.onBeginTradeReadDelegate == null)) {
                this.onBeginTradeReadDelegate = new BeginOperationDelegate(this.OnBeginTradeRead);
            }
            if ((this.onEndTradeReadDelegate == null)) {
                this.onEndTradeReadDelegate = new EndOperationDelegate(this.OnEndTradeRead);
            }
            if ((this.onTradeReadCompletedDelegate == null)) {
                this.onTradeReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTradeReadCompleted);
            }
            base.InvokeAsync(this.onBeginTradeReadDelegate, new object[] {
                        trade}, this.onEndTradeReadDelegate, this.onTradeReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginTradeUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTradeUpdate(trade, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Trade Nimble.Portable.Client.Multicurrency.IMulticurrency.EndTradeUpdate(System.IAsyncResult result) {
            return base.Channel.EndTradeUpdate(result);
        }
        
        private System.IAsyncResult OnBeginTradeUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade = ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginTradeUpdate(trade, callback, asyncState);
        }
        
        private object[] OnEndTradeUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Trade retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndTradeUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTradeUpdateCompleted(object state) {
            if ((this.TradeUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TradeUpdateCompleted(this, new TradeUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TradeUpdateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade) {
            this.TradeUpdateAsync(trade, null);
        }
        
        public void TradeUpdateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, object userState) {
            if ((this.onBeginTradeUpdateDelegate == null)) {
                this.onBeginTradeUpdateDelegate = new BeginOperationDelegate(this.OnBeginTradeUpdate);
            }
            if ((this.onEndTradeUpdateDelegate == null)) {
                this.onEndTradeUpdateDelegate = new EndOperationDelegate(this.OnEndTradeUpdate);
            }
            if ((this.onTradeUpdateCompletedDelegate == null)) {
                this.onTradeUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTradeUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTradeUpdateDelegate, new object[] {
                        trade}, this.onEndTradeUpdateDelegate, this.onTradeUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginTradeDelete(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTradeDelete(trade, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Nimble.Portable.Client.Multicurrency.IMulticurrency.EndTradeDelete(System.IAsyncResult result) {
            return base.Channel.EndTradeDelete(result);
        }
        
        private System.IAsyncResult OnBeginTradeDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade = ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginTradeDelete(trade, callback, asyncState);
        }
        
        private object[] OnEndTradeDelete(System.IAsyncResult result) {
            bool retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndTradeDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTradeDeleteCompleted(object state) {
            if ((this.TradeDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TradeDeleteCompleted(this, new TradeDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TradeDeleteAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade) {
            this.TradeDeleteAsync(trade, null);
        }
        
        public void TradeDeleteAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, object userState) {
            if ((this.onBeginTradeDeleteDelegate == null)) {
                this.onBeginTradeDeleteDelegate = new BeginOperationDelegate(this.OnBeginTradeDelete);
            }
            if ((this.onEndTradeDeleteDelegate == null)) {
                this.onEndTradeDeleteDelegate = new EndOperationDelegate(this.OnEndTradeDelete);
            }
            if ((this.onTradeDeleteCompletedDelegate == null)) {
                this.onTradeDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTradeDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTradeDeleteDelegate, new object[] {
                        trade}, this.onEndTradeDeleteDelegate, this.onTradeDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginTradeSearch(Nimble.Business.Library.Model.Framework.Multicurrency.TradePredicate tradePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTradeSearch(tradePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Trade> Nimble.Portable.Client.Multicurrency.IMulticurrency.EndTradeSearch(System.IAsyncResult result) {
            return base.Channel.EndTradeSearch(result);
        }
        
        private System.IAsyncResult OnBeginTradeSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.TradePredicate tradePredicate = ((Nimble.Business.Library.Model.Framework.Multicurrency.TradePredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginTradeSearch(tradePredicate, callback, asyncState);
        }
        
        private object[] OnEndTradeSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Trade> retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndTradeSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTradeSearchCompleted(object state) {
            if ((this.TradeSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TradeSearchCompleted(this, new TradeSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TradeSearchAsync(Nimble.Business.Library.Model.Framework.Multicurrency.TradePredicate tradePredicate) {
            this.TradeSearchAsync(tradePredicate, null);
        }
        
        public void TradeSearchAsync(Nimble.Business.Library.Model.Framework.Multicurrency.TradePredicate tradePredicate, object userState) {
            if ((this.onBeginTradeSearchDelegate == null)) {
                this.onBeginTradeSearchDelegate = new BeginOperationDelegate(this.OnBeginTradeSearch);
            }
            if ((this.onEndTradeSearchDelegate == null)) {
                this.onEndTradeSearchDelegate = new EndOperationDelegate(this.OnEndTradeSearch);
            }
            if ((this.onTradeSearchCompletedDelegate == null)) {
                this.onTradeSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTradeSearchCompleted);
            }
            base.InvokeAsync(this.onBeginTradeSearchDelegate, new object[] {
                        tradePredicate}, this.onEndTradeSearchDelegate, this.onTradeSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginRateCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRateCreate(rate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Rate Nimble.Portable.Client.Multicurrency.IMulticurrency.EndRateCreate(System.IAsyncResult result) {
            return base.Channel.EndRateCreate(result);
        }
        
        private System.IAsyncResult OnBeginRateCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate = ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginRateCreate(rate, callback, asyncState);
        }
        
        private object[] OnEndRateCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Rate retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndRateCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRateCreateCompleted(object state) {
            if ((this.RateCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RateCreateCompleted(this, new RateCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RateCreateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate) {
            this.RateCreateAsync(rate, null);
        }
        
        public void RateCreateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, object userState) {
            if ((this.onBeginRateCreateDelegate == null)) {
                this.onBeginRateCreateDelegate = new BeginOperationDelegate(this.OnBeginRateCreate);
            }
            if ((this.onEndRateCreateDelegate == null)) {
                this.onEndRateCreateDelegate = new EndOperationDelegate(this.OnEndRateCreate);
            }
            if ((this.onRateCreateCompletedDelegate == null)) {
                this.onRateCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRateCreateCompleted);
            }
            base.InvokeAsync(this.onBeginRateCreateDelegate, new object[] {
                        rate}, this.onEndRateCreateDelegate, this.onRateCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginRateRead(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRateRead(rate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Rate Nimble.Portable.Client.Multicurrency.IMulticurrency.EndRateRead(System.IAsyncResult result) {
            return base.Channel.EndRateRead(result);
        }
        
        private System.IAsyncResult OnBeginRateRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate = ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginRateRead(rate, callback, asyncState);
        }
        
        private object[] OnEndRateRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Rate retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndRateRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRateReadCompleted(object state) {
            if ((this.RateReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RateReadCompleted(this, new RateReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RateReadAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate) {
            this.RateReadAsync(rate, null);
        }
        
        public void RateReadAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, object userState) {
            if ((this.onBeginRateReadDelegate == null)) {
                this.onBeginRateReadDelegate = new BeginOperationDelegate(this.OnBeginRateRead);
            }
            if ((this.onEndRateReadDelegate == null)) {
                this.onEndRateReadDelegate = new EndOperationDelegate(this.OnEndRateRead);
            }
            if ((this.onRateReadCompletedDelegate == null)) {
                this.onRateReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRateReadCompleted);
            }
            base.InvokeAsync(this.onBeginRateReadDelegate, new object[] {
                        rate}, this.onEndRateReadDelegate, this.onRateReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginRateUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRateUpdate(rate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.Model.Framework.Multicurrency.Rate Nimble.Portable.Client.Multicurrency.IMulticurrency.EndRateUpdate(System.IAsyncResult result) {
            return base.Channel.EndRateUpdate(result);
        }
        
        private System.IAsyncResult OnBeginRateUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate = ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginRateUpdate(rate, callback, asyncState);
        }
        
        private object[] OnEndRateUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multicurrency.Rate retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndRateUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRateUpdateCompleted(object state) {
            if ((this.RateUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RateUpdateCompleted(this, new RateUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RateUpdateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate) {
            this.RateUpdateAsync(rate, null);
        }
        
        public void RateUpdateAsync(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, object userState) {
            if ((this.onBeginRateUpdateDelegate == null)) {
                this.onBeginRateUpdateDelegate = new BeginOperationDelegate(this.OnBeginRateUpdate);
            }
            if ((this.onEndRateUpdateDelegate == null)) {
                this.onEndRateUpdateDelegate = new EndOperationDelegate(this.OnEndRateUpdate);
            }
            if ((this.onRateUpdateCompletedDelegate == null)) {
                this.onRateUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRateUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginRateUpdateDelegate, new object[] {
                        rate}, this.onEndRateUpdateDelegate, this.onRateUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Nimble.Portable.Client.Multicurrency.IMulticurrency.BeginRateSearch(Nimble.Business.Library.Model.Framework.Multicurrency.RatePredicate ratePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRateSearch(ratePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Rate> Nimble.Portable.Client.Multicurrency.IMulticurrency.EndRateSearch(System.IAsyncResult result) {
            return base.Channel.EndRateSearch(result);
        }
        
        private System.IAsyncResult OnBeginRateSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multicurrency.RatePredicate ratePredicate = ((Nimble.Business.Library.Model.Framework.Multicurrency.RatePredicate)(inValues[0]));
            return ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).BeginRateSearch(ratePredicate, callback, asyncState);
        }
        
        private object[] OnEndRateSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Rate> retVal = ((Nimble.Portable.Client.Multicurrency.IMulticurrency)(this)).EndRateSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRateSearchCompleted(object state) {
            if ((this.RateSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RateSearchCompleted(this, new RateSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RateSearchAsync(Nimble.Business.Library.Model.Framework.Multicurrency.RatePredicate ratePredicate) {
            this.RateSearchAsync(ratePredicate, null);
        }
        
        public void RateSearchAsync(Nimble.Business.Library.Model.Framework.Multicurrency.RatePredicate ratePredicate, object userState) {
            if ((this.onBeginRateSearchDelegate == null)) {
                this.onBeginRateSearchDelegate = new BeginOperationDelegate(this.OnBeginRateSearch);
            }
            if ((this.onEndRateSearchDelegate == null)) {
                this.onEndRateSearchDelegate = new EndOperationDelegate(this.OnEndRateSearch);
            }
            if ((this.onRateSearchCompletedDelegate == null)) {
                this.onRateSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRateSearchCompleted);
            }
            base.InvokeAsync(this.onBeginRateSearchDelegate, new object[] {
                        ratePredicate}, this.onEndRateSearchDelegate, this.onRateSearchCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Nimble.Portable.Client.Multicurrency.IMulticurrency CreateChannel() {
            return new MulticurrencyClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMulticurrency)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMulticurrency)) {
                return new System.ServiceModel.EndpointAddress("http://localhost/Nimble.Server.Iis/Framework/Multicurrency.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MulticurrencyClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMulticurrency);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MulticurrencyClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMulticurrency);
        }
        
        private class MulticurrencyClientChannel : ChannelBase<Nimble.Portable.Client.Multicurrency.IMulticurrency>, Nimble.Portable.Client.Multicurrency.IMulticurrency {
            
            public MulticurrencyClientChannel(System.ServiceModel.ClientBase<Nimble.Portable.Client.Multicurrency.IMulticurrency> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCurrencyCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = currency;
                System.IAsyncResult _result = base.BeginInvoke("CurrencyCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Currency EndCurrencyCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Currency _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(base.EndInvoke("CurrencyCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrencyRead(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = currency;
                System.IAsyncResult _result = base.BeginInvoke("CurrencyRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Currency EndCurrencyRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Currency _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(base.EndInvoke("CurrencyRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrencyUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = currency;
                System.IAsyncResult _result = base.BeginInvoke("CurrencyUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Currency EndCurrencyUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Currency _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Currency)(base.EndInvoke("CurrencyUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrencyDelete(Nimble.Business.Library.Model.Framework.Multicurrency.Currency currency, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = currency;
                System.IAsyncResult _result = base.BeginInvoke("CurrencyDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCurrencyDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CurrencyDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrencySearch(Nimble.Business.Library.Model.Framework.Multicurrency.CurrencyPredicate currencyPredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = currencyPredicate;
                System.IAsyncResult _result = base.BeginInvoke("CurrencySearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Currency> EndCurrencySearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Currency> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Currency>)(base.EndInvoke("CurrencySearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTradeCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trade;
                System.IAsyncResult _result = base.BeginInvoke("TradeCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Trade EndTradeCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Trade _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(base.EndInvoke("TradeCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTradeRead(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trade;
                System.IAsyncResult _result = base.BeginInvoke("TradeRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Trade EndTradeRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Trade _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(base.EndInvoke("TradeRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTradeUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trade;
                System.IAsyncResult _result = base.BeginInvoke("TradeUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Trade EndTradeUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Trade _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Trade)(base.EndInvoke("TradeUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTradeDelete(Nimble.Business.Library.Model.Framework.Multicurrency.Trade trade, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trade;
                System.IAsyncResult _result = base.BeginInvoke("TradeDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndTradeDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("TradeDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTradeSearch(Nimble.Business.Library.Model.Framework.Multicurrency.TradePredicate tradePredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tradePredicate;
                System.IAsyncResult _result = base.BeginInvoke("TradeSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Trade> EndTradeSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Trade> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Trade>)(base.EndInvoke("TradeSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRateCreate(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = rate;
                System.IAsyncResult _result = base.BeginInvoke("RateCreate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Rate EndRateCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Rate _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(base.EndInvoke("RateCreate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRateRead(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = rate;
                System.IAsyncResult _result = base.BeginInvoke("RateRead", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Rate EndRateRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Rate _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(base.EndInvoke("RateRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRateUpdate(Nimble.Business.Library.Model.Framework.Multicurrency.Rate rate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = rate;
                System.IAsyncResult _result = base.BeginInvoke("RateUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.Model.Framework.Multicurrency.Rate EndRateUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.Model.Framework.Multicurrency.Rate _result = ((Nimble.Business.Library.Model.Framework.Multicurrency.Rate)(base.EndInvoke("RateUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRateSearch(Nimble.Business.Library.Model.Framework.Multicurrency.RatePredicate ratePredicate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ratePredicate;
                System.IAsyncResult _result = base.BeginInvoke("RateSearch", _args, callback, asyncState);
                return _result;
            }
            
            public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Rate> EndRateSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Rate> _result = ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Multicurrency.Rate>)(base.EndInvoke("RateSearch", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMulticurrency,
        }
    }
}
