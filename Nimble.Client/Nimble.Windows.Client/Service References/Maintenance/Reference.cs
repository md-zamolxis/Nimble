//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nimble.Windows.Client.Maintenance {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Maintenance.IMaintenance")]
    public interface IMaintenance {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/DatabaseSize", ReplyAction="http://tempuri.org/IMaintenance/DatabaseSizeResponse")]
        System.Nullable<int> DatabaseSize();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/DatabaseSize", ReplyAction="http://tempuri.org/IMaintenance/DatabaseSizeResponse")]
        System.IAsyncResult BeginDatabaseSize(System.AsyncCallback callback, object asyncState);
        
        System.Nullable<int> EndDatabaseSize(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/BackupCreate", ReplyAction="http://tempuri.org/IMaintenance/BackupCreateResponse")]
        Nimble.Business.Library.Model.Framework.Maintenance.Backup BackupCreate(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/BackupCreate", ReplyAction="http://tempuri.org/IMaintenance/BackupCreateResponse")]
        System.IAsyncResult BeginBackupCreate(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Maintenance.Backup EndBackupCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/BackupRead", ReplyAction="http://tempuri.org/IMaintenance/BackupReadResponse")]
        Nimble.Business.Library.Model.Framework.Maintenance.Backup BackupRead(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/BackupRead", ReplyAction="http://tempuri.org/IMaintenance/BackupReadResponse")]
        System.IAsyncResult BeginBackupRead(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Maintenance.Backup EndBackupRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/BackupDelete", ReplyAction="http://tempuri.org/IMaintenance/BackupDeleteResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> BackupDelete(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/BackupDelete", ReplyAction="http://tempuri.org/IMaintenance/BackupDeleteResponse")]
        System.IAsyncResult BeginBackupDelete(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> EndBackupDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/BackupSearch", ReplyAction="http://tempuri.org/IMaintenance/BackupSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> BackupSearch(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/BackupSearch", ReplyAction="http://tempuri.org/IMaintenance/BackupSearchResponse")]
        System.IAsyncResult BeginBackupSearch(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> EndBackupSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/BatchCreate", ReplyAction="http://tempuri.org/IMaintenance/BatchCreateResponse")]
        Nimble.Business.Library.Model.Framework.Maintenance.Batch BatchCreate(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/BatchCreate", ReplyAction="http://tempuri.org/IMaintenance/BatchCreateResponse")]
        System.IAsyncResult BeginBatchCreate(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Maintenance.Batch EndBatchCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/BatchRead", ReplyAction="http://tempuri.org/IMaintenance/BatchReadResponse")]
        Nimble.Business.Library.Model.Framework.Maintenance.Batch BatchRead(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/BatchRead", ReplyAction="http://tempuri.org/IMaintenance/BatchReadResponse")]
        System.IAsyncResult BeginBatchRead(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Maintenance.Batch EndBatchRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/BatchDelete", ReplyAction="http://tempuri.org/IMaintenance/BatchDeleteResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> BatchDelete(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/BatchDelete", ReplyAction="http://tempuri.org/IMaintenance/BatchDeleteResponse")]
        System.IAsyncResult BeginBatchDelete(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> EndBatchDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/BatchSearch", ReplyAction="http://tempuri.org/IMaintenance/BatchSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> BatchSearch(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/BatchSearch", ReplyAction="http://tempuri.org/IMaintenance/BatchSearchResponse")]
        System.IAsyncResult BeginBatchSearch(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> EndBatchSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaintenance/OperationSearch", ReplyAction="http://tempuri.org/IMaintenance/OperationSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Operation> OperationSearch(Nimble.Business.Library.Model.Framework.Maintenance.OperationPredicate operationPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMaintenance/OperationSearch", ReplyAction="http://tempuri.org/IMaintenance/OperationSearchResponse")]
        System.IAsyncResult BeginOperationSearch(Nimble.Business.Library.Model.Framework.Maintenance.OperationPredicate operationPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Operation> EndOperationSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaintenanceChannel : Nimble.Windows.Client.Maintenance.IMaintenance, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DatabaseSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackupCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BackupCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Maintenance.Backup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Maintenance.Backup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackupReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BackupReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Maintenance.Backup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Maintenance.Backup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackupDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BackupDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackupSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BackupSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BatchCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Maintenance.Batch Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Maintenance.Batch)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BatchReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Maintenance.Batch Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Maintenance.Batch)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BatchDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BatchSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OperationSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OperationSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Operation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Operation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaintenanceClient : System.ServiceModel.ClientBase<Nimble.Windows.Client.Maintenance.IMaintenance>, Nimble.Windows.Client.Maintenance.IMaintenance {
        
        private BeginOperationDelegate onBeginDatabaseSizeDelegate;
        
        private EndOperationDelegate onEndDatabaseSizeDelegate;
        
        private System.Threading.SendOrPostCallback onDatabaseSizeCompletedDelegate;
        
        private BeginOperationDelegate onBeginBackupCreateDelegate;
        
        private EndOperationDelegate onEndBackupCreateDelegate;
        
        private System.Threading.SendOrPostCallback onBackupCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBackupReadDelegate;
        
        private EndOperationDelegate onEndBackupReadDelegate;
        
        private System.Threading.SendOrPostCallback onBackupReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginBackupDeleteDelegate;
        
        private EndOperationDelegate onEndBackupDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onBackupDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginBackupSearchDelegate;
        
        private EndOperationDelegate onEndBackupSearchDelegate;
        
        private System.Threading.SendOrPostCallback onBackupSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginBatchCreateDelegate;
        
        private EndOperationDelegate onEndBatchCreateDelegate;
        
        private System.Threading.SendOrPostCallback onBatchCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBatchReadDelegate;
        
        private EndOperationDelegate onEndBatchReadDelegate;
        
        private System.Threading.SendOrPostCallback onBatchReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginBatchDeleteDelegate;
        
        private EndOperationDelegate onEndBatchDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onBatchDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginBatchSearchDelegate;
        
        private EndOperationDelegate onEndBatchSearchDelegate;
        
        private System.Threading.SendOrPostCallback onBatchSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOperationSearchDelegate;
        
        private EndOperationDelegate onEndOperationSearchDelegate;
        
        private System.Threading.SendOrPostCallback onOperationSearchCompletedDelegate;
        
        public MaintenanceClient() {
        }
        
        public MaintenanceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaintenanceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaintenanceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaintenanceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<DatabaseSizeCompletedEventArgs> DatabaseSizeCompleted;
        
        public event System.EventHandler<BackupCreateCompletedEventArgs> BackupCreateCompleted;
        
        public event System.EventHandler<BackupReadCompletedEventArgs> BackupReadCompleted;
        
        public event System.EventHandler<BackupDeleteCompletedEventArgs> BackupDeleteCompleted;
        
        public event System.EventHandler<BackupSearchCompletedEventArgs> BackupSearchCompleted;
        
        public event System.EventHandler<BatchCreateCompletedEventArgs> BatchCreateCompleted;
        
        public event System.EventHandler<BatchReadCompletedEventArgs> BatchReadCompleted;
        
        public event System.EventHandler<BatchDeleteCompletedEventArgs> BatchDeleteCompleted;
        
        public event System.EventHandler<BatchSearchCompletedEventArgs> BatchSearchCompleted;
        
        public event System.EventHandler<OperationSearchCompletedEventArgs> OperationSearchCompleted;
        
        public System.Nullable<int> DatabaseSize() {
            return base.Channel.DatabaseSize();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDatabaseSize(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDatabaseSize(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Nullable<int> EndDatabaseSize(System.IAsyncResult result) {
            return base.Channel.EndDatabaseSize(result);
        }
        
        private System.IAsyncResult OnBeginDatabaseSize(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDatabaseSize(callback, asyncState);
        }
        
        private object[] OnEndDatabaseSize(System.IAsyncResult result) {
            System.Nullable<int> retVal = this.EndDatabaseSize(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDatabaseSizeCompleted(object state) {
            if ((this.DatabaseSizeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DatabaseSizeCompleted(this, new DatabaseSizeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DatabaseSizeAsync() {
            this.DatabaseSizeAsync(null);
        }
        
        public void DatabaseSizeAsync(object userState) {
            if ((this.onBeginDatabaseSizeDelegate == null)) {
                this.onBeginDatabaseSizeDelegate = new BeginOperationDelegate(this.OnBeginDatabaseSize);
            }
            if ((this.onEndDatabaseSizeDelegate == null)) {
                this.onEndDatabaseSizeDelegate = new EndOperationDelegate(this.OnEndDatabaseSize);
            }
            if ((this.onDatabaseSizeCompletedDelegate == null)) {
                this.onDatabaseSizeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDatabaseSizeCompleted);
            }
            base.InvokeAsync(this.onBeginDatabaseSizeDelegate, null, this.onEndDatabaseSizeDelegate, this.onDatabaseSizeCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Maintenance.Backup BackupCreate(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup) {
            return base.Channel.BackupCreate(backup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBackupCreate(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBackupCreate(backup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Maintenance.Backup EndBackupCreate(System.IAsyncResult result) {
            return base.Channel.EndBackupCreate(result);
        }
        
        private System.IAsyncResult OnBeginBackupCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.Backup backup = ((Nimble.Business.Library.Model.Framework.Maintenance.Backup)(inValues[0]));
            return this.BeginBackupCreate(backup, callback, asyncState);
        }
        
        private object[] OnEndBackupCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Maintenance.Backup retVal = this.EndBackupCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBackupCreateCompleted(object state) {
            if ((this.BackupCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BackupCreateCompleted(this, new BackupCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BackupCreateAsync(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup) {
            this.BackupCreateAsync(backup, null);
        }
        
        public void BackupCreateAsync(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup, object userState) {
            if ((this.onBeginBackupCreateDelegate == null)) {
                this.onBeginBackupCreateDelegate = new BeginOperationDelegate(this.OnBeginBackupCreate);
            }
            if ((this.onEndBackupCreateDelegate == null)) {
                this.onEndBackupCreateDelegate = new EndOperationDelegate(this.OnEndBackupCreate);
            }
            if ((this.onBackupCreateCompletedDelegate == null)) {
                this.onBackupCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBackupCreateCompleted);
            }
            base.InvokeAsync(this.onBeginBackupCreateDelegate, new object[] {
                        backup}, this.onEndBackupCreateDelegate, this.onBackupCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Maintenance.Backup BackupRead(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup) {
            return base.Channel.BackupRead(backup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBackupRead(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBackupRead(backup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Maintenance.Backup EndBackupRead(System.IAsyncResult result) {
            return base.Channel.EndBackupRead(result);
        }
        
        private System.IAsyncResult OnBeginBackupRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.Backup backup = ((Nimble.Business.Library.Model.Framework.Maintenance.Backup)(inValues[0]));
            return this.BeginBackupRead(backup, callback, asyncState);
        }
        
        private object[] OnEndBackupRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Maintenance.Backup retVal = this.EndBackupRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBackupReadCompleted(object state) {
            if ((this.BackupReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BackupReadCompleted(this, new BackupReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BackupReadAsync(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup) {
            this.BackupReadAsync(backup, null);
        }
        
        public void BackupReadAsync(Nimble.Business.Library.Model.Framework.Maintenance.Backup backup, object userState) {
            if ((this.onBeginBackupReadDelegate == null)) {
                this.onBeginBackupReadDelegate = new BeginOperationDelegate(this.OnBeginBackupRead);
            }
            if ((this.onEndBackupReadDelegate == null)) {
                this.onEndBackupReadDelegate = new EndOperationDelegate(this.OnEndBackupRead);
            }
            if ((this.onBackupReadCompletedDelegate == null)) {
                this.onBackupReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBackupReadCompleted);
            }
            base.InvokeAsync(this.onBeginBackupReadDelegate, new object[] {
                        backup}, this.onEndBackupReadDelegate, this.onBackupReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> BackupDelete(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate) {
            return base.Channel.BackupDelete(backupPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBackupDelete(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBackupDelete(backupPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> EndBackupDelete(System.IAsyncResult result) {
            return base.Channel.EndBackupDelete(result);
        }
        
        private System.IAsyncResult OnBeginBackupDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate = ((Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate)(inValues[0]));
            return this.BeginBackupDelete(backupPredicate, callback, asyncState);
        }
        
        private object[] OnEndBackupDelete(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> retVal = this.EndBackupDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBackupDeleteCompleted(object state) {
            if ((this.BackupDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BackupDeleteCompleted(this, new BackupDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BackupDeleteAsync(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate) {
            this.BackupDeleteAsync(backupPredicate, null);
        }
        
        public void BackupDeleteAsync(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate, object userState) {
            if ((this.onBeginBackupDeleteDelegate == null)) {
                this.onBeginBackupDeleteDelegate = new BeginOperationDelegate(this.OnBeginBackupDelete);
            }
            if ((this.onEndBackupDeleteDelegate == null)) {
                this.onEndBackupDeleteDelegate = new EndOperationDelegate(this.OnEndBackupDelete);
            }
            if ((this.onBackupDeleteCompletedDelegate == null)) {
                this.onBackupDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBackupDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginBackupDeleteDelegate, new object[] {
                        backupPredicate}, this.onEndBackupDeleteDelegate, this.onBackupDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> BackupSearch(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate) {
            return base.Channel.BackupSearch(backupPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBackupSearch(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBackupSearch(backupPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> EndBackupSearch(System.IAsyncResult result) {
            return base.Channel.EndBackupSearch(result);
        }
        
        private System.IAsyncResult OnBeginBackupSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate = ((Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate)(inValues[0]));
            return this.BeginBackupSearch(backupPredicate, callback, asyncState);
        }
        
        private object[] OnEndBackupSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Backup> retVal = this.EndBackupSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBackupSearchCompleted(object state) {
            if ((this.BackupSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BackupSearchCompleted(this, new BackupSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BackupSearchAsync(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate) {
            this.BackupSearchAsync(backupPredicate, null);
        }
        
        public void BackupSearchAsync(Nimble.Business.Library.Model.Framework.Maintenance.BackupPredicate backupPredicate, object userState) {
            if ((this.onBeginBackupSearchDelegate == null)) {
                this.onBeginBackupSearchDelegate = new BeginOperationDelegate(this.OnBeginBackupSearch);
            }
            if ((this.onEndBackupSearchDelegate == null)) {
                this.onEndBackupSearchDelegate = new EndOperationDelegate(this.OnEndBackupSearch);
            }
            if ((this.onBackupSearchCompletedDelegate == null)) {
                this.onBackupSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBackupSearchCompleted);
            }
            base.InvokeAsync(this.onBeginBackupSearchDelegate, new object[] {
                        backupPredicate}, this.onEndBackupSearchDelegate, this.onBackupSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Maintenance.Batch BatchCreate(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch) {
            return base.Channel.BatchCreate(batch);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBatchCreate(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBatchCreate(batch, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Maintenance.Batch EndBatchCreate(System.IAsyncResult result) {
            return base.Channel.EndBatchCreate(result);
        }
        
        private System.IAsyncResult OnBeginBatchCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.Batch batch = ((Nimble.Business.Library.Model.Framework.Maintenance.Batch)(inValues[0]));
            return this.BeginBatchCreate(batch, callback, asyncState);
        }
        
        private object[] OnEndBatchCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Maintenance.Batch retVal = this.EndBatchCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBatchCreateCompleted(object state) {
            if ((this.BatchCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BatchCreateCompleted(this, new BatchCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BatchCreateAsync(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch) {
            this.BatchCreateAsync(batch, null);
        }
        
        public void BatchCreateAsync(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch, object userState) {
            if ((this.onBeginBatchCreateDelegate == null)) {
                this.onBeginBatchCreateDelegate = new BeginOperationDelegate(this.OnBeginBatchCreate);
            }
            if ((this.onEndBatchCreateDelegate == null)) {
                this.onEndBatchCreateDelegate = new EndOperationDelegate(this.OnEndBatchCreate);
            }
            if ((this.onBatchCreateCompletedDelegate == null)) {
                this.onBatchCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBatchCreateCompleted);
            }
            base.InvokeAsync(this.onBeginBatchCreateDelegate, new object[] {
                        batch}, this.onEndBatchCreateDelegate, this.onBatchCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Maintenance.Batch BatchRead(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch) {
            return base.Channel.BatchRead(batch);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBatchRead(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBatchRead(batch, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Maintenance.Batch EndBatchRead(System.IAsyncResult result) {
            return base.Channel.EndBatchRead(result);
        }
        
        private System.IAsyncResult OnBeginBatchRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.Batch batch = ((Nimble.Business.Library.Model.Framework.Maintenance.Batch)(inValues[0]));
            return this.BeginBatchRead(batch, callback, asyncState);
        }
        
        private object[] OnEndBatchRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Maintenance.Batch retVal = this.EndBatchRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBatchReadCompleted(object state) {
            if ((this.BatchReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BatchReadCompleted(this, new BatchReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BatchReadAsync(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch) {
            this.BatchReadAsync(batch, null);
        }
        
        public void BatchReadAsync(Nimble.Business.Library.Model.Framework.Maintenance.Batch batch, object userState) {
            if ((this.onBeginBatchReadDelegate == null)) {
                this.onBeginBatchReadDelegate = new BeginOperationDelegate(this.OnBeginBatchRead);
            }
            if ((this.onEndBatchReadDelegate == null)) {
                this.onEndBatchReadDelegate = new EndOperationDelegate(this.OnEndBatchRead);
            }
            if ((this.onBatchReadCompletedDelegate == null)) {
                this.onBatchReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBatchReadCompleted);
            }
            base.InvokeAsync(this.onBeginBatchReadDelegate, new object[] {
                        batch}, this.onEndBatchReadDelegate, this.onBatchReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> BatchDelete(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate) {
            return base.Channel.BatchDelete(batchPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBatchDelete(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBatchDelete(batchPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> EndBatchDelete(System.IAsyncResult result) {
            return base.Channel.EndBatchDelete(result);
        }
        
        private System.IAsyncResult OnBeginBatchDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate = ((Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate)(inValues[0]));
            return this.BeginBatchDelete(batchPredicate, callback, asyncState);
        }
        
        private object[] OnEndBatchDelete(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> retVal = this.EndBatchDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBatchDeleteCompleted(object state) {
            if ((this.BatchDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BatchDeleteCompleted(this, new BatchDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BatchDeleteAsync(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate) {
            this.BatchDeleteAsync(batchPredicate, null);
        }
        
        public void BatchDeleteAsync(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate, object userState) {
            if ((this.onBeginBatchDeleteDelegate == null)) {
                this.onBeginBatchDeleteDelegate = new BeginOperationDelegate(this.OnBeginBatchDelete);
            }
            if ((this.onEndBatchDeleteDelegate == null)) {
                this.onEndBatchDeleteDelegate = new EndOperationDelegate(this.OnEndBatchDelete);
            }
            if ((this.onBatchDeleteCompletedDelegate == null)) {
                this.onBatchDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBatchDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginBatchDeleteDelegate, new object[] {
                        batchPredicate}, this.onEndBatchDeleteDelegate, this.onBatchDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> BatchSearch(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate) {
            return base.Channel.BatchSearch(batchPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBatchSearch(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBatchSearch(batchPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> EndBatchSearch(System.IAsyncResult result) {
            return base.Channel.EndBatchSearch(result);
        }
        
        private System.IAsyncResult OnBeginBatchSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate = ((Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate)(inValues[0]));
            return this.BeginBatchSearch(batchPredicate, callback, asyncState);
        }
        
        private object[] OnEndBatchSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Batch> retVal = this.EndBatchSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBatchSearchCompleted(object state) {
            if ((this.BatchSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BatchSearchCompleted(this, new BatchSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BatchSearchAsync(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate) {
            this.BatchSearchAsync(batchPredicate, null);
        }
        
        public void BatchSearchAsync(Nimble.Business.Library.Model.Framework.Maintenance.BatchPredicate batchPredicate, object userState) {
            if ((this.onBeginBatchSearchDelegate == null)) {
                this.onBeginBatchSearchDelegate = new BeginOperationDelegate(this.OnBeginBatchSearch);
            }
            if ((this.onEndBatchSearchDelegate == null)) {
                this.onEndBatchSearchDelegate = new EndOperationDelegate(this.OnEndBatchSearch);
            }
            if ((this.onBatchSearchCompletedDelegate == null)) {
                this.onBatchSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBatchSearchCompleted);
            }
            base.InvokeAsync(this.onBeginBatchSearchDelegate, new object[] {
                        batchPredicate}, this.onEndBatchSearchDelegate, this.onBatchSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Operation> OperationSearch(Nimble.Business.Library.Model.Framework.Maintenance.OperationPredicate operationPredicate) {
            return base.Channel.OperationSearch(operationPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOperationSearch(Nimble.Business.Library.Model.Framework.Maintenance.OperationPredicate operationPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOperationSearch(operationPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Operation> EndOperationSearch(System.IAsyncResult result) {
            return base.Channel.EndOperationSearch(result);
        }
        
        private System.IAsyncResult OnBeginOperationSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Maintenance.OperationPredicate operationPredicate = ((Nimble.Business.Library.Model.Framework.Maintenance.OperationPredicate)(inValues[0]));
            return this.BeginOperationSearch(operationPredicate, callback, asyncState);
        }
        
        private object[] OnEndOperationSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Maintenance.Operation> retVal = this.EndOperationSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOperationSearchCompleted(object state) {
            if ((this.OperationSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OperationSearchCompleted(this, new OperationSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OperationSearchAsync(Nimble.Business.Library.Model.Framework.Maintenance.OperationPredicate operationPredicate) {
            this.OperationSearchAsync(operationPredicate, null);
        }
        
        public void OperationSearchAsync(Nimble.Business.Library.Model.Framework.Maintenance.OperationPredicate operationPredicate, object userState) {
            if ((this.onBeginOperationSearchDelegate == null)) {
                this.onBeginOperationSearchDelegate = new BeginOperationDelegate(this.OnBeginOperationSearch);
            }
            if ((this.onEndOperationSearchDelegate == null)) {
                this.onEndOperationSearchDelegate = new EndOperationDelegate(this.OnEndOperationSearch);
            }
            if ((this.onOperationSearchCompletedDelegate == null)) {
                this.onOperationSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOperationSearchCompleted);
            }
            base.InvokeAsync(this.onBeginOperationSearchDelegate, new object[] {
                        operationPredicate}, this.onEndOperationSearchDelegate, this.onOperationSearchCompletedDelegate, userState);
        }
    }
}
