//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nimble.Windows.Client.Owner {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Owner.IOwner")]
    public interface IOwner {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PersonCreate", ReplyAction="http://tempuri.org/IOwner/PersonCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Person PersonCreate(Nimble.Business.Library.Model.Framework.Owner.Person person);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PersonCreate", ReplyAction="http://tempuri.org/IOwner/PersonCreateResponse")]
        System.IAsyncResult BeginPersonCreate(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Person EndPersonCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PersonRead", ReplyAction="http://tempuri.org/IOwner/PersonReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Person PersonRead(Nimble.Business.Library.Model.Framework.Owner.Person person);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PersonRead", ReplyAction="http://tempuri.org/IOwner/PersonReadResponse")]
        System.IAsyncResult BeginPersonRead(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Person EndPersonRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PersonUpdate", ReplyAction="http://tempuri.org/IOwner/PersonUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Person PersonUpdate(Nimble.Business.Library.Model.Framework.Owner.Person person);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PersonUpdate", ReplyAction="http://tempuri.org/IOwner/PersonUpdateResponse")]
        System.IAsyncResult BeginPersonUpdate(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Person EndPersonUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PersonDelete", ReplyAction="http://tempuri.org/IOwner/PersonDeleteResponse")]
        bool PersonDelete(Nimble.Business.Library.Model.Framework.Owner.Person person);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PersonDelete", ReplyAction="http://tempuri.org/IOwner/PersonDeleteResponse")]
        System.IAsyncResult BeginPersonDelete(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState);
        
        bool EndPersonDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PersonSearch", ReplyAction="http://tempuri.org/IOwner/PersonSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Person> PersonSearch(Nimble.Business.Library.Model.Framework.Owner.PersonPredicate personPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PersonSearch", ReplyAction="http://tempuri.org/IOwner/PersonSearchResponse")]
        System.IAsyncResult BeginPersonSearch(Nimble.Business.Library.Model.Framework.Owner.PersonPredicate personPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Person> EndPersonSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/MarkCreate", ReplyAction="http://tempuri.org/IOwner/MarkCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Mark MarkCreate(Nimble.Business.Library.Model.Framework.Owner.Mark mark);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/MarkCreate", ReplyAction="http://tempuri.org/IOwner/MarkCreateResponse")]
        System.IAsyncResult BeginMarkCreate(Nimble.Business.Library.Model.Framework.Owner.Mark mark, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Mark EndMarkCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/MarkRead", ReplyAction="http://tempuri.org/IOwner/MarkReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Mark MarkRead(Nimble.Business.Library.Model.Framework.Owner.Mark mark);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/MarkRead", ReplyAction="http://tempuri.org/IOwner/MarkReadResponse")]
        System.IAsyncResult BeginMarkRead(Nimble.Business.Library.Model.Framework.Owner.Mark mark, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Mark EndMarkRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/MarkUpdate", ReplyAction="http://tempuri.org/IOwner/MarkUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Mark MarkUpdate(Nimble.Business.Library.Model.Framework.Owner.Mark mark);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/MarkUpdate", ReplyAction="http://tempuri.org/IOwner/MarkUpdateResponse")]
        System.IAsyncResult BeginMarkUpdate(Nimble.Business.Library.Model.Framework.Owner.Mark mark, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Mark EndMarkUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/MarkDelete", ReplyAction="http://tempuri.org/IOwner/MarkDeleteResponse")]
        bool MarkDelete(Nimble.Business.Library.Model.Framework.Owner.Mark mark);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/MarkDelete", ReplyAction="http://tempuri.org/IOwner/MarkDeleteResponse")]
        System.IAsyncResult BeginMarkDelete(Nimble.Business.Library.Model.Framework.Owner.Mark mark, System.AsyncCallback callback, object asyncState);
        
        bool EndMarkDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/MarkSearch", ReplyAction="http://tempuri.org/IOwner/MarkSearchResponse")]
        Nimble.Business.Library.Model.Framework.Owner.MarkOutput MarkSearch(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/MarkSearch", ReplyAction="http://tempuri.org/IOwner/MarkSearchResponse")]
        System.IAsyncResult BeginMarkSearch(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.MarkOutput EndMarkSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/MarkResumeSearch", ReplyAction="http://tempuri.org/IOwner/MarkResumeSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.DataTransport.MarkResume> MarkResumeSearch(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/MarkResumeSearch", ReplyAction="http://tempuri.org/IOwner/MarkResumeSearchResponse")]
        System.IAsyncResult BeginMarkResumeSearch(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.DataTransport.MarkResume> EndMarkResumeSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/OrganisationCreate", ReplyAction="http://tempuri.org/IOwner/OrganisationCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Organisation OrganisationCreate(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/OrganisationCreate", ReplyAction="http://tempuri.org/IOwner/OrganisationCreateResponse")]
        System.IAsyncResult BeginOrganisationCreate(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Organisation EndOrganisationCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/OrganisationRead", ReplyAction="http://tempuri.org/IOwner/OrganisationReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Organisation OrganisationRead(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/OrganisationRead", ReplyAction="http://tempuri.org/IOwner/OrganisationReadResponse")]
        System.IAsyncResult BeginOrganisationRead(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Organisation EndOrganisationRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/OrganisationUpdate", ReplyAction="http://tempuri.org/IOwner/OrganisationUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Organisation OrganisationUpdate(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/OrganisationUpdate", ReplyAction="http://tempuri.org/IOwner/OrganisationUpdateResponse")]
        System.IAsyncResult BeginOrganisationUpdate(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Organisation EndOrganisationUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/OrganisationDelete", ReplyAction="http://tempuri.org/IOwner/OrganisationDeleteResponse")]
        bool OrganisationDelete(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/OrganisationDelete", ReplyAction="http://tempuri.org/IOwner/OrganisationDeleteResponse")]
        System.IAsyncResult BeginOrganisationDelete(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState);
        
        bool EndOrganisationDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/OrganisationSearch", ReplyAction="http://tempuri.org/IOwner/OrganisationSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Organisation> OrganisationSearch(Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate organisationPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/OrganisationSearch", ReplyAction="http://tempuri.org/IOwner/OrganisationSearchResponse")]
        System.IAsyncResult BeginOrganisationSearch(Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate organisationPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Organisation> EndOrganisationSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchSplitCreate", ReplyAction="http://tempuri.org/IOwner/BranchSplitCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.BranchSplit BranchSplitCreate(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchSplitCreate", ReplyAction="http://tempuri.org/IOwner/BranchSplitCreateResponse")]
        System.IAsyncResult BeginBranchSplitCreate(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.BranchSplit EndBranchSplitCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchSplitRead", ReplyAction="http://tempuri.org/IOwner/BranchSplitReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.BranchSplit BranchSplitRead(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchSplitRead", ReplyAction="http://tempuri.org/IOwner/BranchSplitReadResponse")]
        System.IAsyncResult BeginBranchSplitRead(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.BranchSplit EndBranchSplitRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchSplitUpdate", ReplyAction="http://tempuri.org/IOwner/BranchSplitUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.BranchSplit BranchSplitUpdate(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchSplitUpdate", ReplyAction="http://tempuri.org/IOwner/BranchSplitUpdateResponse")]
        System.IAsyncResult BeginBranchSplitUpdate(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.BranchSplit EndBranchSplitUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchSplitDelete", ReplyAction="http://tempuri.org/IOwner/BranchSplitDeleteResponse")]
        bool BranchSplitDelete(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchSplitDelete", ReplyAction="http://tempuri.org/IOwner/BranchSplitDeleteResponse")]
        System.IAsyncResult BeginBranchSplitDelete(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, System.AsyncCallback callback, object asyncState);
        
        bool EndBranchSplitDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchSplitSearch", ReplyAction="http://tempuri.org/IOwner/BranchSplitSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchSplit> BranchSplitSearch(Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate branchSplitPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchSplitSearch", ReplyAction="http://tempuri.org/IOwner/BranchSplitSearchResponse")]
        System.IAsyncResult BeginBranchSplitSearch(Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate branchSplitPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchSplit> EndBranchSplitSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchGroupCreate", ReplyAction="http://tempuri.org/IOwner/BranchGroupCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.BranchGroup BranchGroupCreate(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchGroupCreate", ReplyAction="http://tempuri.org/IOwner/BranchGroupCreateResponse")]
        System.IAsyncResult BeginBranchGroupCreate(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.BranchGroup EndBranchGroupCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchGroupRead", ReplyAction="http://tempuri.org/IOwner/BranchGroupReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.BranchGroup BranchGroupRead(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchGroupRead", ReplyAction="http://tempuri.org/IOwner/BranchGroupReadResponse")]
        System.IAsyncResult BeginBranchGroupRead(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.BranchGroup EndBranchGroupRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchGroupUpdate", ReplyAction="http://tempuri.org/IOwner/BranchGroupUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.BranchGroup BranchGroupUpdate(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchGroupUpdate", ReplyAction="http://tempuri.org/IOwner/BranchGroupUpdateResponse")]
        System.IAsyncResult BeginBranchGroupUpdate(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.BranchGroup EndBranchGroupUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchGroupDelete", ReplyAction="http://tempuri.org/IOwner/BranchGroupDeleteResponse")]
        bool BranchGroupDelete(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchGroupDelete", ReplyAction="http://tempuri.org/IOwner/BranchGroupDeleteResponse")]
        System.IAsyncResult BeginBranchGroupDelete(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, System.AsyncCallback callback, object asyncState);
        
        bool EndBranchGroupDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchGroupSearch", ReplyAction="http://tempuri.org/IOwner/BranchGroupSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchGroup> BranchGroupSearch(Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate branchGroupPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchGroupSearch", ReplyAction="http://tempuri.org/IOwner/BranchGroupSearchResponse")]
        System.IAsyncResult BeginBranchGroupSearch(Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate branchGroupPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchGroup> EndBranchGroupSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchBondRead", ReplyAction="http://tempuri.org/IOwner/BranchBondReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.BranchBond BranchBondRead(Nimble.Business.Library.Model.Framework.Owner.BranchBond branchBond);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchBondRead", ReplyAction="http://tempuri.org/IOwner/BranchBondReadResponse")]
        System.IAsyncResult BeginBranchBondRead(Nimble.Business.Library.Model.Framework.Owner.BranchBond branchBond, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.BranchBond EndBranchBondRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchBondSearch", ReplyAction="http://tempuri.org/IOwner/BranchBondSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchBond> BranchBondSearch(Nimble.Business.Library.Model.Framework.Owner.BranchBondPredicate branchBondPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchBondSearch", ReplyAction="http://tempuri.org/IOwner/BranchBondSearchResponse")]
        System.IAsyncResult BeginBranchBondSearch(Nimble.Business.Library.Model.Framework.Owner.BranchBondPredicate branchBondPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchBond> EndBranchBondSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchCreate", ReplyAction="http://tempuri.org/IOwner/BranchCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Branch BranchCreate(Nimble.Business.Library.Model.Framework.Owner.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchCreate", ReplyAction="http://tempuri.org/IOwner/BranchCreateResponse")]
        System.IAsyncResult BeginBranchCreate(Nimble.Business.Library.Model.Framework.Owner.Branch branch, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Branch EndBranchCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchRead", ReplyAction="http://tempuri.org/IOwner/BranchReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Branch BranchRead(Nimble.Business.Library.Model.Framework.Owner.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchRead", ReplyAction="http://tempuri.org/IOwner/BranchReadResponse")]
        System.IAsyncResult BeginBranchRead(Nimble.Business.Library.Model.Framework.Owner.Branch branch, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Branch EndBranchRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchUpdate", ReplyAction="http://tempuri.org/IOwner/BranchUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Branch BranchUpdate(Nimble.Business.Library.Model.Framework.Owner.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchUpdate", ReplyAction="http://tempuri.org/IOwner/BranchUpdateResponse")]
        System.IAsyncResult BeginBranchUpdate(Nimble.Business.Library.Model.Framework.Owner.Branch branch, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Branch EndBranchUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchDelete", ReplyAction="http://tempuri.org/IOwner/BranchDeleteResponse")]
        bool BranchDelete(Nimble.Business.Library.Model.Framework.Owner.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchDelete", ReplyAction="http://tempuri.org/IOwner/BranchDeleteResponse")]
        System.IAsyncResult BeginBranchDelete(Nimble.Business.Library.Model.Framework.Owner.Branch branch, System.AsyncCallback callback, object asyncState);
        
        bool EndBranchDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/BranchSearch", ReplyAction="http://tempuri.org/IOwner/BranchSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Branch> BranchSearch(Nimble.Business.Library.Model.Framework.Owner.BranchPredicate branchPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/BranchSearch", ReplyAction="http://tempuri.org/IOwner/BranchSearchResponse")]
        System.IAsyncResult BeginBranchSearch(Nimble.Business.Library.Model.Framework.Owner.BranchPredicate branchPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Branch> EndBranchSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/RangeCreate", ReplyAction="http://tempuri.org/IOwner/RangeCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Range RangeCreate(Nimble.Business.Library.Model.Framework.Owner.Range range);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/RangeCreate", ReplyAction="http://tempuri.org/IOwner/RangeCreateResponse")]
        System.IAsyncResult BeginRangeCreate(Nimble.Business.Library.Model.Framework.Owner.Range range, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Range EndRangeCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/RangeRead", ReplyAction="http://tempuri.org/IOwner/RangeReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Range RangeRead(Nimble.Business.Library.Model.Framework.Owner.Range range);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/RangeRead", ReplyAction="http://tempuri.org/IOwner/RangeReadResponse")]
        System.IAsyncResult BeginRangeRead(Nimble.Business.Library.Model.Framework.Owner.Range range, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Range EndRangeRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/RangeUpdate", ReplyAction="http://tempuri.org/IOwner/RangeUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Range RangeUpdate(Nimble.Business.Library.Model.Framework.Owner.Range range);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/RangeUpdate", ReplyAction="http://tempuri.org/IOwner/RangeUpdateResponse")]
        System.IAsyncResult BeginRangeUpdate(Nimble.Business.Library.Model.Framework.Owner.Range range, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Range EndRangeUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/RangeDelete", ReplyAction="http://tempuri.org/IOwner/RangeDeleteResponse")]
        bool RangeDelete(Nimble.Business.Library.Model.Framework.Owner.Range range);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/RangeDelete", ReplyAction="http://tempuri.org/IOwner/RangeDeleteResponse")]
        System.IAsyncResult BeginRangeDelete(Nimble.Business.Library.Model.Framework.Owner.Range range, System.AsyncCallback callback, object asyncState);
        
        bool EndRangeDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/RangeSearch", ReplyAction="http://tempuri.org/IOwner/RangeSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Range> RangeSearch(Nimble.Business.Library.Model.Framework.Owner.RangePredicate rangePredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/RangeSearch", ReplyAction="http://tempuri.org/IOwner/RangeSearchResponse")]
        System.IAsyncResult BeginRangeSearch(Nimble.Business.Library.Model.Framework.Owner.RangePredicate rangePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Range> EndRangeSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/EmployeeCreate", ReplyAction="http://tempuri.org/IOwner/EmployeeCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Employee EmployeeCreate(Nimble.Business.Library.Model.Framework.Owner.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/EmployeeCreate", ReplyAction="http://tempuri.org/IOwner/EmployeeCreateResponse")]
        System.IAsyncResult BeginEmployeeCreate(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Employee EndEmployeeCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/EmployeeRead", ReplyAction="http://tempuri.org/IOwner/EmployeeReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Employee EmployeeRead(Nimble.Business.Library.Model.Framework.Owner.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/EmployeeRead", ReplyAction="http://tempuri.org/IOwner/EmployeeReadResponse")]
        System.IAsyncResult BeginEmployeeRead(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Employee EndEmployeeRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/EmployeeUpdate", ReplyAction="http://tempuri.org/IOwner/EmployeeUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Employee EmployeeUpdate(Nimble.Business.Library.Model.Framework.Owner.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/EmployeeUpdate", ReplyAction="http://tempuri.org/IOwner/EmployeeUpdateResponse")]
        System.IAsyncResult BeginEmployeeUpdate(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Employee EndEmployeeUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/EmployeeDelete", ReplyAction="http://tempuri.org/IOwner/EmployeeDeleteResponse")]
        bool EmployeeDelete(Nimble.Business.Library.Model.Framework.Owner.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/EmployeeDelete", ReplyAction="http://tempuri.org/IOwner/EmployeeDeleteResponse")]
        System.IAsyncResult BeginEmployeeDelete(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState);
        
        bool EndEmployeeDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/EmployeeSearch", ReplyAction="http://tempuri.org/IOwner/EmployeeSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Employee> EmployeeSearch(Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate employeePredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/EmployeeSearch", ReplyAction="http://tempuri.org/IOwner/EmployeeSearchResponse")]
        System.IAsyncResult BeginEmployeeSearch(Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate employeePredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Employee> EndEmployeeSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostSplitCreate", ReplyAction="http://tempuri.org/IOwner/PostSplitCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.PostSplit PostSplitCreate(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostSplitCreate", ReplyAction="http://tempuri.org/IOwner/PostSplitCreateResponse")]
        System.IAsyncResult BeginPostSplitCreate(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.PostSplit EndPostSplitCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostSplitRead", ReplyAction="http://tempuri.org/IOwner/PostSplitReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.PostSplit PostSplitRead(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostSplitRead", ReplyAction="http://tempuri.org/IOwner/PostSplitReadResponse")]
        System.IAsyncResult BeginPostSplitRead(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.PostSplit EndPostSplitRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostSplitUpdate", ReplyAction="http://tempuri.org/IOwner/PostSplitUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.PostSplit PostSplitUpdate(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostSplitUpdate", ReplyAction="http://tempuri.org/IOwner/PostSplitUpdateResponse")]
        System.IAsyncResult BeginPostSplitUpdate(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.PostSplit EndPostSplitUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostSplitDelete", ReplyAction="http://tempuri.org/IOwner/PostSplitDeleteResponse")]
        bool PostSplitDelete(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostSplitDelete", ReplyAction="http://tempuri.org/IOwner/PostSplitDeleteResponse")]
        System.IAsyncResult BeginPostSplitDelete(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, System.AsyncCallback callback, object asyncState);
        
        bool EndPostSplitDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostSplitSearch", ReplyAction="http://tempuri.org/IOwner/PostSplitSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostSplit> PostSplitSearch(Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate postSplitPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostSplitSearch", ReplyAction="http://tempuri.org/IOwner/PostSplitSearchResponse")]
        System.IAsyncResult BeginPostSplitSearch(Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate postSplitPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostSplit> EndPostSplitSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostGroupCreate", ReplyAction="http://tempuri.org/IOwner/PostGroupCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.PostGroup PostGroupCreate(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostGroupCreate", ReplyAction="http://tempuri.org/IOwner/PostGroupCreateResponse")]
        System.IAsyncResult BeginPostGroupCreate(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.PostGroup EndPostGroupCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostGroupRead", ReplyAction="http://tempuri.org/IOwner/PostGroupReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.PostGroup PostGroupRead(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostGroupRead", ReplyAction="http://tempuri.org/IOwner/PostGroupReadResponse")]
        System.IAsyncResult BeginPostGroupRead(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.PostGroup EndPostGroupRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostGroupUpdate", ReplyAction="http://tempuri.org/IOwner/PostGroupUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.PostGroup PostGroupUpdate(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostGroupUpdate", ReplyAction="http://tempuri.org/IOwner/PostGroupUpdateResponse")]
        System.IAsyncResult BeginPostGroupUpdate(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.PostGroup EndPostGroupUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostGroupDelete", ReplyAction="http://tempuri.org/IOwner/PostGroupDeleteResponse")]
        bool PostGroupDelete(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostGroupDelete", ReplyAction="http://tempuri.org/IOwner/PostGroupDeleteResponse")]
        System.IAsyncResult BeginPostGroupDelete(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, System.AsyncCallback callback, object asyncState);
        
        bool EndPostGroupDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostGroupSearch", ReplyAction="http://tempuri.org/IOwner/PostGroupSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostGroup> PostGroupSearch(Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate postGroupPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostGroupSearch", ReplyAction="http://tempuri.org/IOwner/PostGroupSearchResponse")]
        System.IAsyncResult BeginPostGroupSearch(Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate postGroupPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostGroup> EndPostGroupSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostBondRead", ReplyAction="http://tempuri.org/IOwner/PostBondReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.PostBond PostBondRead(Nimble.Business.Library.Model.Framework.Owner.PostBond postBond);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostBondRead", ReplyAction="http://tempuri.org/IOwner/PostBondReadResponse")]
        System.IAsyncResult BeginPostBondRead(Nimble.Business.Library.Model.Framework.Owner.PostBond postBond, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.PostBond EndPostBondRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostBondSearch", ReplyAction="http://tempuri.org/IOwner/PostBondSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostBond> PostBondSearch(Nimble.Business.Library.Model.Framework.Owner.PostBondPredicate postBondPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostBondSearch", ReplyAction="http://tempuri.org/IOwner/PostBondSearchResponse")]
        System.IAsyncResult BeginPostBondSearch(Nimble.Business.Library.Model.Framework.Owner.PostBondPredicate postBondPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostBond> EndPostBondSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostCreate", ReplyAction="http://tempuri.org/IOwner/PostCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Post PostCreate(Nimble.Business.Library.Model.Framework.Owner.Post post);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostCreate", ReplyAction="http://tempuri.org/IOwner/PostCreateResponse")]
        System.IAsyncResult BeginPostCreate(Nimble.Business.Library.Model.Framework.Owner.Post post, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Post EndPostCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostRead", ReplyAction="http://tempuri.org/IOwner/PostReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Post PostRead(Nimble.Business.Library.Model.Framework.Owner.Post post);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostRead", ReplyAction="http://tempuri.org/IOwner/PostReadResponse")]
        System.IAsyncResult BeginPostRead(Nimble.Business.Library.Model.Framework.Owner.Post post, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Post EndPostRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostUpdate", ReplyAction="http://tempuri.org/IOwner/PostUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Post PostUpdate(Nimble.Business.Library.Model.Framework.Owner.Post post);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostUpdate", ReplyAction="http://tempuri.org/IOwner/PostUpdateResponse")]
        System.IAsyncResult BeginPostUpdate(Nimble.Business.Library.Model.Framework.Owner.Post post, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Post EndPostUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostDelete", ReplyAction="http://tempuri.org/IOwner/PostDeleteResponse")]
        bool PostDelete(Nimble.Business.Library.Model.Framework.Owner.Post post);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostDelete", ReplyAction="http://tempuri.org/IOwner/PostDeleteResponse")]
        System.IAsyncResult BeginPostDelete(Nimble.Business.Library.Model.Framework.Owner.Post post, System.AsyncCallback callback, object asyncState);
        
        bool EndPostDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostSearch", ReplyAction="http://tempuri.org/IOwner/PostSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> PostSearch(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostSearch", ReplyAction="http://tempuri.org/IOwner/PostSearchResponse")]
        System.IAsyncResult BeginPostSearch(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> EndPostSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/PostSearchPublic", ReplyAction="http://tempuri.org/IOwner/PostSearchPublicResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> PostSearchPublic(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/PostSearchPublic", ReplyAction="http://tempuri.org/IOwner/PostSearchPublicResponse")]
        System.IAsyncResult BeginPostSearchPublic(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> EndPostSearchPublic(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/LayoutCreate", ReplyAction="http://tempuri.org/IOwner/LayoutCreateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Layout LayoutCreate(Nimble.Business.Library.Model.Framework.Owner.Layout layout);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/LayoutCreate", ReplyAction="http://tempuri.org/IOwner/LayoutCreateResponse")]
        System.IAsyncResult BeginLayoutCreate(Nimble.Business.Library.Model.Framework.Owner.Layout layout, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Layout EndLayoutCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/LayoutRead", ReplyAction="http://tempuri.org/IOwner/LayoutReadResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Layout LayoutRead(Nimble.Business.Library.Model.Framework.Owner.Layout layout);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/LayoutRead", ReplyAction="http://tempuri.org/IOwner/LayoutReadResponse")]
        System.IAsyncResult BeginLayoutRead(Nimble.Business.Library.Model.Framework.Owner.Layout layout, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Layout EndLayoutRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/LayoutUpdate", ReplyAction="http://tempuri.org/IOwner/LayoutUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Layout LayoutUpdate(Nimble.Business.Library.Model.Framework.Owner.Layout layout);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/LayoutUpdate", ReplyAction="http://tempuri.org/IOwner/LayoutUpdateResponse")]
        System.IAsyncResult BeginLayoutUpdate(Nimble.Business.Library.Model.Framework.Owner.Layout layout, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Layout EndLayoutUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/LayoutDelete", ReplyAction="http://tempuri.org/IOwner/LayoutDeleteResponse")]
        bool LayoutDelete(Nimble.Business.Library.Model.Framework.Owner.Layout layout);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/LayoutDelete", ReplyAction="http://tempuri.org/IOwner/LayoutDeleteResponse")]
        System.IAsyncResult BeginLayoutDelete(Nimble.Business.Library.Model.Framework.Owner.Layout layout, System.AsyncCallback callback, object asyncState);
        
        bool EndLayoutDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOwner/LayoutSearch", ReplyAction="http://tempuri.org/IOwner/LayoutSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Layout> LayoutSearch(Nimble.Business.Library.Model.Framework.Owner.LayoutPredicate layoutPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOwner/LayoutSearch", ReplyAction="http://tempuri.org/IOwner/LayoutSearchResponse")]
        System.IAsyncResult BeginLayoutSearch(Nimble.Business.Library.Model.Framework.Owner.LayoutPredicate layoutPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Layout> EndLayoutSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOwnerChannel : Nimble.Windows.Client.Owner.IOwner, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Person)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Person)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Person)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Person> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Person>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Mark Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Mark)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Mark Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Mark)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Mark Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Mark)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.MarkOutput Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.MarkOutput)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkResumeSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkResumeSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.DataTransport.MarkResume> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.DataTransport.MarkResume>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrganisationCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OrganisationCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Organisation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Organisation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrganisationReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OrganisationReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Organisation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Organisation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrganisationUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OrganisationUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Organisation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Organisation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrganisationDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OrganisationDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrganisationSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OrganisationSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Organisation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Organisation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchSplitCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchSplitCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.BranchSplit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchSplitReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchSplitReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.BranchSplit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchSplitUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchSplitUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.BranchSplit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchSplitDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchSplitDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchSplitSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchSplitSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchSplit> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchSplit>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchGroupCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchGroupCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.BranchGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchGroupReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchGroupReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.BranchGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchGroupUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchGroupUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.BranchGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchGroupDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchGroupDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchGroupSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchGroupSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchGroup> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchGroup>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchBondReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchBondReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchBond Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.BranchBond)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchBondSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchBondSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchBond> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchBond>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Branch Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Branch)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Branch Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Branch)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Branch Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Branch)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BranchSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Branch> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Branch>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RangeCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RangeCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Range Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Range)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RangeReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RangeReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Range Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Range)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RangeUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RangeUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Range Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Range)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RangeDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RangeDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RangeSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RangeSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Range> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Range>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EmployeeCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Employee)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EmployeeReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Employee)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EmployeeUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Employee)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EmployeeDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EmployeeSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Employee> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Employee>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostSplitCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostSplitCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.PostSplit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostSplitReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostSplitReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.PostSplit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostSplitUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostSplitUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.PostSplit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostSplitDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostSplitDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostSplitSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostSplitSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostSplit> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostSplit>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostGroupCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostGroupCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.PostGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostGroupReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostGroupReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.PostGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostGroupUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostGroupUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.PostGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostGroupDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostGroupDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostGroupSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostGroupSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostGroup> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostGroup>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostBondReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostBondReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostBond Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.PostBond)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostBondSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostBondSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostBond> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostBond>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Post Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Post)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Post Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Post)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Post Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Post)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostSearchPublicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostSearchPublicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LayoutCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LayoutCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Layout Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Layout)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LayoutReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LayoutReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Layout Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Layout)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LayoutUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LayoutUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Layout Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Layout)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LayoutDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LayoutDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LayoutSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LayoutSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Layout> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Layout>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OwnerClient : System.ServiceModel.ClientBase<Nimble.Windows.Client.Owner.IOwner>, Nimble.Windows.Client.Owner.IOwner {
        
        private BeginOperationDelegate onBeginPersonCreateDelegate;
        
        private EndOperationDelegate onEndPersonCreateDelegate;
        
        private System.Threading.SendOrPostCallback onPersonCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersonReadDelegate;
        
        private EndOperationDelegate onEndPersonReadDelegate;
        
        private System.Threading.SendOrPostCallback onPersonReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersonUpdateDelegate;
        
        private EndOperationDelegate onEndPersonUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onPersonUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersonDeleteDelegate;
        
        private EndOperationDelegate onEndPersonDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onPersonDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersonSearchDelegate;
        
        private EndOperationDelegate onEndPersonSearchDelegate;
        
        private System.Threading.SendOrPostCallback onPersonSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkCreateDelegate;
        
        private EndOperationDelegate onEndMarkCreateDelegate;
        
        private System.Threading.SendOrPostCallback onMarkCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkReadDelegate;
        
        private EndOperationDelegate onEndMarkReadDelegate;
        
        private System.Threading.SendOrPostCallback onMarkReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkUpdateDelegate;
        
        private EndOperationDelegate onEndMarkUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onMarkUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkDeleteDelegate;
        
        private EndOperationDelegate onEndMarkDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onMarkDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkSearchDelegate;
        
        private EndOperationDelegate onEndMarkSearchDelegate;
        
        private System.Threading.SendOrPostCallback onMarkSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkResumeSearchDelegate;
        
        private EndOperationDelegate onEndMarkResumeSearchDelegate;
        
        private System.Threading.SendOrPostCallback onMarkResumeSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOrganisationCreateDelegate;
        
        private EndOperationDelegate onEndOrganisationCreateDelegate;
        
        private System.Threading.SendOrPostCallback onOrganisationCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginOrganisationReadDelegate;
        
        private EndOperationDelegate onEndOrganisationReadDelegate;
        
        private System.Threading.SendOrPostCallback onOrganisationReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginOrganisationUpdateDelegate;
        
        private EndOperationDelegate onEndOrganisationUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onOrganisationUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginOrganisationDeleteDelegate;
        
        private EndOperationDelegate onEndOrganisationDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onOrganisationDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginOrganisationSearchDelegate;
        
        private EndOperationDelegate onEndOrganisationSearchDelegate;
        
        private System.Threading.SendOrPostCallback onOrganisationSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchSplitCreateDelegate;
        
        private EndOperationDelegate onEndBranchSplitCreateDelegate;
        
        private System.Threading.SendOrPostCallback onBranchSplitCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchSplitReadDelegate;
        
        private EndOperationDelegate onEndBranchSplitReadDelegate;
        
        private System.Threading.SendOrPostCallback onBranchSplitReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchSplitUpdateDelegate;
        
        private EndOperationDelegate onEndBranchSplitUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onBranchSplitUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchSplitDeleteDelegate;
        
        private EndOperationDelegate onEndBranchSplitDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onBranchSplitDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchSplitSearchDelegate;
        
        private EndOperationDelegate onEndBranchSplitSearchDelegate;
        
        private System.Threading.SendOrPostCallback onBranchSplitSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchGroupCreateDelegate;
        
        private EndOperationDelegate onEndBranchGroupCreateDelegate;
        
        private System.Threading.SendOrPostCallback onBranchGroupCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchGroupReadDelegate;
        
        private EndOperationDelegate onEndBranchGroupReadDelegate;
        
        private System.Threading.SendOrPostCallback onBranchGroupReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchGroupUpdateDelegate;
        
        private EndOperationDelegate onEndBranchGroupUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onBranchGroupUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchGroupDeleteDelegate;
        
        private EndOperationDelegate onEndBranchGroupDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onBranchGroupDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchGroupSearchDelegate;
        
        private EndOperationDelegate onEndBranchGroupSearchDelegate;
        
        private System.Threading.SendOrPostCallback onBranchGroupSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchBondReadDelegate;
        
        private EndOperationDelegate onEndBranchBondReadDelegate;
        
        private System.Threading.SendOrPostCallback onBranchBondReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchBondSearchDelegate;
        
        private EndOperationDelegate onEndBranchBondSearchDelegate;
        
        private System.Threading.SendOrPostCallback onBranchBondSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchCreateDelegate;
        
        private EndOperationDelegate onEndBranchCreateDelegate;
        
        private System.Threading.SendOrPostCallback onBranchCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchReadDelegate;
        
        private EndOperationDelegate onEndBranchReadDelegate;
        
        private System.Threading.SendOrPostCallback onBranchReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchUpdateDelegate;
        
        private EndOperationDelegate onEndBranchUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onBranchUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchDeleteDelegate;
        
        private EndOperationDelegate onEndBranchDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onBranchDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginBranchSearchDelegate;
        
        private EndOperationDelegate onEndBranchSearchDelegate;
        
        private System.Threading.SendOrPostCallback onBranchSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginRangeCreateDelegate;
        
        private EndOperationDelegate onEndRangeCreateDelegate;
        
        private System.Threading.SendOrPostCallback onRangeCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRangeReadDelegate;
        
        private EndOperationDelegate onEndRangeReadDelegate;
        
        private System.Threading.SendOrPostCallback onRangeReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginRangeUpdateDelegate;
        
        private EndOperationDelegate onEndRangeUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onRangeUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRangeDeleteDelegate;
        
        private EndOperationDelegate onEndRangeDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onRangeDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginRangeSearchDelegate;
        
        private EndOperationDelegate onEndRangeSearchDelegate;
        
        private System.Threading.SendOrPostCallback onRangeSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginEmployeeCreateDelegate;
        
        private EndOperationDelegate onEndEmployeeCreateDelegate;
        
        private System.Threading.SendOrPostCallback onEmployeeCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginEmployeeReadDelegate;
        
        private EndOperationDelegate onEndEmployeeReadDelegate;
        
        private System.Threading.SendOrPostCallback onEmployeeReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginEmployeeUpdateDelegate;
        
        private EndOperationDelegate onEndEmployeeUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onEmployeeUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginEmployeeDeleteDelegate;
        
        private EndOperationDelegate onEndEmployeeDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onEmployeeDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginEmployeeSearchDelegate;
        
        private EndOperationDelegate onEndEmployeeSearchDelegate;
        
        private System.Threading.SendOrPostCallback onEmployeeSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostSplitCreateDelegate;
        
        private EndOperationDelegate onEndPostSplitCreateDelegate;
        
        private System.Threading.SendOrPostCallback onPostSplitCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostSplitReadDelegate;
        
        private EndOperationDelegate onEndPostSplitReadDelegate;
        
        private System.Threading.SendOrPostCallback onPostSplitReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostSplitUpdateDelegate;
        
        private EndOperationDelegate onEndPostSplitUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onPostSplitUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostSplitDeleteDelegate;
        
        private EndOperationDelegate onEndPostSplitDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onPostSplitDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostSplitSearchDelegate;
        
        private EndOperationDelegate onEndPostSplitSearchDelegate;
        
        private System.Threading.SendOrPostCallback onPostSplitSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostGroupCreateDelegate;
        
        private EndOperationDelegate onEndPostGroupCreateDelegate;
        
        private System.Threading.SendOrPostCallback onPostGroupCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostGroupReadDelegate;
        
        private EndOperationDelegate onEndPostGroupReadDelegate;
        
        private System.Threading.SendOrPostCallback onPostGroupReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostGroupUpdateDelegate;
        
        private EndOperationDelegate onEndPostGroupUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onPostGroupUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostGroupDeleteDelegate;
        
        private EndOperationDelegate onEndPostGroupDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onPostGroupDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostGroupSearchDelegate;
        
        private EndOperationDelegate onEndPostGroupSearchDelegate;
        
        private System.Threading.SendOrPostCallback onPostGroupSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostBondReadDelegate;
        
        private EndOperationDelegate onEndPostBondReadDelegate;
        
        private System.Threading.SendOrPostCallback onPostBondReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostBondSearchDelegate;
        
        private EndOperationDelegate onEndPostBondSearchDelegate;
        
        private System.Threading.SendOrPostCallback onPostBondSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostCreateDelegate;
        
        private EndOperationDelegate onEndPostCreateDelegate;
        
        private System.Threading.SendOrPostCallback onPostCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostReadDelegate;
        
        private EndOperationDelegate onEndPostReadDelegate;
        
        private System.Threading.SendOrPostCallback onPostReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostUpdateDelegate;
        
        private EndOperationDelegate onEndPostUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onPostUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostDeleteDelegate;
        
        private EndOperationDelegate onEndPostDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onPostDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostSearchDelegate;
        
        private EndOperationDelegate onEndPostSearchDelegate;
        
        private System.Threading.SendOrPostCallback onPostSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostSearchPublicDelegate;
        
        private EndOperationDelegate onEndPostSearchPublicDelegate;
        
        private System.Threading.SendOrPostCallback onPostSearchPublicCompletedDelegate;
        
        private BeginOperationDelegate onBeginLayoutCreateDelegate;
        
        private EndOperationDelegate onEndLayoutCreateDelegate;
        
        private System.Threading.SendOrPostCallback onLayoutCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginLayoutReadDelegate;
        
        private EndOperationDelegate onEndLayoutReadDelegate;
        
        private System.Threading.SendOrPostCallback onLayoutReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginLayoutUpdateDelegate;
        
        private EndOperationDelegate onEndLayoutUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onLayoutUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginLayoutDeleteDelegate;
        
        private EndOperationDelegate onEndLayoutDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onLayoutDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginLayoutSearchDelegate;
        
        private EndOperationDelegate onEndLayoutSearchDelegate;
        
        private System.Threading.SendOrPostCallback onLayoutSearchCompletedDelegate;
        
        public OwnerClient() {
        }
        
        public OwnerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OwnerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OwnerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OwnerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<PersonCreateCompletedEventArgs> PersonCreateCompleted;
        
        public event System.EventHandler<PersonReadCompletedEventArgs> PersonReadCompleted;
        
        public event System.EventHandler<PersonUpdateCompletedEventArgs> PersonUpdateCompleted;
        
        public event System.EventHandler<PersonDeleteCompletedEventArgs> PersonDeleteCompleted;
        
        public event System.EventHandler<PersonSearchCompletedEventArgs> PersonSearchCompleted;
        
        public event System.EventHandler<MarkCreateCompletedEventArgs> MarkCreateCompleted;
        
        public event System.EventHandler<MarkReadCompletedEventArgs> MarkReadCompleted;
        
        public event System.EventHandler<MarkUpdateCompletedEventArgs> MarkUpdateCompleted;
        
        public event System.EventHandler<MarkDeleteCompletedEventArgs> MarkDeleteCompleted;
        
        public event System.EventHandler<MarkSearchCompletedEventArgs> MarkSearchCompleted;
        
        public event System.EventHandler<MarkResumeSearchCompletedEventArgs> MarkResumeSearchCompleted;
        
        public event System.EventHandler<OrganisationCreateCompletedEventArgs> OrganisationCreateCompleted;
        
        public event System.EventHandler<OrganisationReadCompletedEventArgs> OrganisationReadCompleted;
        
        public event System.EventHandler<OrganisationUpdateCompletedEventArgs> OrganisationUpdateCompleted;
        
        public event System.EventHandler<OrganisationDeleteCompletedEventArgs> OrganisationDeleteCompleted;
        
        public event System.EventHandler<OrganisationSearchCompletedEventArgs> OrganisationSearchCompleted;
        
        public event System.EventHandler<BranchSplitCreateCompletedEventArgs> BranchSplitCreateCompleted;
        
        public event System.EventHandler<BranchSplitReadCompletedEventArgs> BranchSplitReadCompleted;
        
        public event System.EventHandler<BranchSplitUpdateCompletedEventArgs> BranchSplitUpdateCompleted;
        
        public event System.EventHandler<BranchSplitDeleteCompletedEventArgs> BranchSplitDeleteCompleted;
        
        public event System.EventHandler<BranchSplitSearchCompletedEventArgs> BranchSplitSearchCompleted;
        
        public event System.EventHandler<BranchGroupCreateCompletedEventArgs> BranchGroupCreateCompleted;
        
        public event System.EventHandler<BranchGroupReadCompletedEventArgs> BranchGroupReadCompleted;
        
        public event System.EventHandler<BranchGroupUpdateCompletedEventArgs> BranchGroupUpdateCompleted;
        
        public event System.EventHandler<BranchGroupDeleteCompletedEventArgs> BranchGroupDeleteCompleted;
        
        public event System.EventHandler<BranchGroupSearchCompletedEventArgs> BranchGroupSearchCompleted;
        
        public event System.EventHandler<BranchBondReadCompletedEventArgs> BranchBondReadCompleted;
        
        public event System.EventHandler<BranchBondSearchCompletedEventArgs> BranchBondSearchCompleted;
        
        public event System.EventHandler<BranchCreateCompletedEventArgs> BranchCreateCompleted;
        
        public event System.EventHandler<BranchReadCompletedEventArgs> BranchReadCompleted;
        
        public event System.EventHandler<BranchUpdateCompletedEventArgs> BranchUpdateCompleted;
        
        public event System.EventHandler<BranchDeleteCompletedEventArgs> BranchDeleteCompleted;
        
        public event System.EventHandler<BranchSearchCompletedEventArgs> BranchSearchCompleted;
        
        public event System.EventHandler<RangeCreateCompletedEventArgs> RangeCreateCompleted;
        
        public event System.EventHandler<RangeReadCompletedEventArgs> RangeReadCompleted;
        
        public event System.EventHandler<RangeUpdateCompletedEventArgs> RangeUpdateCompleted;
        
        public event System.EventHandler<RangeDeleteCompletedEventArgs> RangeDeleteCompleted;
        
        public event System.EventHandler<RangeSearchCompletedEventArgs> RangeSearchCompleted;
        
        public event System.EventHandler<EmployeeCreateCompletedEventArgs> EmployeeCreateCompleted;
        
        public event System.EventHandler<EmployeeReadCompletedEventArgs> EmployeeReadCompleted;
        
        public event System.EventHandler<EmployeeUpdateCompletedEventArgs> EmployeeUpdateCompleted;
        
        public event System.EventHandler<EmployeeDeleteCompletedEventArgs> EmployeeDeleteCompleted;
        
        public event System.EventHandler<EmployeeSearchCompletedEventArgs> EmployeeSearchCompleted;
        
        public event System.EventHandler<PostSplitCreateCompletedEventArgs> PostSplitCreateCompleted;
        
        public event System.EventHandler<PostSplitReadCompletedEventArgs> PostSplitReadCompleted;
        
        public event System.EventHandler<PostSplitUpdateCompletedEventArgs> PostSplitUpdateCompleted;
        
        public event System.EventHandler<PostSplitDeleteCompletedEventArgs> PostSplitDeleteCompleted;
        
        public event System.EventHandler<PostSplitSearchCompletedEventArgs> PostSplitSearchCompleted;
        
        public event System.EventHandler<PostGroupCreateCompletedEventArgs> PostGroupCreateCompleted;
        
        public event System.EventHandler<PostGroupReadCompletedEventArgs> PostGroupReadCompleted;
        
        public event System.EventHandler<PostGroupUpdateCompletedEventArgs> PostGroupUpdateCompleted;
        
        public event System.EventHandler<PostGroupDeleteCompletedEventArgs> PostGroupDeleteCompleted;
        
        public event System.EventHandler<PostGroupSearchCompletedEventArgs> PostGroupSearchCompleted;
        
        public event System.EventHandler<PostBondReadCompletedEventArgs> PostBondReadCompleted;
        
        public event System.EventHandler<PostBondSearchCompletedEventArgs> PostBondSearchCompleted;
        
        public event System.EventHandler<PostCreateCompletedEventArgs> PostCreateCompleted;
        
        public event System.EventHandler<PostReadCompletedEventArgs> PostReadCompleted;
        
        public event System.EventHandler<PostUpdateCompletedEventArgs> PostUpdateCompleted;
        
        public event System.EventHandler<PostDeleteCompletedEventArgs> PostDeleteCompleted;
        
        public event System.EventHandler<PostSearchCompletedEventArgs> PostSearchCompleted;
        
        public event System.EventHandler<PostSearchPublicCompletedEventArgs> PostSearchPublicCompleted;
        
        public event System.EventHandler<LayoutCreateCompletedEventArgs> LayoutCreateCompleted;
        
        public event System.EventHandler<LayoutReadCompletedEventArgs> LayoutReadCompleted;
        
        public event System.EventHandler<LayoutUpdateCompletedEventArgs> LayoutUpdateCompleted;
        
        public event System.EventHandler<LayoutDeleteCompletedEventArgs> LayoutDeleteCompleted;
        
        public event System.EventHandler<LayoutSearchCompletedEventArgs> LayoutSearchCompleted;
        
        public Nimble.Business.Library.Model.Framework.Owner.Person PersonCreate(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            return base.Channel.PersonCreate(person);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPersonCreate(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonCreate(person, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Person EndPersonCreate(System.IAsyncResult result) {
            return base.Channel.EndPersonCreate(result);
        }
        
        private System.IAsyncResult OnBeginPersonCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Person person = ((Nimble.Business.Library.Model.Framework.Owner.Person)(inValues[0]));
            return this.BeginPersonCreate(person, callback, asyncState);
        }
        
        private object[] OnEndPersonCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Person retVal = this.EndPersonCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonCreateCompleted(object state) {
            if ((this.PersonCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonCreateCompleted(this, new PersonCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            this.PersonCreateAsync(person, null);
        }
        
        public void PersonCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Person person, object userState) {
            if ((this.onBeginPersonCreateDelegate == null)) {
                this.onBeginPersonCreateDelegate = new BeginOperationDelegate(this.OnBeginPersonCreate);
            }
            if ((this.onEndPersonCreateDelegate == null)) {
                this.onEndPersonCreateDelegate = new EndOperationDelegate(this.OnEndPersonCreate);
            }
            if ((this.onPersonCreateCompletedDelegate == null)) {
                this.onPersonCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonCreateCompleted);
            }
            base.InvokeAsync(this.onBeginPersonCreateDelegate, new object[] {
                        person}, this.onEndPersonCreateDelegate, this.onPersonCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person PersonRead(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            return base.Channel.PersonRead(person);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPersonRead(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonRead(person, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Person EndPersonRead(System.IAsyncResult result) {
            return base.Channel.EndPersonRead(result);
        }
        
        private System.IAsyncResult OnBeginPersonRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Person person = ((Nimble.Business.Library.Model.Framework.Owner.Person)(inValues[0]));
            return this.BeginPersonRead(person, callback, asyncState);
        }
        
        private object[] OnEndPersonRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Person retVal = this.EndPersonRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonReadCompleted(object state) {
            if ((this.PersonReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonReadCompleted(this, new PersonReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonReadAsync(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            this.PersonReadAsync(person, null);
        }
        
        public void PersonReadAsync(Nimble.Business.Library.Model.Framework.Owner.Person person, object userState) {
            if ((this.onBeginPersonReadDelegate == null)) {
                this.onBeginPersonReadDelegate = new BeginOperationDelegate(this.OnBeginPersonRead);
            }
            if ((this.onEndPersonReadDelegate == null)) {
                this.onEndPersonReadDelegate = new EndOperationDelegate(this.OnEndPersonRead);
            }
            if ((this.onPersonReadCompletedDelegate == null)) {
                this.onPersonReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonReadCompleted);
            }
            base.InvokeAsync(this.onBeginPersonReadDelegate, new object[] {
                        person}, this.onEndPersonReadDelegate, this.onPersonReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person PersonUpdate(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            return base.Channel.PersonUpdate(person);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPersonUpdate(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonUpdate(person, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Person EndPersonUpdate(System.IAsyncResult result) {
            return base.Channel.EndPersonUpdate(result);
        }
        
        private System.IAsyncResult OnBeginPersonUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Person person = ((Nimble.Business.Library.Model.Framework.Owner.Person)(inValues[0]));
            return this.BeginPersonUpdate(person, callback, asyncState);
        }
        
        private object[] OnEndPersonUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Person retVal = this.EndPersonUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonUpdateCompleted(object state) {
            if ((this.PersonUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonUpdateCompleted(this, new PersonUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            this.PersonUpdateAsync(person, null);
        }
        
        public void PersonUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Person person, object userState) {
            if ((this.onBeginPersonUpdateDelegate == null)) {
                this.onBeginPersonUpdateDelegate = new BeginOperationDelegate(this.OnBeginPersonUpdate);
            }
            if ((this.onEndPersonUpdateDelegate == null)) {
                this.onEndPersonUpdateDelegate = new EndOperationDelegate(this.OnEndPersonUpdate);
            }
            if ((this.onPersonUpdateCompletedDelegate == null)) {
                this.onPersonUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginPersonUpdateDelegate, new object[] {
                        person}, this.onEndPersonUpdateDelegate, this.onPersonUpdateCompletedDelegate, userState);
        }
        
        public bool PersonDelete(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            return base.Channel.PersonDelete(person);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPersonDelete(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonDelete(person, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPersonDelete(System.IAsyncResult result) {
            return base.Channel.EndPersonDelete(result);
        }
        
        private System.IAsyncResult OnBeginPersonDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Person person = ((Nimble.Business.Library.Model.Framework.Owner.Person)(inValues[0]));
            return this.BeginPersonDelete(person, callback, asyncState);
        }
        
        private object[] OnEndPersonDelete(System.IAsyncResult result) {
            bool retVal = this.EndPersonDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonDeleteCompleted(object state) {
            if ((this.PersonDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonDeleteCompleted(this, new PersonDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            this.PersonDeleteAsync(person, null);
        }
        
        public void PersonDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Person person, object userState) {
            if ((this.onBeginPersonDeleteDelegate == null)) {
                this.onBeginPersonDeleteDelegate = new BeginOperationDelegate(this.OnBeginPersonDelete);
            }
            if ((this.onEndPersonDeleteDelegate == null)) {
                this.onEndPersonDeleteDelegate = new EndOperationDelegate(this.OnEndPersonDelete);
            }
            if ((this.onPersonDeleteCompletedDelegate == null)) {
                this.onPersonDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginPersonDeleteDelegate, new object[] {
                        person}, this.onEndPersonDeleteDelegate, this.onPersonDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Person> PersonSearch(Nimble.Business.Library.Model.Framework.Owner.PersonPredicate personPredicate) {
            return base.Channel.PersonSearch(personPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPersonSearch(Nimble.Business.Library.Model.Framework.Owner.PersonPredicate personPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonSearch(personPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Person> EndPersonSearch(System.IAsyncResult result) {
            return base.Channel.EndPersonSearch(result);
        }
        
        private System.IAsyncResult OnBeginPersonSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PersonPredicate personPredicate = ((Nimble.Business.Library.Model.Framework.Owner.PersonPredicate)(inValues[0]));
            return this.BeginPersonSearch(personPredicate, callback, asyncState);
        }
        
        private object[] OnEndPersonSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Person> retVal = this.EndPersonSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonSearchCompleted(object state) {
            if ((this.PersonSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonSearchCompleted(this, new PersonSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PersonPredicate personPredicate) {
            this.PersonSearchAsync(personPredicate, null);
        }
        
        public void PersonSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PersonPredicate personPredicate, object userState) {
            if ((this.onBeginPersonSearchDelegate == null)) {
                this.onBeginPersonSearchDelegate = new BeginOperationDelegate(this.OnBeginPersonSearch);
            }
            if ((this.onEndPersonSearchDelegate == null)) {
                this.onEndPersonSearchDelegate = new EndOperationDelegate(this.OnEndPersonSearch);
            }
            if ((this.onPersonSearchCompletedDelegate == null)) {
                this.onPersonSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonSearchCompleted);
            }
            base.InvokeAsync(this.onBeginPersonSearchDelegate, new object[] {
                        personPredicate}, this.onEndPersonSearchDelegate, this.onPersonSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Mark MarkCreate(Nimble.Business.Library.Model.Framework.Owner.Mark mark) {
            return base.Channel.MarkCreate(mark);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMarkCreate(Nimble.Business.Library.Model.Framework.Owner.Mark mark, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkCreate(mark, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Mark EndMarkCreate(System.IAsyncResult result) {
            return base.Channel.EndMarkCreate(result);
        }
        
        private System.IAsyncResult OnBeginMarkCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Mark mark = ((Nimble.Business.Library.Model.Framework.Owner.Mark)(inValues[0]));
            return this.BeginMarkCreate(mark, callback, asyncState);
        }
        
        private object[] OnEndMarkCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Mark retVal = this.EndMarkCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkCreateCompleted(object state) {
            if ((this.MarkCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkCreateCompleted(this, new MarkCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Mark mark) {
            this.MarkCreateAsync(mark, null);
        }
        
        public void MarkCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Mark mark, object userState) {
            if ((this.onBeginMarkCreateDelegate == null)) {
                this.onBeginMarkCreateDelegate = new BeginOperationDelegate(this.OnBeginMarkCreate);
            }
            if ((this.onEndMarkCreateDelegate == null)) {
                this.onEndMarkCreateDelegate = new EndOperationDelegate(this.OnEndMarkCreate);
            }
            if ((this.onMarkCreateCompletedDelegate == null)) {
                this.onMarkCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkCreateCompleted);
            }
            base.InvokeAsync(this.onBeginMarkCreateDelegate, new object[] {
                        mark}, this.onEndMarkCreateDelegate, this.onMarkCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Mark MarkRead(Nimble.Business.Library.Model.Framework.Owner.Mark mark) {
            return base.Channel.MarkRead(mark);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMarkRead(Nimble.Business.Library.Model.Framework.Owner.Mark mark, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkRead(mark, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Mark EndMarkRead(System.IAsyncResult result) {
            return base.Channel.EndMarkRead(result);
        }
        
        private System.IAsyncResult OnBeginMarkRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Mark mark = ((Nimble.Business.Library.Model.Framework.Owner.Mark)(inValues[0]));
            return this.BeginMarkRead(mark, callback, asyncState);
        }
        
        private object[] OnEndMarkRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Mark retVal = this.EndMarkRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkReadCompleted(object state) {
            if ((this.MarkReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkReadCompleted(this, new MarkReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkReadAsync(Nimble.Business.Library.Model.Framework.Owner.Mark mark) {
            this.MarkReadAsync(mark, null);
        }
        
        public void MarkReadAsync(Nimble.Business.Library.Model.Framework.Owner.Mark mark, object userState) {
            if ((this.onBeginMarkReadDelegate == null)) {
                this.onBeginMarkReadDelegate = new BeginOperationDelegate(this.OnBeginMarkRead);
            }
            if ((this.onEndMarkReadDelegate == null)) {
                this.onEndMarkReadDelegate = new EndOperationDelegate(this.OnEndMarkRead);
            }
            if ((this.onMarkReadCompletedDelegate == null)) {
                this.onMarkReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkReadCompleted);
            }
            base.InvokeAsync(this.onBeginMarkReadDelegate, new object[] {
                        mark}, this.onEndMarkReadDelegate, this.onMarkReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Mark MarkUpdate(Nimble.Business.Library.Model.Framework.Owner.Mark mark) {
            return base.Channel.MarkUpdate(mark);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMarkUpdate(Nimble.Business.Library.Model.Framework.Owner.Mark mark, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkUpdate(mark, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Mark EndMarkUpdate(System.IAsyncResult result) {
            return base.Channel.EndMarkUpdate(result);
        }
        
        private System.IAsyncResult OnBeginMarkUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Mark mark = ((Nimble.Business.Library.Model.Framework.Owner.Mark)(inValues[0]));
            return this.BeginMarkUpdate(mark, callback, asyncState);
        }
        
        private object[] OnEndMarkUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Mark retVal = this.EndMarkUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkUpdateCompleted(object state) {
            if ((this.MarkUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkUpdateCompleted(this, new MarkUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Mark mark) {
            this.MarkUpdateAsync(mark, null);
        }
        
        public void MarkUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Mark mark, object userState) {
            if ((this.onBeginMarkUpdateDelegate == null)) {
                this.onBeginMarkUpdateDelegate = new BeginOperationDelegate(this.OnBeginMarkUpdate);
            }
            if ((this.onEndMarkUpdateDelegate == null)) {
                this.onEndMarkUpdateDelegate = new EndOperationDelegate(this.OnEndMarkUpdate);
            }
            if ((this.onMarkUpdateCompletedDelegate == null)) {
                this.onMarkUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginMarkUpdateDelegate, new object[] {
                        mark}, this.onEndMarkUpdateDelegate, this.onMarkUpdateCompletedDelegate, userState);
        }
        
        public bool MarkDelete(Nimble.Business.Library.Model.Framework.Owner.Mark mark) {
            return base.Channel.MarkDelete(mark);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMarkDelete(Nimble.Business.Library.Model.Framework.Owner.Mark mark, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkDelete(mark, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndMarkDelete(System.IAsyncResult result) {
            return base.Channel.EndMarkDelete(result);
        }
        
        private System.IAsyncResult OnBeginMarkDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Mark mark = ((Nimble.Business.Library.Model.Framework.Owner.Mark)(inValues[0]));
            return this.BeginMarkDelete(mark, callback, asyncState);
        }
        
        private object[] OnEndMarkDelete(System.IAsyncResult result) {
            bool retVal = this.EndMarkDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkDeleteCompleted(object state) {
            if ((this.MarkDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkDeleteCompleted(this, new MarkDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Mark mark) {
            this.MarkDeleteAsync(mark, null);
        }
        
        public void MarkDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Mark mark, object userState) {
            if ((this.onBeginMarkDeleteDelegate == null)) {
                this.onBeginMarkDeleteDelegate = new BeginOperationDelegate(this.OnBeginMarkDelete);
            }
            if ((this.onEndMarkDeleteDelegate == null)) {
                this.onEndMarkDeleteDelegate = new EndOperationDelegate(this.OnEndMarkDelete);
            }
            if ((this.onMarkDeleteCompletedDelegate == null)) {
                this.onMarkDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginMarkDeleteDelegate, new object[] {
                        mark}, this.onEndMarkDeleteDelegate, this.onMarkDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.MarkOutput MarkSearch(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate) {
            return base.Channel.MarkSearch(markPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMarkSearch(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkSearch(markPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.MarkOutput EndMarkSearch(System.IAsyncResult result) {
            return base.Channel.EndMarkSearch(result);
        }
        
        private System.IAsyncResult OnBeginMarkSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate = ((Nimble.Business.Library.Model.Framework.Owner.MarkPredicate)(inValues[0]));
            return this.BeginMarkSearch(markPredicate, callback, asyncState);
        }
        
        private object[] OnEndMarkSearch(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.MarkOutput retVal = this.EndMarkSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkSearchCompleted(object state) {
            if ((this.MarkSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkSearchCompleted(this, new MarkSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkSearchAsync(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate) {
            this.MarkSearchAsync(markPredicate, null);
        }
        
        public void MarkSearchAsync(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate, object userState) {
            if ((this.onBeginMarkSearchDelegate == null)) {
                this.onBeginMarkSearchDelegate = new BeginOperationDelegate(this.OnBeginMarkSearch);
            }
            if ((this.onEndMarkSearchDelegate == null)) {
                this.onEndMarkSearchDelegate = new EndOperationDelegate(this.OnEndMarkSearch);
            }
            if ((this.onMarkSearchCompletedDelegate == null)) {
                this.onMarkSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkSearchCompleted);
            }
            base.InvokeAsync(this.onBeginMarkSearchDelegate, new object[] {
                        markPredicate}, this.onEndMarkSearchDelegate, this.onMarkSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.DataTransport.MarkResume> MarkResumeSearch(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate) {
            return base.Channel.MarkResumeSearch(markPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMarkResumeSearch(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkResumeSearch(markPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.DataTransport.MarkResume> EndMarkResumeSearch(System.IAsyncResult result) {
            return base.Channel.EndMarkResumeSearch(result);
        }
        
        private System.IAsyncResult OnBeginMarkResumeSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate = ((Nimble.Business.Library.Model.Framework.Owner.MarkPredicate)(inValues[0]));
            return this.BeginMarkResumeSearch(markPredicate, callback, asyncState);
        }
        
        private object[] OnEndMarkResumeSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.DataTransport.MarkResume> retVal = this.EndMarkResumeSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkResumeSearchCompleted(object state) {
            if ((this.MarkResumeSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkResumeSearchCompleted(this, new MarkResumeSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkResumeSearchAsync(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate) {
            this.MarkResumeSearchAsync(markPredicate, null);
        }
        
        public void MarkResumeSearchAsync(Nimble.Business.Library.Model.Framework.Owner.MarkPredicate markPredicate, object userState) {
            if ((this.onBeginMarkResumeSearchDelegate == null)) {
                this.onBeginMarkResumeSearchDelegate = new BeginOperationDelegate(this.OnBeginMarkResumeSearch);
            }
            if ((this.onEndMarkResumeSearchDelegate == null)) {
                this.onEndMarkResumeSearchDelegate = new EndOperationDelegate(this.OnEndMarkResumeSearch);
            }
            if ((this.onMarkResumeSearchCompletedDelegate == null)) {
                this.onMarkResumeSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkResumeSearchCompleted);
            }
            base.InvokeAsync(this.onBeginMarkResumeSearchDelegate, new object[] {
                        markPredicate}, this.onEndMarkResumeSearchDelegate, this.onMarkResumeSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Organisation OrganisationCreate(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            return base.Channel.OrganisationCreate(organisation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOrganisationCreate(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOrganisationCreate(organisation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Organisation EndOrganisationCreate(System.IAsyncResult result) {
            return base.Channel.EndOrganisationCreate(result);
        }
        
        private System.IAsyncResult OnBeginOrganisationCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Organisation organisation = ((Nimble.Business.Library.Model.Framework.Owner.Organisation)(inValues[0]));
            return this.BeginOrganisationCreate(organisation, callback, asyncState);
        }
        
        private object[] OnEndOrganisationCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Organisation retVal = this.EndOrganisationCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOrganisationCreateCompleted(object state) {
            if ((this.OrganisationCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OrganisationCreateCompleted(this, new OrganisationCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OrganisationCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            this.OrganisationCreateAsync(organisation, null);
        }
        
        public void OrganisationCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, object userState) {
            if ((this.onBeginOrganisationCreateDelegate == null)) {
                this.onBeginOrganisationCreateDelegate = new BeginOperationDelegate(this.OnBeginOrganisationCreate);
            }
            if ((this.onEndOrganisationCreateDelegate == null)) {
                this.onEndOrganisationCreateDelegate = new EndOperationDelegate(this.OnEndOrganisationCreate);
            }
            if ((this.onOrganisationCreateCompletedDelegate == null)) {
                this.onOrganisationCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOrganisationCreateCompleted);
            }
            base.InvokeAsync(this.onBeginOrganisationCreateDelegate, new object[] {
                        organisation}, this.onEndOrganisationCreateDelegate, this.onOrganisationCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Organisation OrganisationRead(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            return base.Channel.OrganisationRead(organisation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOrganisationRead(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOrganisationRead(organisation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Organisation EndOrganisationRead(System.IAsyncResult result) {
            return base.Channel.EndOrganisationRead(result);
        }
        
        private System.IAsyncResult OnBeginOrganisationRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Organisation organisation = ((Nimble.Business.Library.Model.Framework.Owner.Organisation)(inValues[0]));
            return this.BeginOrganisationRead(organisation, callback, asyncState);
        }
        
        private object[] OnEndOrganisationRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Organisation retVal = this.EndOrganisationRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOrganisationReadCompleted(object state) {
            if ((this.OrganisationReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OrganisationReadCompleted(this, new OrganisationReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OrganisationReadAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            this.OrganisationReadAsync(organisation, null);
        }
        
        public void OrganisationReadAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, object userState) {
            if ((this.onBeginOrganisationReadDelegate == null)) {
                this.onBeginOrganisationReadDelegate = new BeginOperationDelegate(this.OnBeginOrganisationRead);
            }
            if ((this.onEndOrganisationReadDelegate == null)) {
                this.onEndOrganisationReadDelegate = new EndOperationDelegate(this.OnEndOrganisationRead);
            }
            if ((this.onOrganisationReadCompletedDelegate == null)) {
                this.onOrganisationReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOrganisationReadCompleted);
            }
            base.InvokeAsync(this.onBeginOrganisationReadDelegate, new object[] {
                        organisation}, this.onEndOrganisationReadDelegate, this.onOrganisationReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Organisation OrganisationUpdate(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            return base.Channel.OrganisationUpdate(organisation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOrganisationUpdate(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOrganisationUpdate(organisation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Organisation EndOrganisationUpdate(System.IAsyncResult result) {
            return base.Channel.EndOrganisationUpdate(result);
        }
        
        private System.IAsyncResult OnBeginOrganisationUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Organisation organisation = ((Nimble.Business.Library.Model.Framework.Owner.Organisation)(inValues[0]));
            return this.BeginOrganisationUpdate(organisation, callback, asyncState);
        }
        
        private object[] OnEndOrganisationUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Organisation retVal = this.EndOrganisationUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOrganisationUpdateCompleted(object state) {
            if ((this.OrganisationUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OrganisationUpdateCompleted(this, new OrganisationUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OrganisationUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            this.OrganisationUpdateAsync(organisation, null);
        }
        
        public void OrganisationUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, object userState) {
            if ((this.onBeginOrganisationUpdateDelegate == null)) {
                this.onBeginOrganisationUpdateDelegate = new BeginOperationDelegate(this.OnBeginOrganisationUpdate);
            }
            if ((this.onEndOrganisationUpdateDelegate == null)) {
                this.onEndOrganisationUpdateDelegate = new EndOperationDelegate(this.OnEndOrganisationUpdate);
            }
            if ((this.onOrganisationUpdateCompletedDelegate == null)) {
                this.onOrganisationUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOrganisationUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginOrganisationUpdateDelegate, new object[] {
                        organisation}, this.onEndOrganisationUpdateDelegate, this.onOrganisationUpdateCompletedDelegate, userState);
        }
        
        public bool OrganisationDelete(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            return base.Channel.OrganisationDelete(organisation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOrganisationDelete(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOrganisationDelete(organisation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndOrganisationDelete(System.IAsyncResult result) {
            return base.Channel.EndOrganisationDelete(result);
        }
        
        private System.IAsyncResult OnBeginOrganisationDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Organisation organisation = ((Nimble.Business.Library.Model.Framework.Owner.Organisation)(inValues[0]));
            return this.BeginOrganisationDelete(organisation, callback, asyncState);
        }
        
        private object[] OnEndOrganisationDelete(System.IAsyncResult result) {
            bool retVal = this.EndOrganisationDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOrganisationDeleteCompleted(object state) {
            if ((this.OrganisationDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OrganisationDeleteCompleted(this, new OrganisationDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OrganisationDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            this.OrganisationDeleteAsync(organisation, null);
        }
        
        public void OrganisationDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, object userState) {
            if ((this.onBeginOrganisationDeleteDelegate == null)) {
                this.onBeginOrganisationDeleteDelegate = new BeginOperationDelegate(this.OnBeginOrganisationDelete);
            }
            if ((this.onEndOrganisationDeleteDelegate == null)) {
                this.onEndOrganisationDeleteDelegate = new EndOperationDelegate(this.OnEndOrganisationDelete);
            }
            if ((this.onOrganisationDeleteCompletedDelegate == null)) {
                this.onOrganisationDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOrganisationDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginOrganisationDeleteDelegate, new object[] {
                        organisation}, this.onEndOrganisationDeleteDelegate, this.onOrganisationDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Organisation> OrganisationSearch(Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate organisationPredicate) {
            return base.Channel.OrganisationSearch(organisationPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOrganisationSearch(Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate organisationPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOrganisationSearch(organisationPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Organisation> EndOrganisationSearch(System.IAsyncResult result) {
            return base.Channel.EndOrganisationSearch(result);
        }
        
        private System.IAsyncResult OnBeginOrganisationSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate organisationPredicate = ((Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate)(inValues[0]));
            return this.BeginOrganisationSearch(organisationPredicate, callback, asyncState);
        }
        
        private object[] OnEndOrganisationSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Organisation> retVal = this.EndOrganisationSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOrganisationSearchCompleted(object state) {
            if ((this.OrganisationSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OrganisationSearchCompleted(this, new OrganisationSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OrganisationSearchAsync(Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate organisationPredicate) {
            this.OrganisationSearchAsync(organisationPredicate, null);
        }
        
        public void OrganisationSearchAsync(Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate organisationPredicate, object userState) {
            if ((this.onBeginOrganisationSearchDelegate == null)) {
                this.onBeginOrganisationSearchDelegate = new BeginOperationDelegate(this.OnBeginOrganisationSearch);
            }
            if ((this.onEndOrganisationSearchDelegate == null)) {
                this.onEndOrganisationSearchDelegate = new EndOperationDelegate(this.OnEndOrganisationSearch);
            }
            if ((this.onOrganisationSearchCompletedDelegate == null)) {
                this.onOrganisationSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOrganisationSearchCompleted);
            }
            base.InvokeAsync(this.onBeginOrganisationSearchDelegate, new object[] {
                        organisationPredicate}, this.onEndOrganisationSearchDelegate, this.onOrganisationSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit BranchSplitCreate(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit) {
            return base.Channel.BranchSplitCreate(branchSplit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchSplitCreate(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchSplitCreate(branchSplit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit EndBranchSplitCreate(System.IAsyncResult result) {
            return base.Channel.EndBranchSplitCreate(result);
        }
        
        private System.IAsyncResult OnBeginBranchSplitCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit = ((Nimble.Business.Library.Model.Framework.Owner.BranchSplit)(inValues[0]));
            return this.BeginBranchSplitCreate(branchSplit, callback, asyncState);
        }
        
        private object[] OnEndBranchSplitCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.BranchSplit retVal = this.EndBranchSplitCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchSplitCreateCompleted(object state) {
            if ((this.BranchSplitCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchSplitCreateCompleted(this, new BranchSplitCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchSplitCreateAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit) {
            this.BranchSplitCreateAsync(branchSplit, null);
        }
        
        public void BranchSplitCreateAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, object userState) {
            if ((this.onBeginBranchSplitCreateDelegate == null)) {
                this.onBeginBranchSplitCreateDelegate = new BeginOperationDelegate(this.OnBeginBranchSplitCreate);
            }
            if ((this.onEndBranchSplitCreateDelegate == null)) {
                this.onEndBranchSplitCreateDelegate = new EndOperationDelegate(this.OnEndBranchSplitCreate);
            }
            if ((this.onBranchSplitCreateCompletedDelegate == null)) {
                this.onBranchSplitCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchSplitCreateCompleted);
            }
            base.InvokeAsync(this.onBeginBranchSplitCreateDelegate, new object[] {
                        branchSplit}, this.onEndBranchSplitCreateDelegate, this.onBranchSplitCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit BranchSplitRead(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit) {
            return base.Channel.BranchSplitRead(branchSplit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchSplitRead(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchSplitRead(branchSplit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit EndBranchSplitRead(System.IAsyncResult result) {
            return base.Channel.EndBranchSplitRead(result);
        }
        
        private System.IAsyncResult OnBeginBranchSplitRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit = ((Nimble.Business.Library.Model.Framework.Owner.BranchSplit)(inValues[0]));
            return this.BeginBranchSplitRead(branchSplit, callback, asyncState);
        }
        
        private object[] OnEndBranchSplitRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.BranchSplit retVal = this.EndBranchSplitRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchSplitReadCompleted(object state) {
            if ((this.BranchSplitReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchSplitReadCompleted(this, new BranchSplitReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchSplitReadAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit) {
            this.BranchSplitReadAsync(branchSplit, null);
        }
        
        public void BranchSplitReadAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, object userState) {
            if ((this.onBeginBranchSplitReadDelegate == null)) {
                this.onBeginBranchSplitReadDelegate = new BeginOperationDelegate(this.OnBeginBranchSplitRead);
            }
            if ((this.onEndBranchSplitReadDelegate == null)) {
                this.onEndBranchSplitReadDelegate = new EndOperationDelegate(this.OnEndBranchSplitRead);
            }
            if ((this.onBranchSplitReadCompletedDelegate == null)) {
                this.onBranchSplitReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchSplitReadCompleted);
            }
            base.InvokeAsync(this.onBeginBranchSplitReadDelegate, new object[] {
                        branchSplit}, this.onEndBranchSplitReadDelegate, this.onBranchSplitReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit BranchSplitUpdate(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit) {
            return base.Channel.BranchSplitUpdate(branchSplit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchSplitUpdate(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchSplitUpdate(branchSplit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.BranchSplit EndBranchSplitUpdate(System.IAsyncResult result) {
            return base.Channel.EndBranchSplitUpdate(result);
        }
        
        private System.IAsyncResult OnBeginBranchSplitUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit = ((Nimble.Business.Library.Model.Framework.Owner.BranchSplit)(inValues[0]));
            return this.BeginBranchSplitUpdate(branchSplit, callback, asyncState);
        }
        
        private object[] OnEndBranchSplitUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.BranchSplit retVal = this.EndBranchSplitUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchSplitUpdateCompleted(object state) {
            if ((this.BranchSplitUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchSplitUpdateCompleted(this, new BranchSplitUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchSplitUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit) {
            this.BranchSplitUpdateAsync(branchSplit, null);
        }
        
        public void BranchSplitUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, object userState) {
            if ((this.onBeginBranchSplitUpdateDelegate == null)) {
                this.onBeginBranchSplitUpdateDelegate = new BeginOperationDelegate(this.OnBeginBranchSplitUpdate);
            }
            if ((this.onEndBranchSplitUpdateDelegate == null)) {
                this.onEndBranchSplitUpdateDelegate = new EndOperationDelegate(this.OnEndBranchSplitUpdate);
            }
            if ((this.onBranchSplitUpdateCompletedDelegate == null)) {
                this.onBranchSplitUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchSplitUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginBranchSplitUpdateDelegate, new object[] {
                        branchSplit}, this.onEndBranchSplitUpdateDelegate, this.onBranchSplitUpdateCompletedDelegate, userState);
        }
        
        public bool BranchSplitDelete(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit) {
            return base.Channel.BranchSplitDelete(branchSplit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchSplitDelete(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchSplitDelete(branchSplit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndBranchSplitDelete(System.IAsyncResult result) {
            return base.Channel.EndBranchSplitDelete(result);
        }
        
        private System.IAsyncResult OnBeginBranchSplitDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit = ((Nimble.Business.Library.Model.Framework.Owner.BranchSplit)(inValues[0]));
            return this.BeginBranchSplitDelete(branchSplit, callback, asyncState);
        }
        
        private object[] OnEndBranchSplitDelete(System.IAsyncResult result) {
            bool retVal = this.EndBranchSplitDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchSplitDeleteCompleted(object state) {
            if ((this.BranchSplitDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchSplitDeleteCompleted(this, new BranchSplitDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchSplitDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit) {
            this.BranchSplitDeleteAsync(branchSplit, null);
        }
        
        public void BranchSplitDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplit branchSplit, object userState) {
            if ((this.onBeginBranchSplitDeleteDelegate == null)) {
                this.onBeginBranchSplitDeleteDelegate = new BeginOperationDelegate(this.OnBeginBranchSplitDelete);
            }
            if ((this.onEndBranchSplitDeleteDelegate == null)) {
                this.onEndBranchSplitDeleteDelegate = new EndOperationDelegate(this.OnEndBranchSplitDelete);
            }
            if ((this.onBranchSplitDeleteCompletedDelegate == null)) {
                this.onBranchSplitDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchSplitDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginBranchSplitDeleteDelegate, new object[] {
                        branchSplit}, this.onEndBranchSplitDeleteDelegate, this.onBranchSplitDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchSplit> BranchSplitSearch(Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate branchSplitPredicate) {
            return base.Channel.BranchSplitSearch(branchSplitPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchSplitSearch(Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate branchSplitPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchSplitSearch(branchSplitPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchSplit> EndBranchSplitSearch(System.IAsyncResult result) {
            return base.Channel.EndBranchSplitSearch(result);
        }
        
        private System.IAsyncResult OnBeginBranchSplitSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate branchSplitPredicate = ((Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate)(inValues[0]));
            return this.BeginBranchSplitSearch(branchSplitPredicate, callback, asyncState);
        }
        
        private object[] OnEndBranchSplitSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchSplit> retVal = this.EndBranchSplitSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchSplitSearchCompleted(object state) {
            if ((this.BranchSplitSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchSplitSearchCompleted(this, new BranchSplitSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchSplitSearchAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate branchSplitPredicate) {
            this.BranchSplitSearchAsync(branchSplitPredicate, null);
        }
        
        public void BranchSplitSearchAsync(Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate branchSplitPredicate, object userState) {
            if ((this.onBeginBranchSplitSearchDelegate == null)) {
                this.onBeginBranchSplitSearchDelegate = new BeginOperationDelegate(this.OnBeginBranchSplitSearch);
            }
            if ((this.onEndBranchSplitSearchDelegate == null)) {
                this.onEndBranchSplitSearchDelegate = new EndOperationDelegate(this.OnEndBranchSplitSearch);
            }
            if ((this.onBranchSplitSearchCompletedDelegate == null)) {
                this.onBranchSplitSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchSplitSearchCompleted);
            }
            base.InvokeAsync(this.onBeginBranchSplitSearchDelegate, new object[] {
                        branchSplitPredicate}, this.onEndBranchSplitSearchDelegate, this.onBranchSplitSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup BranchGroupCreate(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup) {
            return base.Channel.BranchGroupCreate(branchGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchGroupCreate(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchGroupCreate(branchGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup EndBranchGroupCreate(System.IAsyncResult result) {
            return base.Channel.EndBranchGroupCreate(result);
        }
        
        private System.IAsyncResult OnBeginBranchGroupCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup = ((Nimble.Business.Library.Model.Framework.Owner.BranchGroup)(inValues[0]));
            return this.BeginBranchGroupCreate(branchGroup, callback, asyncState);
        }
        
        private object[] OnEndBranchGroupCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.BranchGroup retVal = this.EndBranchGroupCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchGroupCreateCompleted(object state) {
            if ((this.BranchGroupCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchGroupCreateCompleted(this, new BranchGroupCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchGroupCreateAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup) {
            this.BranchGroupCreateAsync(branchGroup, null);
        }
        
        public void BranchGroupCreateAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, object userState) {
            if ((this.onBeginBranchGroupCreateDelegate == null)) {
                this.onBeginBranchGroupCreateDelegate = new BeginOperationDelegate(this.OnBeginBranchGroupCreate);
            }
            if ((this.onEndBranchGroupCreateDelegate == null)) {
                this.onEndBranchGroupCreateDelegate = new EndOperationDelegate(this.OnEndBranchGroupCreate);
            }
            if ((this.onBranchGroupCreateCompletedDelegate == null)) {
                this.onBranchGroupCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchGroupCreateCompleted);
            }
            base.InvokeAsync(this.onBeginBranchGroupCreateDelegate, new object[] {
                        branchGroup}, this.onEndBranchGroupCreateDelegate, this.onBranchGroupCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup BranchGroupRead(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup) {
            return base.Channel.BranchGroupRead(branchGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchGroupRead(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchGroupRead(branchGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup EndBranchGroupRead(System.IAsyncResult result) {
            return base.Channel.EndBranchGroupRead(result);
        }
        
        private System.IAsyncResult OnBeginBranchGroupRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup = ((Nimble.Business.Library.Model.Framework.Owner.BranchGroup)(inValues[0]));
            return this.BeginBranchGroupRead(branchGroup, callback, asyncState);
        }
        
        private object[] OnEndBranchGroupRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.BranchGroup retVal = this.EndBranchGroupRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchGroupReadCompleted(object state) {
            if ((this.BranchGroupReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchGroupReadCompleted(this, new BranchGroupReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchGroupReadAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup) {
            this.BranchGroupReadAsync(branchGroup, null);
        }
        
        public void BranchGroupReadAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, object userState) {
            if ((this.onBeginBranchGroupReadDelegate == null)) {
                this.onBeginBranchGroupReadDelegate = new BeginOperationDelegate(this.OnBeginBranchGroupRead);
            }
            if ((this.onEndBranchGroupReadDelegate == null)) {
                this.onEndBranchGroupReadDelegate = new EndOperationDelegate(this.OnEndBranchGroupRead);
            }
            if ((this.onBranchGroupReadCompletedDelegate == null)) {
                this.onBranchGroupReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchGroupReadCompleted);
            }
            base.InvokeAsync(this.onBeginBranchGroupReadDelegate, new object[] {
                        branchGroup}, this.onEndBranchGroupReadDelegate, this.onBranchGroupReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup BranchGroupUpdate(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup) {
            return base.Channel.BranchGroupUpdate(branchGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchGroupUpdate(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchGroupUpdate(branchGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.BranchGroup EndBranchGroupUpdate(System.IAsyncResult result) {
            return base.Channel.EndBranchGroupUpdate(result);
        }
        
        private System.IAsyncResult OnBeginBranchGroupUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup = ((Nimble.Business.Library.Model.Framework.Owner.BranchGroup)(inValues[0]));
            return this.BeginBranchGroupUpdate(branchGroup, callback, asyncState);
        }
        
        private object[] OnEndBranchGroupUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.BranchGroup retVal = this.EndBranchGroupUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchGroupUpdateCompleted(object state) {
            if ((this.BranchGroupUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchGroupUpdateCompleted(this, new BranchGroupUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchGroupUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup) {
            this.BranchGroupUpdateAsync(branchGroup, null);
        }
        
        public void BranchGroupUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, object userState) {
            if ((this.onBeginBranchGroupUpdateDelegate == null)) {
                this.onBeginBranchGroupUpdateDelegate = new BeginOperationDelegate(this.OnBeginBranchGroupUpdate);
            }
            if ((this.onEndBranchGroupUpdateDelegate == null)) {
                this.onEndBranchGroupUpdateDelegate = new EndOperationDelegate(this.OnEndBranchGroupUpdate);
            }
            if ((this.onBranchGroupUpdateCompletedDelegate == null)) {
                this.onBranchGroupUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchGroupUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginBranchGroupUpdateDelegate, new object[] {
                        branchGroup}, this.onEndBranchGroupUpdateDelegate, this.onBranchGroupUpdateCompletedDelegate, userState);
        }
        
        public bool BranchGroupDelete(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup) {
            return base.Channel.BranchGroupDelete(branchGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchGroupDelete(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchGroupDelete(branchGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndBranchGroupDelete(System.IAsyncResult result) {
            return base.Channel.EndBranchGroupDelete(result);
        }
        
        private System.IAsyncResult OnBeginBranchGroupDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup = ((Nimble.Business.Library.Model.Framework.Owner.BranchGroup)(inValues[0]));
            return this.BeginBranchGroupDelete(branchGroup, callback, asyncState);
        }
        
        private object[] OnEndBranchGroupDelete(System.IAsyncResult result) {
            bool retVal = this.EndBranchGroupDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchGroupDeleteCompleted(object state) {
            if ((this.BranchGroupDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchGroupDeleteCompleted(this, new BranchGroupDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchGroupDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup) {
            this.BranchGroupDeleteAsync(branchGroup, null);
        }
        
        public void BranchGroupDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroup branchGroup, object userState) {
            if ((this.onBeginBranchGroupDeleteDelegate == null)) {
                this.onBeginBranchGroupDeleteDelegate = new BeginOperationDelegate(this.OnBeginBranchGroupDelete);
            }
            if ((this.onEndBranchGroupDeleteDelegate == null)) {
                this.onEndBranchGroupDeleteDelegate = new EndOperationDelegate(this.OnEndBranchGroupDelete);
            }
            if ((this.onBranchGroupDeleteCompletedDelegate == null)) {
                this.onBranchGroupDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchGroupDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginBranchGroupDeleteDelegate, new object[] {
                        branchGroup}, this.onEndBranchGroupDeleteDelegate, this.onBranchGroupDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchGroup> BranchGroupSearch(Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate branchGroupPredicate) {
            return base.Channel.BranchGroupSearch(branchGroupPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchGroupSearch(Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate branchGroupPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchGroupSearch(branchGroupPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchGroup> EndBranchGroupSearch(System.IAsyncResult result) {
            return base.Channel.EndBranchGroupSearch(result);
        }
        
        private System.IAsyncResult OnBeginBranchGroupSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate branchGroupPredicate = ((Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate)(inValues[0]));
            return this.BeginBranchGroupSearch(branchGroupPredicate, callback, asyncState);
        }
        
        private object[] OnEndBranchGroupSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchGroup> retVal = this.EndBranchGroupSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchGroupSearchCompleted(object state) {
            if ((this.BranchGroupSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchGroupSearchCompleted(this, new BranchGroupSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchGroupSearchAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate branchGroupPredicate) {
            this.BranchGroupSearchAsync(branchGroupPredicate, null);
        }
        
        public void BranchGroupSearchAsync(Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate branchGroupPredicate, object userState) {
            if ((this.onBeginBranchGroupSearchDelegate == null)) {
                this.onBeginBranchGroupSearchDelegate = new BeginOperationDelegate(this.OnBeginBranchGroupSearch);
            }
            if ((this.onEndBranchGroupSearchDelegate == null)) {
                this.onEndBranchGroupSearchDelegate = new EndOperationDelegate(this.OnEndBranchGroupSearch);
            }
            if ((this.onBranchGroupSearchCompletedDelegate == null)) {
                this.onBranchGroupSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchGroupSearchCompleted);
            }
            base.InvokeAsync(this.onBeginBranchGroupSearchDelegate, new object[] {
                        branchGroupPredicate}, this.onEndBranchGroupSearchDelegate, this.onBranchGroupSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.BranchBond BranchBondRead(Nimble.Business.Library.Model.Framework.Owner.BranchBond branchBond) {
            return base.Channel.BranchBondRead(branchBond);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchBondRead(Nimble.Business.Library.Model.Framework.Owner.BranchBond branchBond, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchBondRead(branchBond, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.BranchBond EndBranchBondRead(System.IAsyncResult result) {
            return base.Channel.EndBranchBondRead(result);
        }
        
        private System.IAsyncResult OnBeginBranchBondRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchBond branchBond = ((Nimble.Business.Library.Model.Framework.Owner.BranchBond)(inValues[0]));
            return this.BeginBranchBondRead(branchBond, callback, asyncState);
        }
        
        private object[] OnEndBranchBondRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.BranchBond retVal = this.EndBranchBondRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchBondReadCompleted(object state) {
            if ((this.BranchBondReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchBondReadCompleted(this, new BranchBondReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchBondReadAsync(Nimble.Business.Library.Model.Framework.Owner.BranchBond branchBond) {
            this.BranchBondReadAsync(branchBond, null);
        }
        
        public void BranchBondReadAsync(Nimble.Business.Library.Model.Framework.Owner.BranchBond branchBond, object userState) {
            if ((this.onBeginBranchBondReadDelegate == null)) {
                this.onBeginBranchBondReadDelegate = new BeginOperationDelegate(this.OnBeginBranchBondRead);
            }
            if ((this.onEndBranchBondReadDelegate == null)) {
                this.onEndBranchBondReadDelegate = new EndOperationDelegate(this.OnEndBranchBondRead);
            }
            if ((this.onBranchBondReadCompletedDelegate == null)) {
                this.onBranchBondReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchBondReadCompleted);
            }
            base.InvokeAsync(this.onBeginBranchBondReadDelegate, new object[] {
                        branchBond}, this.onEndBranchBondReadDelegate, this.onBranchBondReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchBond> BranchBondSearch(Nimble.Business.Library.Model.Framework.Owner.BranchBondPredicate branchBondPredicate) {
            return base.Channel.BranchBondSearch(branchBondPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchBondSearch(Nimble.Business.Library.Model.Framework.Owner.BranchBondPredicate branchBondPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchBondSearch(branchBondPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchBond> EndBranchBondSearch(System.IAsyncResult result) {
            return base.Channel.EndBranchBondSearch(result);
        }
        
        private System.IAsyncResult OnBeginBranchBondSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchBondPredicate branchBondPredicate = ((Nimble.Business.Library.Model.Framework.Owner.BranchBondPredicate)(inValues[0]));
            return this.BeginBranchBondSearch(branchBondPredicate, callback, asyncState);
        }
        
        private object[] OnEndBranchBondSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.BranchBond> retVal = this.EndBranchBondSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchBondSearchCompleted(object state) {
            if ((this.BranchBondSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchBondSearchCompleted(this, new BranchBondSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchBondSearchAsync(Nimble.Business.Library.Model.Framework.Owner.BranchBondPredicate branchBondPredicate) {
            this.BranchBondSearchAsync(branchBondPredicate, null);
        }
        
        public void BranchBondSearchAsync(Nimble.Business.Library.Model.Framework.Owner.BranchBondPredicate branchBondPredicate, object userState) {
            if ((this.onBeginBranchBondSearchDelegate == null)) {
                this.onBeginBranchBondSearchDelegate = new BeginOperationDelegate(this.OnBeginBranchBondSearch);
            }
            if ((this.onEndBranchBondSearchDelegate == null)) {
                this.onEndBranchBondSearchDelegate = new EndOperationDelegate(this.OnEndBranchBondSearch);
            }
            if ((this.onBranchBondSearchCompletedDelegate == null)) {
                this.onBranchBondSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchBondSearchCompleted);
            }
            base.InvokeAsync(this.onBeginBranchBondSearchDelegate, new object[] {
                        branchBondPredicate}, this.onEndBranchBondSearchDelegate, this.onBranchBondSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Branch BranchCreate(Nimble.Business.Library.Model.Framework.Owner.Branch branch) {
            return base.Channel.BranchCreate(branch);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchCreate(Nimble.Business.Library.Model.Framework.Owner.Branch branch, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchCreate(branch, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Branch EndBranchCreate(System.IAsyncResult result) {
            return base.Channel.EndBranchCreate(result);
        }
        
        private System.IAsyncResult OnBeginBranchCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Branch branch = ((Nimble.Business.Library.Model.Framework.Owner.Branch)(inValues[0]));
            return this.BeginBranchCreate(branch, callback, asyncState);
        }
        
        private object[] OnEndBranchCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Branch retVal = this.EndBranchCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchCreateCompleted(object state) {
            if ((this.BranchCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchCreateCompleted(this, new BranchCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Branch branch) {
            this.BranchCreateAsync(branch, null);
        }
        
        public void BranchCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Branch branch, object userState) {
            if ((this.onBeginBranchCreateDelegate == null)) {
                this.onBeginBranchCreateDelegate = new BeginOperationDelegate(this.OnBeginBranchCreate);
            }
            if ((this.onEndBranchCreateDelegate == null)) {
                this.onEndBranchCreateDelegate = new EndOperationDelegate(this.OnEndBranchCreate);
            }
            if ((this.onBranchCreateCompletedDelegate == null)) {
                this.onBranchCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchCreateCompleted);
            }
            base.InvokeAsync(this.onBeginBranchCreateDelegate, new object[] {
                        branch}, this.onEndBranchCreateDelegate, this.onBranchCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Branch BranchRead(Nimble.Business.Library.Model.Framework.Owner.Branch branch) {
            return base.Channel.BranchRead(branch);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchRead(Nimble.Business.Library.Model.Framework.Owner.Branch branch, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchRead(branch, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Branch EndBranchRead(System.IAsyncResult result) {
            return base.Channel.EndBranchRead(result);
        }
        
        private System.IAsyncResult OnBeginBranchRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Branch branch = ((Nimble.Business.Library.Model.Framework.Owner.Branch)(inValues[0]));
            return this.BeginBranchRead(branch, callback, asyncState);
        }
        
        private object[] OnEndBranchRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Branch retVal = this.EndBranchRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchReadCompleted(object state) {
            if ((this.BranchReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchReadCompleted(this, new BranchReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchReadAsync(Nimble.Business.Library.Model.Framework.Owner.Branch branch) {
            this.BranchReadAsync(branch, null);
        }
        
        public void BranchReadAsync(Nimble.Business.Library.Model.Framework.Owner.Branch branch, object userState) {
            if ((this.onBeginBranchReadDelegate == null)) {
                this.onBeginBranchReadDelegate = new BeginOperationDelegate(this.OnBeginBranchRead);
            }
            if ((this.onEndBranchReadDelegate == null)) {
                this.onEndBranchReadDelegate = new EndOperationDelegate(this.OnEndBranchRead);
            }
            if ((this.onBranchReadCompletedDelegate == null)) {
                this.onBranchReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchReadCompleted);
            }
            base.InvokeAsync(this.onBeginBranchReadDelegate, new object[] {
                        branch}, this.onEndBranchReadDelegate, this.onBranchReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Branch BranchUpdate(Nimble.Business.Library.Model.Framework.Owner.Branch branch) {
            return base.Channel.BranchUpdate(branch);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchUpdate(Nimble.Business.Library.Model.Framework.Owner.Branch branch, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchUpdate(branch, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Branch EndBranchUpdate(System.IAsyncResult result) {
            return base.Channel.EndBranchUpdate(result);
        }
        
        private System.IAsyncResult OnBeginBranchUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Branch branch = ((Nimble.Business.Library.Model.Framework.Owner.Branch)(inValues[0]));
            return this.BeginBranchUpdate(branch, callback, asyncState);
        }
        
        private object[] OnEndBranchUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Branch retVal = this.EndBranchUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchUpdateCompleted(object state) {
            if ((this.BranchUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchUpdateCompleted(this, new BranchUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Branch branch) {
            this.BranchUpdateAsync(branch, null);
        }
        
        public void BranchUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Branch branch, object userState) {
            if ((this.onBeginBranchUpdateDelegate == null)) {
                this.onBeginBranchUpdateDelegate = new BeginOperationDelegate(this.OnBeginBranchUpdate);
            }
            if ((this.onEndBranchUpdateDelegate == null)) {
                this.onEndBranchUpdateDelegate = new EndOperationDelegate(this.OnEndBranchUpdate);
            }
            if ((this.onBranchUpdateCompletedDelegate == null)) {
                this.onBranchUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginBranchUpdateDelegate, new object[] {
                        branch}, this.onEndBranchUpdateDelegate, this.onBranchUpdateCompletedDelegate, userState);
        }
        
        public bool BranchDelete(Nimble.Business.Library.Model.Framework.Owner.Branch branch) {
            return base.Channel.BranchDelete(branch);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchDelete(Nimble.Business.Library.Model.Framework.Owner.Branch branch, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchDelete(branch, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndBranchDelete(System.IAsyncResult result) {
            return base.Channel.EndBranchDelete(result);
        }
        
        private System.IAsyncResult OnBeginBranchDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Branch branch = ((Nimble.Business.Library.Model.Framework.Owner.Branch)(inValues[0]));
            return this.BeginBranchDelete(branch, callback, asyncState);
        }
        
        private object[] OnEndBranchDelete(System.IAsyncResult result) {
            bool retVal = this.EndBranchDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchDeleteCompleted(object state) {
            if ((this.BranchDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchDeleteCompleted(this, new BranchDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Branch branch) {
            this.BranchDeleteAsync(branch, null);
        }
        
        public void BranchDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Branch branch, object userState) {
            if ((this.onBeginBranchDeleteDelegate == null)) {
                this.onBeginBranchDeleteDelegate = new BeginOperationDelegate(this.OnBeginBranchDelete);
            }
            if ((this.onEndBranchDeleteDelegate == null)) {
                this.onEndBranchDeleteDelegate = new EndOperationDelegate(this.OnEndBranchDelete);
            }
            if ((this.onBranchDeleteCompletedDelegate == null)) {
                this.onBranchDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginBranchDeleteDelegate, new object[] {
                        branch}, this.onEndBranchDeleteDelegate, this.onBranchDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Branch> BranchSearch(Nimble.Business.Library.Model.Framework.Owner.BranchPredicate branchPredicate) {
            return base.Channel.BranchSearch(branchPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBranchSearch(Nimble.Business.Library.Model.Framework.Owner.BranchPredicate branchPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBranchSearch(branchPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Branch> EndBranchSearch(System.IAsyncResult result) {
            return base.Channel.EndBranchSearch(result);
        }
        
        private System.IAsyncResult OnBeginBranchSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.BranchPredicate branchPredicate = ((Nimble.Business.Library.Model.Framework.Owner.BranchPredicate)(inValues[0]));
            return this.BeginBranchSearch(branchPredicate, callback, asyncState);
        }
        
        private object[] OnEndBranchSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Branch> retVal = this.EndBranchSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBranchSearchCompleted(object state) {
            if ((this.BranchSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BranchSearchCompleted(this, new BranchSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BranchSearchAsync(Nimble.Business.Library.Model.Framework.Owner.BranchPredicate branchPredicate) {
            this.BranchSearchAsync(branchPredicate, null);
        }
        
        public void BranchSearchAsync(Nimble.Business.Library.Model.Framework.Owner.BranchPredicate branchPredicate, object userState) {
            if ((this.onBeginBranchSearchDelegate == null)) {
                this.onBeginBranchSearchDelegate = new BeginOperationDelegate(this.OnBeginBranchSearch);
            }
            if ((this.onEndBranchSearchDelegate == null)) {
                this.onEndBranchSearchDelegate = new EndOperationDelegate(this.OnEndBranchSearch);
            }
            if ((this.onBranchSearchCompletedDelegate == null)) {
                this.onBranchSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBranchSearchCompleted);
            }
            base.InvokeAsync(this.onBeginBranchSearchDelegate, new object[] {
                        branchPredicate}, this.onEndBranchSearchDelegate, this.onBranchSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Range RangeCreate(Nimble.Business.Library.Model.Framework.Owner.Range range) {
            return base.Channel.RangeCreate(range);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRangeCreate(Nimble.Business.Library.Model.Framework.Owner.Range range, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRangeCreate(range, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Range EndRangeCreate(System.IAsyncResult result) {
            return base.Channel.EndRangeCreate(result);
        }
        
        private System.IAsyncResult OnBeginRangeCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Range range = ((Nimble.Business.Library.Model.Framework.Owner.Range)(inValues[0]));
            return this.BeginRangeCreate(range, callback, asyncState);
        }
        
        private object[] OnEndRangeCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Range retVal = this.EndRangeCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRangeCreateCompleted(object state) {
            if ((this.RangeCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RangeCreateCompleted(this, new RangeCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RangeCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Range range) {
            this.RangeCreateAsync(range, null);
        }
        
        public void RangeCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Range range, object userState) {
            if ((this.onBeginRangeCreateDelegate == null)) {
                this.onBeginRangeCreateDelegate = new BeginOperationDelegate(this.OnBeginRangeCreate);
            }
            if ((this.onEndRangeCreateDelegate == null)) {
                this.onEndRangeCreateDelegate = new EndOperationDelegate(this.OnEndRangeCreate);
            }
            if ((this.onRangeCreateCompletedDelegate == null)) {
                this.onRangeCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRangeCreateCompleted);
            }
            base.InvokeAsync(this.onBeginRangeCreateDelegate, new object[] {
                        range}, this.onEndRangeCreateDelegate, this.onRangeCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Range RangeRead(Nimble.Business.Library.Model.Framework.Owner.Range range) {
            return base.Channel.RangeRead(range);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRangeRead(Nimble.Business.Library.Model.Framework.Owner.Range range, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRangeRead(range, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Range EndRangeRead(System.IAsyncResult result) {
            return base.Channel.EndRangeRead(result);
        }
        
        private System.IAsyncResult OnBeginRangeRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Range range = ((Nimble.Business.Library.Model.Framework.Owner.Range)(inValues[0]));
            return this.BeginRangeRead(range, callback, asyncState);
        }
        
        private object[] OnEndRangeRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Range retVal = this.EndRangeRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRangeReadCompleted(object state) {
            if ((this.RangeReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RangeReadCompleted(this, new RangeReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RangeReadAsync(Nimble.Business.Library.Model.Framework.Owner.Range range) {
            this.RangeReadAsync(range, null);
        }
        
        public void RangeReadAsync(Nimble.Business.Library.Model.Framework.Owner.Range range, object userState) {
            if ((this.onBeginRangeReadDelegate == null)) {
                this.onBeginRangeReadDelegate = new BeginOperationDelegate(this.OnBeginRangeRead);
            }
            if ((this.onEndRangeReadDelegate == null)) {
                this.onEndRangeReadDelegate = new EndOperationDelegate(this.OnEndRangeRead);
            }
            if ((this.onRangeReadCompletedDelegate == null)) {
                this.onRangeReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRangeReadCompleted);
            }
            base.InvokeAsync(this.onBeginRangeReadDelegate, new object[] {
                        range}, this.onEndRangeReadDelegate, this.onRangeReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Range RangeUpdate(Nimble.Business.Library.Model.Framework.Owner.Range range) {
            return base.Channel.RangeUpdate(range);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRangeUpdate(Nimble.Business.Library.Model.Framework.Owner.Range range, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRangeUpdate(range, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Range EndRangeUpdate(System.IAsyncResult result) {
            return base.Channel.EndRangeUpdate(result);
        }
        
        private System.IAsyncResult OnBeginRangeUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Range range = ((Nimble.Business.Library.Model.Framework.Owner.Range)(inValues[0]));
            return this.BeginRangeUpdate(range, callback, asyncState);
        }
        
        private object[] OnEndRangeUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Range retVal = this.EndRangeUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRangeUpdateCompleted(object state) {
            if ((this.RangeUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RangeUpdateCompleted(this, new RangeUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RangeUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Range range) {
            this.RangeUpdateAsync(range, null);
        }
        
        public void RangeUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Range range, object userState) {
            if ((this.onBeginRangeUpdateDelegate == null)) {
                this.onBeginRangeUpdateDelegate = new BeginOperationDelegate(this.OnBeginRangeUpdate);
            }
            if ((this.onEndRangeUpdateDelegate == null)) {
                this.onEndRangeUpdateDelegate = new EndOperationDelegate(this.OnEndRangeUpdate);
            }
            if ((this.onRangeUpdateCompletedDelegate == null)) {
                this.onRangeUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRangeUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginRangeUpdateDelegate, new object[] {
                        range}, this.onEndRangeUpdateDelegate, this.onRangeUpdateCompletedDelegate, userState);
        }
        
        public bool RangeDelete(Nimble.Business.Library.Model.Framework.Owner.Range range) {
            return base.Channel.RangeDelete(range);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRangeDelete(Nimble.Business.Library.Model.Framework.Owner.Range range, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRangeDelete(range, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRangeDelete(System.IAsyncResult result) {
            return base.Channel.EndRangeDelete(result);
        }
        
        private System.IAsyncResult OnBeginRangeDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Range range = ((Nimble.Business.Library.Model.Framework.Owner.Range)(inValues[0]));
            return this.BeginRangeDelete(range, callback, asyncState);
        }
        
        private object[] OnEndRangeDelete(System.IAsyncResult result) {
            bool retVal = this.EndRangeDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRangeDeleteCompleted(object state) {
            if ((this.RangeDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RangeDeleteCompleted(this, new RangeDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RangeDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Range range) {
            this.RangeDeleteAsync(range, null);
        }
        
        public void RangeDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Range range, object userState) {
            if ((this.onBeginRangeDeleteDelegate == null)) {
                this.onBeginRangeDeleteDelegate = new BeginOperationDelegate(this.OnBeginRangeDelete);
            }
            if ((this.onEndRangeDeleteDelegate == null)) {
                this.onEndRangeDeleteDelegate = new EndOperationDelegate(this.OnEndRangeDelete);
            }
            if ((this.onRangeDeleteCompletedDelegate == null)) {
                this.onRangeDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRangeDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginRangeDeleteDelegate, new object[] {
                        range}, this.onEndRangeDeleteDelegate, this.onRangeDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Range> RangeSearch(Nimble.Business.Library.Model.Framework.Owner.RangePredicate rangePredicate) {
            return base.Channel.RangeSearch(rangePredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRangeSearch(Nimble.Business.Library.Model.Framework.Owner.RangePredicate rangePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRangeSearch(rangePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Range> EndRangeSearch(System.IAsyncResult result) {
            return base.Channel.EndRangeSearch(result);
        }
        
        private System.IAsyncResult OnBeginRangeSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.RangePredicate rangePredicate = ((Nimble.Business.Library.Model.Framework.Owner.RangePredicate)(inValues[0]));
            return this.BeginRangeSearch(rangePredicate, callback, asyncState);
        }
        
        private object[] OnEndRangeSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Range> retVal = this.EndRangeSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRangeSearchCompleted(object state) {
            if ((this.RangeSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RangeSearchCompleted(this, new RangeSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RangeSearchAsync(Nimble.Business.Library.Model.Framework.Owner.RangePredicate rangePredicate) {
            this.RangeSearchAsync(rangePredicate, null);
        }
        
        public void RangeSearchAsync(Nimble.Business.Library.Model.Framework.Owner.RangePredicate rangePredicate, object userState) {
            if ((this.onBeginRangeSearchDelegate == null)) {
                this.onBeginRangeSearchDelegate = new BeginOperationDelegate(this.OnBeginRangeSearch);
            }
            if ((this.onEndRangeSearchDelegate == null)) {
                this.onEndRangeSearchDelegate = new EndOperationDelegate(this.OnEndRangeSearch);
            }
            if ((this.onRangeSearchCompletedDelegate == null)) {
                this.onRangeSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRangeSearchCompleted);
            }
            base.InvokeAsync(this.onBeginRangeSearchDelegate, new object[] {
                        rangePredicate}, this.onEndRangeSearchDelegate, this.onRangeSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee EmployeeCreate(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            return base.Channel.EmployeeCreate(employee);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEmployeeCreate(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEmployeeCreate(employee, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Employee EndEmployeeCreate(System.IAsyncResult result) {
            return base.Channel.EndEmployeeCreate(result);
        }
        
        private System.IAsyncResult OnBeginEmployeeCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Employee employee = ((Nimble.Business.Library.Model.Framework.Owner.Employee)(inValues[0]));
            return this.BeginEmployeeCreate(employee, callback, asyncState);
        }
        
        private object[] OnEndEmployeeCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Employee retVal = this.EndEmployeeCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEmployeeCreateCompleted(object state) {
            if ((this.EmployeeCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EmployeeCreateCompleted(this, new EmployeeCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EmployeeCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            this.EmployeeCreateAsync(employee, null);
        }
        
        public void EmployeeCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee, object userState) {
            if ((this.onBeginEmployeeCreateDelegate == null)) {
                this.onBeginEmployeeCreateDelegate = new BeginOperationDelegate(this.OnBeginEmployeeCreate);
            }
            if ((this.onEndEmployeeCreateDelegate == null)) {
                this.onEndEmployeeCreateDelegate = new EndOperationDelegate(this.OnEndEmployeeCreate);
            }
            if ((this.onEmployeeCreateCompletedDelegate == null)) {
                this.onEmployeeCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEmployeeCreateCompleted);
            }
            base.InvokeAsync(this.onBeginEmployeeCreateDelegate, new object[] {
                        employee}, this.onEndEmployeeCreateDelegate, this.onEmployeeCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee EmployeeRead(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            return base.Channel.EmployeeRead(employee);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEmployeeRead(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEmployeeRead(employee, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Employee EndEmployeeRead(System.IAsyncResult result) {
            return base.Channel.EndEmployeeRead(result);
        }
        
        private System.IAsyncResult OnBeginEmployeeRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Employee employee = ((Nimble.Business.Library.Model.Framework.Owner.Employee)(inValues[0]));
            return this.BeginEmployeeRead(employee, callback, asyncState);
        }
        
        private object[] OnEndEmployeeRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Employee retVal = this.EndEmployeeRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEmployeeReadCompleted(object state) {
            if ((this.EmployeeReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EmployeeReadCompleted(this, new EmployeeReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EmployeeReadAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            this.EmployeeReadAsync(employee, null);
        }
        
        public void EmployeeReadAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee, object userState) {
            if ((this.onBeginEmployeeReadDelegate == null)) {
                this.onBeginEmployeeReadDelegate = new BeginOperationDelegate(this.OnBeginEmployeeRead);
            }
            if ((this.onEndEmployeeReadDelegate == null)) {
                this.onEndEmployeeReadDelegate = new EndOperationDelegate(this.OnEndEmployeeRead);
            }
            if ((this.onEmployeeReadCompletedDelegate == null)) {
                this.onEmployeeReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEmployeeReadCompleted);
            }
            base.InvokeAsync(this.onBeginEmployeeReadDelegate, new object[] {
                        employee}, this.onEndEmployeeReadDelegate, this.onEmployeeReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee EmployeeUpdate(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            return base.Channel.EmployeeUpdate(employee);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEmployeeUpdate(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEmployeeUpdate(employee, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Employee EndEmployeeUpdate(System.IAsyncResult result) {
            return base.Channel.EndEmployeeUpdate(result);
        }
        
        private System.IAsyncResult OnBeginEmployeeUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Employee employee = ((Nimble.Business.Library.Model.Framework.Owner.Employee)(inValues[0]));
            return this.BeginEmployeeUpdate(employee, callback, asyncState);
        }
        
        private object[] OnEndEmployeeUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Employee retVal = this.EndEmployeeUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEmployeeUpdateCompleted(object state) {
            if ((this.EmployeeUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EmployeeUpdateCompleted(this, new EmployeeUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EmployeeUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            this.EmployeeUpdateAsync(employee, null);
        }
        
        public void EmployeeUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee, object userState) {
            if ((this.onBeginEmployeeUpdateDelegate == null)) {
                this.onBeginEmployeeUpdateDelegate = new BeginOperationDelegate(this.OnBeginEmployeeUpdate);
            }
            if ((this.onEndEmployeeUpdateDelegate == null)) {
                this.onEndEmployeeUpdateDelegate = new EndOperationDelegate(this.OnEndEmployeeUpdate);
            }
            if ((this.onEmployeeUpdateCompletedDelegate == null)) {
                this.onEmployeeUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEmployeeUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginEmployeeUpdateDelegate, new object[] {
                        employee}, this.onEndEmployeeUpdateDelegate, this.onEmployeeUpdateCompletedDelegate, userState);
        }
        
        public bool EmployeeDelete(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            return base.Channel.EmployeeDelete(employee);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEmployeeDelete(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEmployeeDelete(employee, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndEmployeeDelete(System.IAsyncResult result) {
            return base.Channel.EndEmployeeDelete(result);
        }
        
        private System.IAsyncResult OnBeginEmployeeDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Employee employee = ((Nimble.Business.Library.Model.Framework.Owner.Employee)(inValues[0]));
            return this.BeginEmployeeDelete(employee, callback, asyncState);
        }
        
        private object[] OnEndEmployeeDelete(System.IAsyncResult result) {
            bool retVal = this.EndEmployeeDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEmployeeDeleteCompleted(object state) {
            if ((this.EmployeeDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EmployeeDeleteCompleted(this, new EmployeeDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EmployeeDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            this.EmployeeDeleteAsync(employee, null);
        }
        
        public void EmployeeDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee, object userState) {
            if ((this.onBeginEmployeeDeleteDelegate == null)) {
                this.onBeginEmployeeDeleteDelegate = new BeginOperationDelegate(this.OnBeginEmployeeDelete);
            }
            if ((this.onEndEmployeeDeleteDelegate == null)) {
                this.onEndEmployeeDeleteDelegate = new EndOperationDelegate(this.OnEndEmployeeDelete);
            }
            if ((this.onEmployeeDeleteCompletedDelegate == null)) {
                this.onEmployeeDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEmployeeDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginEmployeeDeleteDelegate, new object[] {
                        employee}, this.onEndEmployeeDeleteDelegate, this.onEmployeeDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Employee> EmployeeSearch(Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate employeePredicate) {
            return base.Channel.EmployeeSearch(employeePredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEmployeeSearch(Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate employeePredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEmployeeSearch(employeePredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Employee> EndEmployeeSearch(System.IAsyncResult result) {
            return base.Channel.EndEmployeeSearch(result);
        }
        
        private System.IAsyncResult OnBeginEmployeeSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate employeePredicate = ((Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate)(inValues[0]));
            return this.BeginEmployeeSearch(employeePredicate, callback, asyncState);
        }
        
        private object[] OnEndEmployeeSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Employee> retVal = this.EndEmployeeSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEmployeeSearchCompleted(object state) {
            if ((this.EmployeeSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EmployeeSearchCompleted(this, new EmployeeSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EmployeeSearchAsync(Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate employeePredicate) {
            this.EmployeeSearchAsync(employeePredicate, null);
        }
        
        public void EmployeeSearchAsync(Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate employeePredicate, object userState) {
            if ((this.onBeginEmployeeSearchDelegate == null)) {
                this.onBeginEmployeeSearchDelegate = new BeginOperationDelegate(this.OnBeginEmployeeSearch);
            }
            if ((this.onEndEmployeeSearchDelegate == null)) {
                this.onEndEmployeeSearchDelegate = new EndOperationDelegate(this.OnEndEmployeeSearch);
            }
            if ((this.onEmployeeSearchCompletedDelegate == null)) {
                this.onEmployeeSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEmployeeSearchCompleted);
            }
            base.InvokeAsync(this.onBeginEmployeeSearchDelegate, new object[] {
                        employeePredicate}, this.onEndEmployeeSearchDelegate, this.onEmployeeSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit PostSplitCreate(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit) {
            return base.Channel.PostSplitCreate(postSplit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostSplitCreate(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostSplitCreate(postSplit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit EndPostSplitCreate(System.IAsyncResult result) {
            return base.Channel.EndPostSplitCreate(result);
        }
        
        private System.IAsyncResult OnBeginPostSplitCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit = ((Nimble.Business.Library.Model.Framework.Owner.PostSplit)(inValues[0]));
            return this.BeginPostSplitCreate(postSplit, callback, asyncState);
        }
        
        private object[] OnEndPostSplitCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.PostSplit retVal = this.EndPostSplitCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostSplitCreateCompleted(object state) {
            if ((this.PostSplitCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostSplitCreateCompleted(this, new PostSplitCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostSplitCreateAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit) {
            this.PostSplitCreateAsync(postSplit, null);
        }
        
        public void PostSplitCreateAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, object userState) {
            if ((this.onBeginPostSplitCreateDelegate == null)) {
                this.onBeginPostSplitCreateDelegate = new BeginOperationDelegate(this.OnBeginPostSplitCreate);
            }
            if ((this.onEndPostSplitCreateDelegate == null)) {
                this.onEndPostSplitCreateDelegate = new EndOperationDelegate(this.OnEndPostSplitCreate);
            }
            if ((this.onPostSplitCreateCompletedDelegate == null)) {
                this.onPostSplitCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostSplitCreateCompleted);
            }
            base.InvokeAsync(this.onBeginPostSplitCreateDelegate, new object[] {
                        postSplit}, this.onEndPostSplitCreateDelegate, this.onPostSplitCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit PostSplitRead(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit) {
            return base.Channel.PostSplitRead(postSplit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostSplitRead(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostSplitRead(postSplit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit EndPostSplitRead(System.IAsyncResult result) {
            return base.Channel.EndPostSplitRead(result);
        }
        
        private System.IAsyncResult OnBeginPostSplitRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit = ((Nimble.Business.Library.Model.Framework.Owner.PostSplit)(inValues[0]));
            return this.BeginPostSplitRead(postSplit, callback, asyncState);
        }
        
        private object[] OnEndPostSplitRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.PostSplit retVal = this.EndPostSplitRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostSplitReadCompleted(object state) {
            if ((this.PostSplitReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostSplitReadCompleted(this, new PostSplitReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostSplitReadAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit) {
            this.PostSplitReadAsync(postSplit, null);
        }
        
        public void PostSplitReadAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, object userState) {
            if ((this.onBeginPostSplitReadDelegate == null)) {
                this.onBeginPostSplitReadDelegate = new BeginOperationDelegate(this.OnBeginPostSplitRead);
            }
            if ((this.onEndPostSplitReadDelegate == null)) {
                this.onEndPostSplitReadDelegate = new EndOperationDelegate(this.OnEndPostSplitRead);
            }
            if ((this.onPostSplitReadCompletedDelegate == null)) {
                this.onPostSplitReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostSplitReadCompleted);
            }
            base.InvokeAsync(this.onBeginPostSplitReadDelegate, new object[] {
                        postSplit}, this.onEndPostSplitReadDelegate, this.onPostSplitReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit PostSplitUpdate(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit) {
            return base.Channel.PostSplitUpdate(postSplit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostSplitUpdate(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostSplitUpdate(postSplit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.PostSplit EndPostSplitUpdate(System.IAsyncResult result) {
            return base.Channel.EndPostSplitUpdate(result);
        }
        
        private System.IAsyncResult OnBeginPostSplitUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit = ((Nimble.Business.Library.Model.Framework.Owner.PostSplit)(inValues[0]));
            return this.BeginPostSplitUpdate(postSplit, callback, asyncState);
        }
        
        private object[] OnEndPostSplitUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.PostSplit retVal = this.EndPostSplitUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostSplitUpdateCompleted(object state) {
            if ((this.PostSplitUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostSplitUpdateCompleted(this, new PostSplitUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostSplitUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit) {
            this.PostSplitUpdateAsync(postSplit, null);
        }
        
        public void PostSplitUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, object userState) {
            if ((this.onBeginPostSplitUpdateDelegate == null)) {
                this.onBeginPostSplitUpdateDelegate = new BeginOperationDelegate(this.OnBeginPostSplitUpdate);
            }
            if ((this.onEndPostSplitUpdateDelegate == null)) {
                this.onEndPostSplitUpdateDelegate = new EndOperationDelegate(this.OnEndPostSplitUpdate);
            }
            if ((this.onPostSplitUpdateCompletedDelegate == null)) {
                this.onPostSplitUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostSplitUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginPostSplitUpdateDelegate, new object[] {
                        postSplit}, this.onEndPostSplitUpdateDelegate, this.onPostSplitUpdateCompletedDelegate, userState);
        }
        
        public bool PostSplitDelete(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit) {
            return base.Channel.PostSplitDelete(postSplit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostSplitDelete(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostSplitDelete(postSplit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPostSplitDelete(System.IAsyncResult result) {
            return base.Channel.EndPostSplitDelete(result);
        }
        
        private System.IAsyncResult OnBeginPostSplitDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit = ((Nimble.Business.Library.Model.Framework.Owner.PostSplit)(inValues[0]));
            return this.BeginPostSplitDelete(postSplit, callback, asyncState);
        }
        
        private object[] OnEndPostSplitDelete(System.IAsyncResult result) {
            bool retVal = this.EndPostSplitDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostSplitDeleteCompleted(object state) {
            if ((this.PostSplitDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostSplitDeleteCompleted(this, new PostSplitDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostSplitDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit) {
            this.PostSplitDeleteAsync(postSplit, null);
        }
        
        public void PostSplitDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplit postSplit, object userState) {
            if ((this.onBeginPostSplitDeleteDelegate == null)) {
                this.onBeginPostSplitDeleteDelegate = new BeginOperationDelegate(this.OnBeginPostSplitDelete);
            }
            if ((this.onEndPostSplitDeleteDelegate == null)) {
                this.onEndPostSplitDeleteDelegate = new EndOperationDelegate(this.OnEndPostSplitDelete);
            }
            if ((this.onPostSplitDeleteCompletedDelegate == null)) {
                this.onPostSplitDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostSplitDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginPostSplitDeleteDelegate, new object[] {
                        postSplit}, this.onEndPostSplitDeleteDelegate, this.onPostSplitDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostSplit> PostSplitSearch(Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate postSplitPredicate) {
            return base.Channel.PostSplitSearch(postSplitPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostSplitSearch(Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate postSplitPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostSplitSearch(postSplitPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostSplit> EndPostSplitSearch(System.IAsyncResult result) {
            return base.Channel.EndPostSplitSearch(result);
        }
        
        private System.IAsyncResult OnBeginPostSplitSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate postSplitPredicate = ((Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate)(inValues[0]));
            return this.BeginPostSplitSearch(postSplitPredicate, callback, asyncState);
        }
        
        private object[] OnEndPostSplitSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostSplit> retVal = this.EndPostSplitSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostSplitSearchCompleted(object state) {
            if ((this.PostSplitSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostSplitSearchCompleted(this, new PostSplitSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostSplitSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate postSplitPredicate) {
            this.PostSplitSearchAsync(postSplitPredicate, null);
        }
        
        public void PostSplitSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate postSplitPredicate, object userState) {
            if ((this.onBeginPostSplitSearchDelegate == null)) {
                this.onBeginPostSplitSearchDelegate = new BeginOperationDelegate(this.OnBeginPostSplitSearch);
            }
            if ((this.onEndPostSplitSearchDelegate == null)) {
                this.onEndPostSplitSearchDelegate = new EndOperationDelegate(this.OnEndPostSplitSearch);
            }
            if ((this.onPostSplitSearchCompletedDelegate == null)) {
                this.onPostSplitSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostSplitSearchCompleted);
            }
            base.InvokeAsync(this.onBeginPostSplitSearchDelegate, new object[] {
                        postSplitPredicate}, this.onEndPostSplitSearchDelegate, this.onPostSplitSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup PostGroupCreate(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup) {
            return base.Channel.PostGroupCreate(postGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostGroupCreate(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostGroupCreate(postGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup EndPostGroupCreate(System.IAsyncResult result) {
            return base.Channel.EndPostGroupCreate(result);
        }
        
        private System.IAsyncResult OnBeginPostGroupCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup = ((Nimble.Business.Library.Model.Framework.Owner.PostGroup)(inValues[0]));
            return this.BeginPostGroupCreate(postGroup, callback, asyncState);
        }
        
        private object[] OnEndPostGroupCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.PostGroup retVal = this.EndPostGroupCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostGroupCreateCompleted(object state) {
            if ((this.PostGroupCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostGroupCreateCompleted(this, new PostGroupCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostGroupCreateAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup) {
            this.PostGroupCreateAsync(postGroup, null);
        }
        
        public void PostGroupCreateAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, object userState) {
            if ((this.onBeginPostGroupCreateDelegate == null)) {
                this.onBeginPostGroupCreateDelegate = new BeginOperationDelegate(this.OnBeginPostGroupCreate);
            }
            if ((this.onEndPostGroupCreateDelegate == null)) {
                this.onEndPostGroupCreateDelegate = new EndOperationDelegate(this.OnEndPostGroupCreate);
            }
            if ((this.onPostGroupCreateCompletedDelegate == null)) {
                this.onPostGroupCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostGroupCreateCompleted);
            }
            base.InvokeAsync(this.onBeginPostGroupCreateDelegate, new object[] {
                        postGroup}, this.onEndPostGroupCreateDelegate, this.onPostGroupCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup PostGroupRead(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup) {
            return base.Channel.PostGroupRead(postGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostGroupRead(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostGroupRead(postGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup EndPostGroupRead(System.IAsyncResult result) {
            return base.Channel.EndPostGroupRead(result);
        }
        
        private System.IAsyncResult OnBeginPostGroupRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup = ((Nimble.Business.Library.Model.Framework.Owner.PostGroup)(inValues[0]));
            return this.BeginPostGroupRead(postGroup, callback, asyncState);
        }
        
        private object[] OnEndPostGroupRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.PostGroup retVal = this.EndPostGroupRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostGroupReadCompleted(object state) {
            if ((this.PostGroupReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostGroupReadCompleted(this, new PostGroupReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostGroupReadAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup) {
            this.PostGroupReadAsync(postGroup, null);
        }
        
        public void PostGroupReadAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, object userState) {
            if ((this.onBeginPostGroupReadDelegate == null)) {
                this.onBeginPostGroupReadDelegate = new BeginOperationDelegate(this.OnBeginPostGroupRead);
            }
            if ((this.onEndPostGroupReadDelegate == null)) {
                this.onEndPostGroupReadDelegate = new EndOperationDelegate(this.OnEndPostGroupRead);
            }
            if ((this.onPostGroupReadCompletedDelegate == null)) {
                this.onPostGroupReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostGroupReadCompleted);
            }
            base.InvokeAsync(this.onBeginPostGroupReadDelegate, new object[] {
                        postGroup}, this.onEndPostGroupReadDelegate, this.onPostGroupReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup PostGroupUpdate(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup) {
            return base.Channel.PostGroupUpdate(postGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostGroupUpdate(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostGroupUpdate(postGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.PostGroup EndPostGroupUpdate(System.IAsyncResult result) {
            return base.Channel.EndPostGroupUpdate(result);
        }
        
        private System.IAsyncResult OnBeginPostGroupUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup = ((Nimble.Business.Library.Model.Framework.Owner.PostGroup)(inValues[0]));
            return this.BeginPostGroupUpdate(postGroup, callback, asyncState);
        }
        
        private object[] OnEndPostGroupUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.PostGroup retVal = this.EndPostGroupUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostGroupUpdateCompleted(object state) {
            if ((this.PostGroupUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostGroupUpdateCompleted(this, new PostGroupUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostGroupUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup) {
            this.PostGroupUpdateAsync(postGroup, null);
        }
        
        public void PostGroupUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, object userState) {
            if ((this.onBeginPostGroupUpdateDelegate == null)) {
                this.onBeginPostGroupUpdateDelegate = new BeginOperationDelegate(this.OnBeginPostGroupUpdate);
            }
            if ((this.onEndPostGroupUpdateDelegate == null)) {
                this.onEndPostGroupUpdateDelegate = new EndOperationDelegate(this.OnEndPostGroupUpdate);
            }
            if ((this.onPostGroupUpdateCompletedDelegate == null)) {
                this.onPostGroupUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostGroupUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginPostGroupUpdateDelegate, new object[] {
                        postGroup}, this.onEndPostGroupUpdateDelegate, this.onPostGroupUpdateCompletedDelegate, userState);
        }
        
        public bool PostGroupDelete(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup) {
            return base.Channel.PostGroupDelete(postGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostGroupDelete(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostGroupDelete(postGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPostGroupDelete(System.IAsyncResult result) {
            return base.Channel.EndPostGroupDelete(result);
        }
        
        private System.IAsyncResult OnBeginPostGroupDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup = ((Nimble.Business.Library.Model.Framework.Owner.PostGroup)(inValues[0]));
            return this.BeginPostGroupDelete(postGroup, callback, asyncState);
        }
        
        private object[] OnEndPostGroupDelete(System.IAsyncResult result) {
            bool retVal = this.EndPostGroupDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostGroupDeleteCompleted(object state) {
            if ((this.PostGroupDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostGroupDeleteCompleted(this, new PostGroupDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostGroupDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup) {
            this.PostGroupDeleteAsync(postGroup, null);
        }
        
        public void PostGroupDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroup postGroup, object userState) {
            if ((this.onBeginPostGroupDeleteDelegate == null)) {
                this.onBeginPostGroupDeleteDelegate = new BeginOperationDelegate(this.OnBeginPostGroupDelete);
            }
            if ((this.onEndPostGroupDeleteDelegate == null)) {
                this.onEndPostGroupDeleteDelegate = new EndOperationDelegate(this.OnEndPostGroupDelete);
            }
            if ((this.onPostGroupDeleteCompletedDelegate == null)) {
                this.onPostGroupDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostGroupDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginPostGroupDeleteDelegate, new object[] {
                        postGroup}, this.onEndPostGroupDeleteDelegate, this.onPostGroupDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostGroup> PostGroupSearch(Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate postGroupPredicate) {
            return base.Channel.PostGroupSearch(postGroupPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostGroupSearch(Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate postGroupPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostGroupSearch(postGroupPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostGroup> EndPostGroupSearch(System.IAsyncResult result) {
            return base.Channel.EndPostGroupSearch(result);
        }
        
        private System.IAsyncResult OnBeginPostGroupSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate postGroupPredicate = ((Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate)(inValues[0]));
            return this.BeginPostGroupSearch(postGroupPredicate, callback, asyncState);
        }
        
        private object[] OnEndPostGroupSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostGroup> retVal = this.EndPostGroupSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostGroupSearchCompleted(object state) {
            if ((this.PostGroupSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostGroupSearchCompleted(this, new PostGroupSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostGroupSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate postGroupPredicate) {
            this.PostGroupSearchAsync(postGroupPredicate, null);
        }
        
        public void PostGroupSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate postGroupPredicate, object userState) {
            if ((this.onBeginPostGroupSearchDelegate == null)) {
                this.onBeginPostGroupSearchDelegate = new BeginOperationDelegate(this.OnBeginPostGroupSearch);
            }
            if ((this.onEndPostGroupSearchDelegate == null)) {
                this.onEndPostGroupSearchDelegate = new EndOperationDelegate(this.OnEndPostGroupSearch);
            }
            if ((this.onPostGroupSearchCompletedDelegate == null)) {
                this.onPostGroupSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostGroupSearchCompleted);
            }
            base.InvokeAsync(this.onBeginPostGroupSearchDelegate, new object[] {
                        postGroupPredicate}, this.onEndPostGroupSearchDelegate, this.onPostGroupSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.PostBond PostBondRead(Nimble.Business.Library.Model.Framework.Owner.PostBond postBond) {
            return base.Channel.PostBondRead(postBond);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostBondRead(Nimble.Business.Library.Model.Framework.Owner.PostBond postBond, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostBondRead(postBond, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.PostBond EndPostBondRead(System.IAsyncResult result) {
            return base.Channel.EndPostBondRead(result);
        }
        
        private System.IAsyncResult OnBeginPostBondRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostBond postBond = ((Nimble.Business.Library.Model.Framework.Owner.PostBond)(inValues[0]));
            return this.BeginPostBondRead(postBond, callback, asyncState);
        }
        
        private object[] OnEndPostBondRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.PostBond retVal = this.EndPostBondRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostBondReadCompleted(object state) {
            if ((this.PostBondReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostBondReadCompleted(this, new PostBondReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostBondReadAsync(Nimble.Business.Library.Model.Framework.Owner.PostBond postBond) {
            this.PostBondReadAsync(postBond, null);
        }
        
        public void PostBondReadAsync(Nimble.Business.Library.Model.Framework.Owner.PostBond postBond, object userState) {
            if ((this.onBeginPostBondReadDelegate == null)) {
                this.onBeginPostBondReadDelegate = new BeginOperationDelegate(this.OnBeginPostBondRead);
            }
            if ((this.onEndPostBondReadDelegate == null)) {
                this.onEndPostBondReadDelegate = new EndOperationDelegate(this.OnEndPostBondRead);
            }
            if ((this.onPostBondReadCompletedDelegate == null)) {
                this.onPostBondReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostBondReadCompleted);
            }
            base.InvokeAsync(this.onBeginPostBondReadDelegate, new object[] {
                        postBond}, this.onEndPostBondReadDelegate, this.onPostBondReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostBond> PostBondSearch(Nimble.Business.Library.Model.Framework.Owner.PostBondPredicate postBondPredicate) {
            return base.Channel.PostBondSearch(postBondPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostBondSearch(Nimble.Business.Library.Model.Framework.Owner.PostBondPredicate postBondPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostBondSearch(postBondPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostBond> EndPostBondSearch(System.IAsyncResult result) {
            return base.Channel.EndPostBondSearch(result);
        }
        
        private System.IAsyncResult OnBeginPostBondSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostBondPredicate postBondPredicate = ((Nimble.Business.Library.Model.Framework.Owner.PostBondPredicate)(inValues[0]));
            return this.BeginPostBondSearch(postBondPredicate, callback, asyncState);
        }
        
        private object[] OnEndPostBondSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.PostBond> retVal = this.EndPostBondSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostBondSearchCompleted(object state) {
            if ((this.PostBondSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostBondSearchCompleted(this, new PostBondSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostBondSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PostBondPredicate postBondPredicate) {
            this.PostBondSearchAsync(postBondPredicate, null);
        }
        
        public void PostBondSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PostBondPredicate postBondPredicate, object userState) {
            if ((this.onBeginPostBondSearchDelegate == null)) {
                this.onBeginPostBondSearchDelegate = new BeginOperationDelegate(this.OnBeginPostBondSearch);
            }
            if ((this.onEndPostBondSearchDelegate == null)) {
                this.onEndPostBondSearchDelegate = new EndOperationDelegate(this.OnEndPostBondSearch);
            }
            if ((this.onPostBondSearchCompletedDelegate == null)) {
                this.onPostBondSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostBondSearchCompleted);
            }
            base.InvokeAsync(this.onBeginPostBondSearchDelegate, new object[] {
                        postBondPredicate}, this.onEndPostBondSearchDelegate, this.onPostBondSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Post PostCreate(Nimble.Business.Library.Model.Framework.Owner.Post post) {
            return base.Channel.PostCreate(post);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostCreate(Nimble.Business.Library.Model.Framework.Owner.Post post, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostCreate(post, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Post EndPostCreate(System.IAsyncResult result) {
            return base.Channel.EndPostCreate(result);
        }
        
        private System.IAsyncResult OnBeginPostCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Post post = ((Nimble.Business.Library.Model.Framework.Owner.Post)(inValues[0]));
            return this.BeginPostCreate(post, callback, asyncState);
        }
        
        private object[] OnEndPostCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Post retVal = this.EndPostCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostCreateCompleted(object state) {
            if ((this.PostCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostCreateCompleted(this, new PostCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Post post) {
            this.PostCreateAsync(post, null);
        }
        
        public void PostCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Post post, object userState) {
            if ((this.onBeginPostCreateDelegate == null)) {
                this.onBeginPostCreateDelegate = new BeginOperationDelegate(this.OnBeginPostCreate);
            }
            if ((this.onEndPostCreateDelegate == null)) {
                this.onEndPostCreateDelegate = new EndOperationDelegate(this.OnEndPostCreate);
            }
            if ((this.onPostCreateCompletedDelegate == null)) {
                this.onPostCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostCreateCompleted);
            }
            base.InvokeAsync(this.onBeginPostCreateDelegate, new object[] {
                        post}, this.onEndPostCreateDelegate, this.onPostCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Post PostRead(Nimble.Business.Library.Model.Framework.Owner.Post post) {
            return base.Channel.PostRead(post);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostRead(Nimble.Business.Library.Model.Framework.Owner.Post post, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostRead(post, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Post EndPostRead(System.IAsyncResult result) {
            return base.Channel.EndPostRead(result);
        }
        
        private System.IAsyncResult OnBeginPostRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Post post = ((Nimble.Business.Library.Model.Framework.Owner.Post)(inValues[0]));
            return this.BeginPostRead(post, callback, asyncState);
        }
        
        private object[] OnEndPostRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Post retVal = this.EndPostRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostReadCompleted(object state) {
            if ((this.PostReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostReadCompleted(this, new PostReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostReadAsync(Nimble.Business.Library.Model.Framework.Owner.Post post) {
            this.PostReadAsync(post, null);
        }
        
        public void PostReadAsync(Nimble.Business.Library.Model.Framework.Owner.Post post, object userState) {
            if ((this.onBeginPostReadDelegate == null)) {
                this.onBeginPostReadDelegate = new BeginOperationDelegate(this.OnBeginPostRead);
            }
            if ((this.onEndPostReadDelegate == null)) {
                this.onEndPostReadDelegate = new EndOperationDelegate(this.OnEndPostRead);
            }
            if ((this.onPostReadCompletedDelegate == null)) {
                this.onPostReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostReadCompleted);
            }
            base.InvokeAsync(this.onBeginPostReadDelegate, new object[] {
                        post}, this.onEndPostReadDelegate, this.onPostReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Post PostUpdate(Nimble.Business.Library.Model.Framework.Owner.Post post) {
            return base.Channel.PostUpdate(post);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostUpdate(Nimble.Business.Library.Model.Framework.Owner.Post post, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostUpdate(post, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Post EndPostUpdate(System.IAsyncResult result) {
            return base.Channel.EndPostUpdate(result);
        }
        
        private System.IAsyncResult OnBeginPostUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Post post = ((Nimble.Business.Library.Model.Framework.Owner.Post)(inValues[0]));
            return this.BeginPostUpdate(post, callback, asyncState);
        }
        
        private object[] OnEndPostUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Post retVal = this.EndPostUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostUpdateCompleted(object state) {
            if ((this.PostUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostUpdateCompleted(this, new PostUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Post post) {
            this.PostUpdateAsync(post, null);
        }
        
        public void PostUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Post post, object userState) {
            if ((this.onBeginPostUpdateDelegate == null)) {
                this.onBeginPostUpdateDelegate = new BeginOperationDelegate(this.OnBeginPostUpdate);
            }
            if ((this.onEndPostUpdateDelegate == null)) {
                this.onEndPostUpdateDelegate = new EndOperationDelegate(this.OnEndPostUpdate);
            }
            if ((this.onPostUpdateCompletedDelegate == null)) {
                this.onPostUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginPostUpdateDelegate, new object[] {
                        post}, this.onEndPostUpdateDelegate, this.onPostUpdateCompletedDelegate, userState);
        }
        
        public bool PostDelete(Nimble.Business.Library.Model.Framework.Owner.Post post) {
            return base.Channel.PostDelete(post);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostDelete(Nimble.Business.Library.Model.Framework.Owner.Post post, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostDelete(post, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPostDelete(System.IAsyncResult result) {
            return base.Channel.EndPostDelete(result);
        }
        
        private System.IAsyncResult OnBeginPostDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Post post = ((Nimble.Business.Library.Model.Framework.Owner.Post)(inValues[0]));
            return this.BeginPostDelete(post, callback, asyncState);
        }
        
        private object[] OnEndPostDelete(System.IAsyncResult result) {
            bool retVal = this.EndPostDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostDeleteCompleted(object state) {
            if ((this.PostDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostDeleteCompleted(this, new PostDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Post post) {
            this.PostDeleteAsync(post, null);
        }
        
        public void PostDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Post post, object userState) {
            if ((this.onBeginPostDeleteDelegate == null)) {
                this.onBeginPostDeleteDelegate = new BeginOperationDelegate(this.OnBeginPostDelete);
            }
            if ((this.onEndPostDeleteDelegate == null)) {
                this.onEndPostDeleteDelegate = new EndOperationDelegate(this.OnEndPostDelete);
            }
            if ((this.onPostDeleteCompletedDelegate == null)) {
                this.onPostDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginPostDeleteDelegate, new object[] {
                        post}, this.onEndPostDeleteDelegate, this.onPostDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> PostSearch(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate) {
            return base.Channel.PostSearch(postPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostSearch(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostSearch(postPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> EndPostSearch(System.IAsyncResult result) {
            return base.Channel.EndPostSearch(result);
        }
        
        private System.IAsyncResult OnBeginPostSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate = ((Nimble.Business.Library.Model.Framework.Owner.PostPredicate)(inValues[0]));
            return this.BeginPostSearch(postPredicate, callback, asyncState);
        }
        
        private object[] OnEndPostSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> retVal = this.EndPostSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostSearchCompleted(object state) {
            if ((this.PostSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostSearchCompleted(this, new PostSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate) {
            this.PostSearchAsync(postPredicate, null);
        }
        
        public void PostSearchAsync(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate, object userState) {
            if ((this.onBeginPostSearchDelegate == null)) {
                this.onBeginPostSearchDelegate = new BeginOperationDelegate(this.OnBeginPostSearch);
            }
            if ((this.onEndPostSearchDelegate == null)) {
                this.onEndPostSearchDelegate = new EndOperationDelegate(this.OnEndPostSearch);
            }
            if ((this.onPostSearchCompletedDelegate == null)) {
                this.onPostSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostSearchCompleted);
            }
            base.InvokeAsync(this.onBeginPostSearchDelegate, new object[] {
                        postPredicate}, this.onEndPostSearchDelegate, this.onPostSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> PostSearchPublic(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate) {
            return base.Channel.PostSearchPublic(postPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostSearchPublic(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostSearchPublic(postPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> EndPostSearchPublic(System.IAsyncResult result) {
            return base.Channel.EndPostSearchPublic(result);
        }
        
        private System.IAsyncResult OnBeginPostSearchPublic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate = ((Nimble.Business.Library.Model.Framework.Owner.PostPredicate)(inValues[0]));
            return this.BeginPostSearchPublic(postPredicate, callback, asyncState);
        }
        
        private object[] OnEndPostSearchPublic(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Post> retVal = this.EndPostSearchPublic(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostSearchPublicCompleted(object state) {
            if ((this.PostSearchPublicCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostSearchPublicCompleted(this, new PostSearchPublicCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostSearchPublicAsync(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate) {
            this.PostSearchPublicAsync(postPredicate, null);
        }
        
        public void PostSearchPublicAsync(Nimble.Business.Library.Model.Framework.Owner.PostPredicate postPredicate, object userState) {
            if ((this.onBeginPostSearchPublicDelegate == null)) {
                this.onBeginPostSearchPublicDelegate = new BeginOperationDelegate(this.OnBeginPostSearchPublic);
            }
            if ((this.onEndPostSearchPublicDelegate == null)) {
                this.onEndPostSearchPublicDelegate = new EndOperationDelegate(this.OnEndPostSearchPublic);
            }
            if ((this.onPostSearchPublicCompletedDelegate == null)) {
                this.onPostSearchPublicCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostSearchPublicCompleted);
            }
            base.InvokeAsync(this.onBeginPostSearchPublicDelegate, new object[] {
                        postPredicate}, this.onEndPostSearchPublicDelegate, this.onPostSearchPublicCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Layout LayoutCreate(Nimble.Business.Library.Model.Framework.Owner.Layout layout) {
            return base.Channel.LayoutCreate(layout);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLayoutCreate(Nimble.Business.Library.Model.Framework.Owner.Layout layout, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLayoutCreate(layout, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Layout EndLayoutCreate(System.IAsyncResult result) {
            return base.Channel.EndLayoutCreate(result);
        }
        
        private System.IAsyncResult OnBeginLayoutCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Layout layout = ((Nimble.Business.Library.Model.Framework.Owner.Layout)(inValues[0]));
            return this.BeginLayoutCreate(layout, callback, asyncState);
        }
        
        private object[] OnEndLayoutCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Layout retVal = this.EndLayoutCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLayoutCreateCompleted(object state) {
            if ((this.LayoutCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LayoutCreateCompleted(this, new LayoutCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LayoutCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Layout layout) {
            this.LayoutCreateAsync(layout, null);
        }
        
        public void LayoutCreateAsync(Nimble.Business.Library.Model.Framework.Owner.Layout layout, object userState) {
            if ((this.onBeginLayoutCreateDelegate == null)) {
                this.onBeginLayoutCreateDelegate = new BeginOperationDelegate(this.OnBeginLayoutCreate);
            }
            if ((this.onEndLayoutCreateDelegate == null)) {
                this.onEndLayoutCreateDelegate = new EndOperationDelegate(this.OnEndLayoutCreate);
            }
            if ((this.onLayoutCreateCompletedDelegate == null)) {
                this.onLayoutCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLayoutCreateCompleted);
            }
            base.InvokeAsync(this.onBeginLayoutCreateDelegate, new object[] {
                        layout}, this.onEndLayoutCreateDelegate, this.onLayoutCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Layout LayoutRead(Nimble.Business.Library.Model.Framework.Owner.Layout layout) {
            return base.Channel.LayoutRead(layout);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLayoutRead(Nimble.Business.Library.Model.Framework.Owner.Layout layout, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLayoutRead(layout, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Layout EndLayoutRead(System.IAsyncResult result) {
            return base.Channel.EndLayoutRead(result);
        }
        
        private System.IAsyncResult OnBeginLayoutRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Layout layout = ((Nimble.Business.Library.Model.Framework.Owner.Layout)(inValues[0]));
            return this.BeginLayoutRead(layout, callback, asyncState);
        }
        
        private object[] OnEndLayoutRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Layout retVal = this.EndLayoutRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLayoutReadCompleted(object state) {
            if ((this.LayoutReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LayoutReadCompleted(this, new LayoutReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LayoutReadAsync(Nimble.Business.Library.Model.Framework.Owner.Layout layout) {
            this.LayoutReadAsync(layout, null);
        }
        
        public void LayoutReadAsync(Nimble.Business.Library.Model.Framework.Owner.Layout layout, object userState) {
            if ((this.onBeginLayoutReadDelegate == null)) {
                this.onBeginLayoutReadDelegate = new BeginOperationDelegate(this.OnBeginLayoutRead);
            }
            if ((this.onEndLayoutReadDelegate == null)) {
                this.onEndLayoutReadDelegate = new EndOperationDelegate(this.OnEndLayoutRead);
            }
            if ((this.onLayoutReadCompletedDelegate == null)) {
                this.onLayoutReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLayoutReadCompleted);
            }
            base.InvokeAsync(this.onBeginLayoutReadDelegate, new object[] {
                        layout}, this.onEndLayoutReadDelegate, this.onLayoutReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Layout LayoutUpdate(Nimble.Business.Library.Model.Framework.Owner.Layout layout) {
            return base.Channel.LayoutUpdate(layout);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLayoutUpdate(Nimble.Business.Library.Model.Framework.Owner.Layout layout, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLayoutUpdate(layout, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Layout EndLayoutUpdate(System.IAsyncResult result) {
            return base.Channel.EndLayoutUpdate(result);
        }
        
        private System.IAsyncResult OnBeginLayoutUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Layout layout = ((Nimble.Business.Library.Model.Framework.Owner.Layout)(inValues[0]));
            return this.BeginLayoutUpdate(layout, callback, asyncState);
        }
        
        private object[] OnEndLayoutUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Layout retVal = this.EndLayoutUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLayoutUpdateCompleted(object state) {
            if ((this.LayoutUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LayoutUpdateCompleted(this, new LayoutUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LayoutUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Layout layout) {
            this.LayoutUpdateAsync(layout, null);
        }
        
        public void LayoutUpdateAsync(Nimble.Business.Library.Model.Framework.Owner.Layout layout, object userState) {
            if ((this.onBeginLayoutUpdateDelegate == null)) {
                this.onBeginLayoutUpdateDelegate = new BeginOperationDelegate(this.OnBeginLayoutUpdate);
            }
            if ((this.onEndLayoutUpdateDelegate == null)) {
                this.onEndLayoutUpdateDelegate = new EndOperationDelegate(this.OnEndLayoutUpdate);
            }
            if ((this.onLayoutUpdateCompletedDelegate == null)) {
                this.onLayoutUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLayoutUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginLayoutUpdateDelegate, new object[] {
                        layout}, this.onEndLayoutUpdateDelegate, this.onLayoutUpdateCompletedDelegate, userState);
        }
        
        public bool LayoutDelete(Nimble.Business.Library.Model.Framework.Owner.Layout layout) {
            return base.Channel.LayoutDelete(layout);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLayoutDelete(Nimble.Business.Library.Model.Framework.Owner.Layout layout, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLayoutDelete(layout, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndLayoutDelete(System.IAsyncResult result) {
            return base.Channel.EndLayoutDelete(result);
        }
        
        private System.IAsyncResult OnBeginLayoutDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Layout layout = ((Nimble.Business.Library.Model.Framework.Owner.Layout)(inValues[0]));
            return this.BeginLayoutDelete(layout, callback, asyncState);
        }
        
        private object[] OnEndLayoutDelete(System.IAsyncResult result) {
            bool retVal = this.EndLayoutDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLayoutDeleteCompleted(object state) {
            if ((this.LayoutDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LayoutDeleteCompleted(this, new LayoutDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LayoutDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Layout layout) {
            this.LayoutDeleteAsync(layout, null);
        }
        
        public void LayoutDeleteAsync(Nimble.Business.Library.Model.Framework.Owner.Layout layout, object userState) {
            if ((this.onBeginLayoutDeleteDelegate == null)) {
                this.onBeginLayoutDeleteDelegate = new BeginOperationDelegate(this.OnBeginLayoutDelete);
            }
            if ((this.onEndLayoutDeleteDelegate == null)) {
                this.onEndLayoutDeleteDelegate = new EndOperationDelegate(this.OnEndLayoutDelete);
            }
            if ((this.onLayoutDeleteCompletedDelegate == null)) {
                this.onLayoutDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLayoutDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginLayoutDeleteDelegate, new object[] {
                        layout}, this.onEndLayoutDeleteDelegate, this.onLayoutDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Layout> LayoutSearch(Nimble.Business.Library.Model.Framework.Owner.LayoutPredicate layoutPredicate) {
            return base.Channel.LayoutSearch(layoutPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLayoutSearch(Nimble.Business.Library.Model.Framework.Owner.LayoutPredicate layoutPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLayoutSearch(layoutPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Layout> EndLayoutSearch(System.IAsyncResult result) {
            return base.Channel.EndLayoutSearch(result);
        }
        
        private System.IAsyncResult OnBeginLayoutSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.LayoutPredicate layoutPredicate = ((Nimble.Business.Library.Model.Framework.Owner.LayoutPredicate)(inValues[0]));
            return this.BeginLayoutSearch(layoutPredicate, callback, asyncState);
        }
        
        private object[] OnEndLayoutSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Owner.Layout> retVal = this.EndLayoutSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLayoutSearchCompleted(object state) {
            if ((this.LayoutSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LayoutSearchCompleted(this, new LayoutSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LayoutSearchAsync(Nimble.Business.Library.Model.Framework.Owner.LayoutPredicate layoutPredicate) {
            this.LayoutSearchAsync(layoutPredicate, null);
        }
        
        public void LayoutSearchAsync(Nimble.Business.Library.Model.Framework.Owner.LayoutPredicate layoutPredicate, object userState) {
            if ((this.onBeginLayoutSearchDelegate == null)) {
                this.onBeginLayoutSearchDelegate = new BeginOperationDelegate(this.OnBeginLayoutSearch);
            }
            if ((this.onEndLayoutSearchDelegate == null)) {
                this.onEndLayoutSearchDelegate = new EndOperationDelegate(this.OnEndLayoutSearch);
            }
            if ((this.onLayoutSearchCompletedDelegate == null)) {
                this.onLayoutSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLayoutSearchCompleted);
            }
            base.InvokeAsync(this.onBeginLayoutSearchDelegate, new object[] {
                        layoutPredicate}, this.onEndLayoutSearchDelegate, this.onLayoutSearchCompletedDelegate, userState);
        }
    }
}
