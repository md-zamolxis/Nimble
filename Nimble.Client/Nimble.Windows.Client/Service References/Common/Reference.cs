//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nimble.Windows.Client.Common {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Common.ICommon")]
    public interface ICommon {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/Multilanguage", ReplyAction="http://tempuri.org/ICommon/MultilanguageResponse")]
        System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token> Multilanguage(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/Multilanguage", ReplyAction="http://tempuri.org/ICommon/MultilanguageResponse")]
        System.IAsyncResult BeginMultilanguage(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate, System.AsyncCallback callback, object asyncState);
        
        System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token> EndMultilanguage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/Translation", ReplyAction="http://tempuri.org/ICommon/TranslationResponse")]
        Nimble.Business.Library.Model.Framework.Multilanguage.Translation Translation(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/Translation", ReplyAction="http://tempuri.org/ICommon/TranslationResponse")]
        System.IAsyncResult BeginTranslation(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Multilanguage.Translation EndTranslation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/Translate", ReplyAction="http://tempuri.org/ICommon/TranslateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.GenericPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.GenericEntity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Pager))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Sort[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Sort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.SortType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<string[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.Emplacement[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.Application[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.DateInterval>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Multilanguage.Resource[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Multilanguage.Translation[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.EntityActionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.Account[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.AmountInterval>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.User[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.PermissionType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.PersonSexType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Person[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.Token[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.PresetEntityType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Preset[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.SplitEntityCode[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.SplitEntityType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Split[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Group[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Bond[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.BranchActionType>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.BranchGroup[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.BranchSplit[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.OrganisationActionType>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Organisation[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.SplitBranchType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Branch[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.EmployeeActorType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Employee[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.State>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<System.Nullable<System.Guid>[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Filestream[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.PostGroup[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.PostActionType>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Post[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.PostSplit[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.SplitPostType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Employee))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Branch[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Branch))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchActionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchGroup[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchSplit))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Organisation))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.OrganisationActionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.SplitBranchType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Employee[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.EmployeeActorType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Person))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PersonSexType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Organisation[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PersonPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PersonSexType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Person[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchSplit[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.SplitBranchType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.EmployeeActorType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostGroup[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostSplit))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.SplitPostType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Post[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Post))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostActionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostSplit[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.SplitPostType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Emplacement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.EmplacementPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Emplacement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.ApplicationPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Application[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Application))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Token))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Account))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Role[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Role))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Permission[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Permission))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.User))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.PermissionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.TokenPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.AccountPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Account[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.UserPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.User[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.PermissionType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Token[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.DateInterval))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.DateIntervalType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.BranchActionType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.KeyValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.KeyValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.OrganisationActionType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.FaultExceptionDetail))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.FaultExceptionDetailType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.FaultExceptionDetail[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.AmountInterval))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.PostActionType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, Nimble.Business.Library.Model.Framework.Security.Permission>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Hierarchy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Filestream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Filestream[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Group[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Group))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Split))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitEntityCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitEntityType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.State))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Preset[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Preset))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.PresetEntityType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.PresetPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.PresetEntityType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitEntityCode[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitEntityType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Split[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.GroupPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Bond))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.BondPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Bond[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DateTimeOffset))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Nullable<System.Guid>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Culture[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Culture))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Resource[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Resource))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Translation[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Translation))]
        string Translate(string code, string category, object[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/Translate", ReplyAction="http://tempuri.org/ICommon/TranslateResponse")]
        System.IAsyncResult BeginTranslate(string code, string category, object[] parameters, System.AsyncCallback callback, object asyncState);
        
        string EndTranslate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/Login", ReplyAction="http://tempuri.org/ICommon/LoginResponse")]
        Nimble.Business.Library.Model.Framework.Security.Token Login(string userCode, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/Login", ReplyAction="http://tempuri.org/ICommon/LoginResponse")]
        System.IAsyncResult BeginLogin(string userCode, string userPassword, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.Token EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/Logout", ReplyAction="http://tempuri.org/ICommon/LogoutResponse")]
        bool Logout();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/Logout", ReplyAction="http://tempuri.org/ICommon/LogoutResponse")]
        System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState);
        
        bool EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/IpInfoRead", ReplyAction="http://tempuri.org/ICommon/IpInfoReadResponse")]
        string IpInfoRead(string ip);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/IpInfoRead", ReplyAction="http://tempuri.org/ICommon/IpInfoReadResponse")]
        System.IAsyncResult BeginIpInfoRead(string ip, System.AsyncCallback callback, object asyncState);
        
        string EndIpInfoRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SignIn", ReplyAction="http://tempuri.org/ICommon/SignInResponse")]
        Nimble.Business.Library.Model.Framework.Security.Token SignIn(string referenceId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SignIn", ReplyAction="http://tempuri.org/ICommon/SignInResponse")]
        System.IAsyncResult BeginSignIn(string referenceId, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.Token EndSignIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/ResetPasswordSend", ReplyAction="http://tempuri.org/ICommon/ResetPasswordSendResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.GenericPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.GenericEntity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Pager))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Sort[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Sort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.SortType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<string[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.Emplacement[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.Application[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.DateInterval>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Multilanguage.Resource[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Multilanguage.Translation[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.EntityActionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.Account[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.AmountInterval>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.User[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.PermissionType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.PersonSexType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Person[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Security.Token[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.PresetEntityType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Preset[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.SplitEntityCode[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.SplitEntityType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Split[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Group[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Bond[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.BranchActionType>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.BranchGroup[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.BranchSplit[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.OrganisationActionType>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Organisation[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.SplitBranchType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Branch[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.EmployeeActorType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Employee[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.State>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<System.Nullable<System.Guid>[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Common.Filestream[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.PostGroup[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.PostActionType>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.Post[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.PostSplit[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Criteria<Nimble.Business.Library.Model.Framework.Owner.SplitPostType[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Employee))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Branch[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Branch))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchActionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchGroup[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchSplit))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Organisation))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.OrganisationActionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.SplitBranchType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Employee[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.EmployeeActorType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Person))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PersonSexType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Organisation[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PersonPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PersonSexType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Person[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchGroupPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchSplitPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.BranchSplit[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.OrganisationPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.SplitBranchType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.EmployeePredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.EmployeeActorType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostGroupPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostGroup[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostSplit))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.SplitPostType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Post[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.Post))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostActionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostSplitPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.PostSplit[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Owner.SplitPostType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Emplacement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.EmplacementPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Emplacement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.ApplicationPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Application[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Application))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Token))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Account))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Role[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Role))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Permission[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Permission))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.User))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.PermissionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.TokenPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.AccountPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Account[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.UserPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.User[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.PermissionType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Security.Token[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.DateInterval))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.DateIntervalType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.BranchActionType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.KeyValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.KeyValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.OrganisationActionType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.FaultExceptionDetailType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.FaultExceptionDetail[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.AmountInterval))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Common.Flags<Nimble.Business.Library.Model.Framework.Owner.PostActionType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, Nimble.Business.Library.Model.Framework.Security.Permission>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Hierarchy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Filestream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Filestream[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Group[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Group))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Split))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitEntityCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitEntityType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.State))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Preset[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Preset))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.PresetEntityType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.PresetPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.PresetEntityType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitEntityCode[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.SplitEntityType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Split[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.GroupPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Bond))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.BondPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.Bond[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DateTimeOffset))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Nullable<System.Guid>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Culture[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Culture))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Resource[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Resource))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Translation[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nimble.Business.Library.Model.Framework.Multilanguage.Translation))]
        Nimble.Business.Library.Common.FaultExceptionDetail ResetPasswordSend(string email);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/ResetPasswordSend", ReplyAction="http://tempuri.org/ICommon/ResetPasswordSendResponse")]
        System.IAsyncResult BeginResetPasswordSend(string email, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Common.FaultExceptionDetail EndResetPasswordSend(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/ResetPasswordCheck", ReplyAction="http://tempuri.org/ICommon/ResetPasswordCheckResponse")]
        Nimble.Business.Library.Model.Framework.Security.User ResetPasswordCheck(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/ResetPasswordCheck", ReplyAction="http://tempuri.org/ICommon/ResetPasswordCheckResponse")]
        System.IAsyncResult BeginResetPasswordCheck(string key, string value, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.User EndResetPasswordCheck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/ResetPasswordProceed", ReplyAction="http://tempuri.org/ICommon/ResetPasswordProceedResponse")]
        Nimble.Business.Library.Model.Framework.Security.User ResetPasswordProceed(string key, string value, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/ResetPasswordProceed", ReplyAction="http://tempuri.org/ICommon/ResetPasswordProceedResponse")]
        System.IAsyncResult BeginResetPasswordProceed(string key, string value, string password, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.User EndResetPasswordProceed(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/ResetPasswordUnlock", ReplyAction="http://tempuri.org/ICommon/ResetPasswordUnlockResponse")]
        Nimble.Business.Library.Model.Framework.Security.User ResetPasswordUnlock(string key, string value, string password, bool isEncrypted);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/ResetPasswordUnlock", ReplyAction="http://tempuri.org/ICommon/ResetPasswordUnlockResponse")]
        System.IAsyncResult BeginResetPasswordUnlock(string key, string value, string password, bool isEncrypted, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.User EndResetPasswordUnlock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SignCheckPerson", ReplyAction="http://tempuri.org/ICommon/SignCheckPersonResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Person SignCheckPerson(string userCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SignCheckPerson", ReplyAction="http://tempuri.org/ICommon/SignCheckPersonResponse")]
        System.IAsyncResult BeginSignCheckPerson(string userCode, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Person EndSignCheckPerson(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SignUpPerson", ReplyAction="http://tempuri.org/ICommon/SignUpPersonResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Person SignUpPerson(Nimble.Business.Library.Model.Framework.Owner.Person person);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SignUpPerson", ReplyAction="http://tempuri.org/ICommon/SignUpPersonResponse")]
        System.IAsyncResult BeginSignUpPerson(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Person EndSignUpPerson(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SignCheckOrganisation", ReplyAction="http://tempuri.org/ICommon/SignCheckOrganisationResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Employee SignCheckOrganisation(string organisationCode, string userCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SignCheckOrganisation", ReplyAction="http://tempuri.org/ICommon/SignCheckOrganisationResponse")]
        System.IAsyncResult BeginSignCheckOrganisation(string organisationCode, string userCode, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Employee EndSignCheckOrganisation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SignUpOrganisation", ReplyAction="http://tempuri.org/ICommon/SignUpOrganisationResponse")]
        Nimble.Business.Library.Model.Framework.Owner.Employee SignUpOrganisation(Nimble.Business.Library.Model.Framework.Owner.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SignUpOrganisation", ReplyAction="http://tempuri.org/ICommon/SignUpOrganisationResponse")]
        System.IAsyncResult BeginSignUpOrganisation(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Owner.Employee EndSignUpOrganisation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SignInOrganisation", ReplyAction="http://tempuri.org/ICommon/SignInOrganisationResponse")]
        Nimble.Business.Library.Model.Framework.Security.Token SignInOrganisation(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SignInOrganisation", ReplyAction="http://tempuri.org/ICommon/SignInOrganisationResponse")]
        System.IAsyncResult BeginSignInOrganisation(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.Token EndSignInOrganisation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/TokenRead", ReplyAction="http://tempuri.org/ICommon/TokenReadResponse")]
        Nimble.Business.Library.Model.Framework.Security.Token TokenRead();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/TokenRead", ReplyAction="http://tempuri.org/ICommon/TokenReadResponse")]
        System.IAsyncResult BeginTokenRead(System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.Token EndTokenRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/TokenUpdate", ReplyAction="http://tempuri.org/ICommon/TokenUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Security.Token TokenUpdate(Nimble.Business.Library.Model.Framework.Security.Token token);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/TokenUpdate", ReplyAction="http://tempuri.org/ICommon/TokenUpdateResponse")]
        System.IAsyncResult BeginTokenUpdate(Nimble.Business.Library.Model.Framework.Security.Token token, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.Token EndTokenUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/TokenDelete", ReplyAction="http://tempuri.org/ICommon/TokenDeleteResponse")]
        bool TokenDelete(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/TokenDelete", ReplyAction="http://tempuri.org/ICommon/TokenDeleteResponse")]
        System.IAsyncResult BeginTokenDelete(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, System.AsyncCallback callback, object asyncState);
        
        bool EndTokenDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/TokenSearch", ReplyAction="http://tempuri.org/ICommon/TokenSearchResponse")]
        Nimble.Business.Library.Model.Framework.Security.Token[] TokenSearch(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/TokenSearch", ReplyAction="http://tempuri.org/ICommon/TokenSearchResponse")]
        System.IAsyncResult BeginTokenSearch(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.Token[] EndTokenSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/TokenHasPermissions", ReplyAction="http://tempuri.org/ICommon/TokenHasPermissionsResponse")]
        bool TokenHasPermissions(Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/TokenHasPermissions", ReplyAction="http://tempuri.org/ICommon/TokenHasPermissionsResponse")]
        System.IAsyncResult BeginTokenHasPermissions(Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes, System.AsyncCallback callback, object asyncState);
        
        bool EndTokenHasPermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/AccountHasPermissions", ReplyAction="http://tempuri.org/ICommon/AccountHasPermissionsResponse")]
        bool AccountHasPermissions(Nimble.Business.Library.Model.Framework.Security.Account account, Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/AccountHasPermissions", ReplyAction="http://tempuri.org/ICommon/AccountHasPermissionsResponse")]
        System.IAsyncResult BeginAccountHasPermissions(Nimble.Business.Library.Model.Framework.Security.Account account, Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes, System.AsyncCallback callback, object asyncState);
        
        bool EndAccountHasPermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/TokenIsExpired", ReplyAction="http://tempuri.org/ICommon/TokenIsExpiredResponse")]
        bool TokenIsExpired();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/TokenIsExpired", ReplyAction="http://tempuri.org/ICommon/TokenIsExpiredResponse")]
        System.IAsyncResult BeginTokenIsExpired(System.AsyncCallback callback, object asyncState);
        
        bool EndTokenIsExpired(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/LockDelete", ReplyAction="http://tempuri.org/ICommon/LockDeleteResponse")]
        bool LockDelete(Nimble.Business.Library.Model.Framework.Security.Token token);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/LockDelete", ReplyAction="http://tempuri.org/ICommon/LockDeleteResponse")]
        System.IAsyncResult BeginLockDelete(Nimble.Business.Library.Model.Framework.Security.Token token, System.AsyncCallback callback, object asyncState);
        
        bool EndLockDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/LockSearch", ReplyAction="http://tempuri.org/ICommon/LockSearchResponse")]
        Nimble.Business.Library.Model.Framework.Security.Token[] LockSearch(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/LockSearch", ReplyAction="http://tempuri.org/ICommon/LockSearchResponse")]
        System.IAsyncResult BeginLockSearch(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Security.Token[] EndLockSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/PresetCreate", ReplyAction="http://tempuri.org/ICommon/PresetCreateResponse")]
        Nimble.Business.Library.Model.Framework.Common.Preset PresetCreate(Nimble.Business.Library.Model.Framework.Common.Preset preset);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/PresetCreate", ReplyAction="http://tempuri.org/ICommon/PresetCreateResponse")]
        System.IAsyncResult BeginPresetCreate(Nimble.Business.Library.Model.Framework.Common.Preset preset, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Preset EndPresetCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/PresetRead", ReplyAction="http://tempuri.org/ICommon/PresetReadResponse")]
        Nimble.Business.Library.Model.Framework.Common.Preset PresetRead(Nimble.Business.Library.Model.Framework.Common.Preset preset);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/PresetRead", ReplyAction="http://tempuri.org/ICommon/PresetReadResponse")]
        System.IAsyncResult BeginPresetRead(Nimble.Business.Library.Model.Framework.Common.Preset preset, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Preset EndPresetRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/PresetUpdate", ReplyAction="http://tempuri.org/ICommon/PresetUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Common.Preset PresetUpdate(Nimble.Business.Library.Model.Framework.Common.Preset preset);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/PresetUpdate", ReplyAction="http://tempuri.org/ICommon/PresetUpdateResponse")]
        System.IAsyncResult BeginPresetUpdate(Nimble.Business.Library.Model.Framework.Common.Preset preset, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Preset EndPresetUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/PresetDelete", ReplyAction="http://tempuri.org/ICommon/PresetDeleteResponse")]
        bool PresetDelete(Nimble.Business.Library.Model.Framework.Common.Preset preset);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/PresetDelete", ReplyAction="http://tempuri.org/ICommon/PresetDeleteResponse")]
        System.IAsyncResult BeginPresetDelete(Nimble.Business.Library.Model.Framework.Common.Preset preset, System.AsyncCallback callback, object asyncState);
        
        bool EndPresetDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/PresetSearch", ReplyAction="http://tempuri.org/ICommon/PresetSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset> PresetSearch(Nimble.Business.Library.Model.Framework.Common.PresetPredicate presetPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/PresetSearch", ReplyAction="http://tempuri.org/ICommon/PresetSearchResponse")]
        System.IAsyncResult BeginPresetSearch(Nimble.Business.Library.Model.Framework.Common.PresetPredicate presetPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset> EndPresetSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SplitCreate", ReplyAction="http://tempuri.org/ICommon/SplitCreateResponse")]
        Nimble.Business.Library.Model.Framework.Common.Split SplitCreate(Nimble.Business.Library.Model.Framework.Common.Split split);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SplitCreate", ReplyAction="http://tempuri.org/ICommon/SplitCreateResponse")]
        System.IAsyncResult BeginSplitCreate(Nimble.Business.Library.Model.Framework.Common.Split split, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Split EndSplitCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SplitRead", ReplyAction="http://tempuri.org/ICommon/SplitReadResponse")]
        Nimble.Business.Library.Model.Framework.Common.Split SplitRead(Nimble.Business.Library.Model.Framework.Common.Split split);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SplitRead", ReplyAction="http://tempuri.org/ICommon/SplitReadResponse")]
        System.IAsyncResult BeginSplitRead(Nimble.Business.Library.Model.Framework.Common.Split split, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Split EndSplitRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SplitUpdate", ReplyAction="http://tempuri.org/ICommon/SplitUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Common.Split SplitUpdate(Nimble.Business.Library.Model.Framework.Common.Split split);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SplitUpdate", ReplyAction="http://tempuri.org/ICommon/SplitUpdateResponse")]
        System.IAsyncResult BeginSplitUpdate(Nimble.Business.Library.Model.Framework.Common.Split split, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Split EndSplitUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SplitDelete", ReplyAction="http://tempuri.org/ICommon/SplitDeleteResponse")]
        bool SplitDelete(Nimble.Business.Library.Model.Framework.Common.Split split);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SplitDelete", ReplyAction="http://tempuri.org/ICommon/SplitDeleteResponse")]
        System.IAsyncResult BeginSplitDelete(Nimble.Business.Library.Model.Framework.Common.Split split, System.AsyncCallback callback, object asyncState);
        
        bool EndSplitDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/SplitSearch", ReplyAction="http://tempuri.org/ICommon/SplitSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split> SplitSearch(Nimble.Business.Library.Model.Framework.Common.SplitPredicate splitPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/SplitSearch", ReplyAction="http://tempuri.org/ICommon/SplitSearchResponse")]
        System.IAsyncResult BeginSplitSearch(Nimble.Business.Library.Model.Framework.Common.SplitPredicate splitPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split> EndSplitSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/GroupCreate", ReplyAction="http://tempuri.org/ICommon/GroupCreateResponse")]
        Nimble.Business.Library.Model.Framework.Common.Group GroupCreate(Nimble.Business.Library.Model.Framework.Common.Group group);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/GroupCreate", ReplyAction="http://tempuri.org/ICommon/GroupCreateResponse")]
        System.IAsyncResult BeginGroupCreate(Nimble.Business.Library.Model.Framework.Common.Group group, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Group EndGroupCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/GroupRead", ReplyAction="http://tempuri.org/ICommon/GroupReadResponse")]
        Nimble.Business.Library.Model.Framework.Common.Group GroupRead(Nimble.Business.Library.Model.Framework.Common.Group group);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/GroupRead", ReplyAction="http://tempuri.org/ICommon/GroupReadResponse")]
        System.IAsyncResult BeginGroupRead(Nimble.Business.Library.Model.Framework.Common.Group group, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Group EndGroupRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/GroupUpdate", ReplyAction="http://tempuri.org/ICommon/GroupUpdateResponse")]
        Nimble.Business.Library.Model.Framework.Common.Group GroupUpdate(Nimble.Business.Library.Model.Framework.Common.Group group);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/GroupUpdate", ReplyAction="http://tempuri.org/ICommon/GroupUpdateResponse")]
        System.IAsyncResult BeginGroupUpdate(Nimble.Business.Library.Model.Framework.Common.Group group, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Group EndGroupUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/GroupDelete", ReplyAction="http://tempuri.org/ICommon/GroupDeleteResponse")]
        bool GroupDelete(Nimble.Business.Library.Model.Framework.Common.Group group);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/GroupDelete", ReplyAction="http://tempuri.org/ICommon/GroupDeleteResponse")]
        System.IAsyncResult BeginGroupDelete(Nimble.Business.Library.Model.Framework.Common.Group group, System.AsyncCallback callback, object asyncState);
        
        bool EndGroupDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/GroupSearch", ReplyAction="http://tempuri.org/ICommon/GroupSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group> GroupSearch(Nimble.Business.Library.Model.Framework.Common.GroupPredicate groupPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/GroupSearch", ReplyAction="http://tempuri.org/ICommon/GroupSearchResponse")]
        System.IAsyncResult BeginGroupSearch(Nimble.Business.Library.Model.Framework.Common.GroupPredicate groupPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group> EndGroupSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/BondRead", ReplyAction="http://tempuri.org/ICommon/BondReadResponse")]
        Nimble.Business.Library.Model.Framework.Common.Bond BondRead(Nimble.Business.Library.Model.Framework.Common.Bond bond);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/BondRead", ReplyAction="http://tempuri.org/ICommon/BondReadResponse")]
        System.IAsyncResult BeginBondRead(Nimble.Business.Library.Model.Framework.Common.Bond bond, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Bond EndBondRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/BondSearch", ReplyAction="http://tempuri.org/ICommon/BondSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond> BondSearch(Nimble.Business.Library.Model.Framework.Common.BondPredicate bondPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/BondSearch", ReplyAction="http://tempuri.org/ICommon/BondSearchResponse")]
        System.IAsyncResult BeginBondSearch(Nimble.Business.Library.Model.Framework.Common.BondPredicate bondPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond> EndBondSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/FilestreamRead", ReplyAction="http://tempuri.org/ICommon/FilestreamReadResponse")]
        Nimble.Business.Library.Model.Framework.Common.Filestream FilestreamRead(Nimble.Business.Library.Model.Framework.Common.Filestream filestream);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/FilestreamRead", ReplyAction="http://tempuri.org/ICommon/FilestreamReadResponse")]
        System.IAsyncResult BeginFilestreamRead(Nimble.Business.Library.Model.Framework.Common.Filestream filestream, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.Model.Framework.Common.Filestream EndFilestreamRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommon/FilestreamSearch", ReplyAction="http://tempuri.org/ICommon/FilestreamSearchResponse")]
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream> FilestreamSearch(Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate filestreamPredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommon/FilestreamSearch", ReplyAction="http://tempuri.org/ICommon/FilestreamSearchResponse")]
        System.IAsyncResult BeginFilestreamSearch(Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate filestreamPredicate, System.AsyncCallback callback, object asyncState);
        
        Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream> EndFilestreamSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommonChannel : Nimble.Windows.Client.Common.ICommon, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MultilanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MultilanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Translation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Multilanguage.Translation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.Token)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IpInfoReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IpInfoReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.Token)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetPasswordSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetPasswordSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Common.FaultExceptionDetail Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Common.FaultExceptionDetail)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetPasswordCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetPasswordCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetPasswordProceedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetPasswordProceedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetPasswordUnlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetPasswordUnlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignCheckPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SignCheckPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Person)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignUpPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SignUpPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Person)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignCheckOrganisationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SignCheckOrganisationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Employee)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignUpOrganisationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SignUpOrganisationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Owner.Employee)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignInOrganisationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SignInOrganisationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.Token)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TokenReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.Token)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TokenUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.Token)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TokenDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TokenSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.Token[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenHasPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TokenHasPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountHasPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AccountHasPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenIsExpiredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TokenIsExpiredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LockDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LockDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LockSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LockSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Security.Token[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PresetCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PresetCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Preset Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Preset)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PresetReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PresetReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Preset Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Preset)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PresetUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PresetUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Preset Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Preset)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PresetDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PresetDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PresetSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PresetSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SplitCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Split Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Split)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SplitReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Split Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Split)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SplitUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Split Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Split)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SplitDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SplitSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GroupCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GroupCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Group Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Group)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GroupReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GroupReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Group Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Group)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GroupUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GroupUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Group Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Group)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GroupDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GroupDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GroupSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GroupSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BondReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BondReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Bond Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Bond)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BondSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BondSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilestreamReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FilestreamReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Filestream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.Model.Framework.Common.Filestream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilestreamSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FilestreamSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommonClient : System.ServiceModel.ClientBase<Nimble.Windows.Client.Common.ICommon>, Nimble.Windows.Client.Common.ICommon {
        
        private BeginOperationDelegate onBeginMultilanguageDelegate;
        
        private EndOperationDelegate onEndMultilanguageDelegate;
        
        private System.Threading.SendOrPostCallback onMultilanguageCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslationDelegate;
        
        private EndOperationDelegate onEndTranslationDelegate;
        
        private System.Threading.SendOrPostCallback onTranslationCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslateDelegate;
        
        private EndOperationDelegate onEndTranslateDelegate;
        
        private System.Threading.SendOrPostCallback onTranslateCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginIpInfoReadDelegate;
        
        private EndOperationDelegate onEndIpInfoReadDelegate;
        
        private System.Threading.SendOrPostCallback onIpInfoReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignInDelegate;
        
        private EndOperationDelegate onEndSignInDelegate;
        
        private System.Threading.SendOrPostCallback onSignInCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetPasswordSendDelegate;
        
        private EndOperationDelegate onEndResetPasswordSendDelegate;
        
        private System.Threading.SendOrPostCallback onResetPasswordSendCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetPasswordCheckDelegate;
        
        private EndOperationDelegate onEndResetPasswordCheckDelegate;
        
        private System.Threading.SendOrPostCallback onResetPasswordCheckCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetPasswordProceedDelegate;
        
        private EndOperationDelegate onEndResetPasswordProceedDelegate;
        
        private System.Threading.SendOrPostCallback onResetPasswordProceedCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetPasswordUnlockDelegate;
        
        private EndOperationDelegate onEndResetPasswordUnlockDelegate;
        
        private System.Threading.SendOrPostCallback onResetPasswordUnlockCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignCheckPersonDelegate;
        
        private EndOperationDelegate onEndSignCheckPersonDelegate;
        
        private System.Threading.SendOrPostCallback onSignCheckPersonCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignUpPersonDelegate;
        
        private EndOperationDelegate onEndSignUpPersonDelegate;
        
        private System.Threading.SendOrPostCallback onSignUpPersonCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignCheckOrganisationDelegate;
        
        private EndOperationDelegate onEndSignCheckOrganisationDelegate;
        
        private System.Threading.SendOrPostCallback onSignCheckOrganisationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignUpOrganisationDelegate;
        
        private EndOperationDelegate onEndSignUpOrganisationDelegate;
        
        private System.Threading.SendOrPostCallback onSignUpOrganisationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignInOrganisationDelegate;
        
        private EndOperationDelegate onEndSignInOrganisationDelegate;
        
        private System.Threading.SendOrPostCallback onSignInOrganisationCompletedDelegate;
        
        private BeginOperationDelegate onBeginTokenReadDelegate;
        
        private EndOperationDelegate onEndTokenReadDelegate;
        
        private System.Threading.SendOrPostCallback onTokenReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginTokenUpdateDelegate;
        
        private EndOperationDelegate onEndTokenUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTokenUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTokenDeleteDelegate;
        
        private EndOperationDelegate onEndTokenDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTokenDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTokenSearchDelegate;
        
        private EndOperationDelegate onEndTokenSearchDelegate;
        
        private System.Threading.SendOrPostCallback onTokenSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginTokenHasPermissionsDelegate;
        
        private EndOperationDelegate onEndTokenHasPermissionsDelegate;
        
        private System.Threading.SendOrPostCallback onTokenHasPermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAccountHasPermissionsDelegate;
        
        private EndOperationDelegate onEndAccountHasPermissionsDelegate;
        
        private System.Threading.SendOrPostCallback onAccountHasPermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTokenIsExpiredDelegate;
        
        private EndOperationDelegate onEndTokenIsExpiredDelegate;
        
        private System.Threading.SendOrPostCallback onTokenIsExpiredCompletedDelegate;
        
        private BeginOperationDelegate onBeginLockDeleteDelegate;
        
        private EndOperationDelegate onEndLockDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onLockDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginLockSearchDelegate;
        
        private EndOperationDelegate onEndLockSearchDelegate;
        
        private System.Threading.SendOrPostCallback onLockSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginPresetCreateDelegate;
        
        private EndOperationDelegate onEndPresetCreateDelegate;
        
        private System.Threading.SendOrPostCallback onPresetCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPresetReadDelegate;
        
        private EndOperationDelegate onEndPresetReadDelegate;
        
        private System.Threading.SendOrPostCallback onPresetReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPresetUpdateDelegate;
        
        private EndOperationDelegate onEndPresetUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onPresetUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPresetDeleteDelegate;
        
        private EndOperationDelegate onEndPresetDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onPresetDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginPresetSearchDelegate;
        
        private EndOperationDelegate onEndPresetSearchDelegate;
        
        private System.Threading.SendOrPostCallback onPresetSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginSplitCreateDelegate;
        
        private EndOperationDelegate onEndSplitCreateDelegate;
        
        private System.Threading.SendOrPostCallback onSplitCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSplitReadDelegate;
        
        private EndOperationDelegate onEndSplitReadDelegate;
        
        private System.Threading.SendOrPostCallback onSplitReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginSplitUpdateDelegate;
        
        private EndOperationDelegate onEndSplitUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onSplitUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSplitDeleteDelegate;
        
        private EndOperationDelegate onEndSplitDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onSplitDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginSplitSearchDelegate;
        
        private EndOperationDelegate onEndSplitSearchDelegate;
        
        private System.Threading.SendOrPostCallback onSplitSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginGroupCreateDelegate;
        
        private EndOperationDelegate onEndGroupCreateDelegate;
        
        private System.Threading.SendOrPostCallback onGroupCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGroupReadDelegate;
        
        private EndOperationDelegate onEndGroupReadDelegate;
        
        private System.Threading.SendOrPostCallback onGroupReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginGroupUpdateDelegate;
        
        private EndOperationDelegate onEndGroupUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onGroupUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGroupDeleteDelegate;
        
        private EndOperationDelegate onEndGroupDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onGroupDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGroupSearchDelegate;
        
        private EndOperationDelegate onEndGroupSearchDelegate;
        
        private System.Threading.SendOrPostCallback onGroupSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginBondReadDelegate;
        
        private EndOperationDelegate onEndBondReadDelegate;
        
        private System.Threading.SendOrPostCallback onBondReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginBondSearchDelegate;
        
        private EndOperationDelegate onEndBondSearchDelegate;
        
        private System.Threading.SendOrPostCallback onBondSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginFilestreamReadDelegate;
        
        private EndOperationDelegate onEndFilestreamReadDelegate;
        
        private System.Threading.SendOrPostCallback onFilestreamReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginFilestreamSearchDelegate;
        
        private EndOperationDelegate onEndFilestreamSearchDelegate;
        
        private System.Threading.SendOrPostCallback onFilestreamSearchCompletedDelegate;
        
        public CommonClient() {
        }
        
        public CommonClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommonClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<MultilanguageCompletedEventArgs> MultilanguageCompleted;
        
        public event System.EventHandler<TranslationCompletedEventArgs> TranslationCompleted;
        
        public event System.EventHandler<TranslateCompletedEventArgs> TranslateCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<LogoutCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<IpInfoReadCompletedEventArgs> IpInfoReadCompleted;
        
        public event System.EventHandler<SignInCompletedEventArgs> SignInCompleted;
        
        public event System.EventHandler<ResetPasswordSendCompletedEventArgs> ResetPasswordSendCompleted;
        
        public event System.EventHandler<ResetPasswordCheckCompletedEventArgs> ResetPasswordCheckCompleted;
        
        public event System.EventHandler<ResetPasswordProceedCompletedEventArgs> ResetPasswordProceedCompleted;
        
        public event System.EventHandler<ResetPasswordUnlockCompletedEventArgs> ResetPasswordUnlockCompleted;
        
        public event System.EventHandler<SignCheckPersonCompletedEventArgs> SignCheckPersonCompleted;
        
        public event System.EventHandler<SignUpPersonCompletedEventArgs> SignUpPersonCompleted;
        
        public event System.EventHandler<SignCheckOrganisationCompletedEventArgs> SignCheckOrganisationCompleted;
        
        public event System.EventHandler<SignUpOrganisationCompletedEventArgs> SignUpOrganisationCompleted;
        
        public event System.EventHandler<SignInOrganisationCompletedEventArgs> SignInOrganisationCompleted;
        
        public event System.EventHandler<TokenReadCompletedEventArgs> TokenReadCompleted;
        
        public event System.EventHandler<TokenUpdateCompletedEventArgs> TokenUpdateCompleted;
        
        public event System.EventHandler<TokenDeleteCompletedEventArgs> TokenDeleteCompleted;
        
        public event System.EventHandler<TokenSearchCompletedEventArgs> TokenSearchCompleted;
        
        public event System.EventHandler<TokenHasPermissionsCompletedEventArgs> TokenHasPermissionsCompleted;
        
        public event System.EventHandler<AccountHasPermissionsCompletedEventArgs> AccountHasPermissionsCompleted;
        
        public event System.EventHandler<TokenIsExpiredCompletedEventArgs> TokenIsExpiredCompleted;
        
        public event System.EventHandler<LockDeleteCompletedEventArgs> LockDeleteCompleted;
        
        public event System.EventHandler<LockSearchCompletedEventArgs> LockSearchCompleted;
        
        public event System.EventHandler<PresetCreateCompletedEventArgs> PresetCreateCompleted;
        
        public event System.EventHandler<PresetReadCompletedEventArgs> PresetReadCompleted;
        
        public event System.EventHandler<PresetUpdateCompletedEventArgs> PresetUpdateCompleted;
        
        public event System.EventHandler<PresetDeleteCompletedEventArgs> PresetDeleteCompleted;
        
        public event System.EventHandler<PresetSearchCompletedEventArgs> PresetSearchCompleted;
        
        public event System.EventHandler<SplitCreateCompletedEventArgs> SplitCreateCompleted;
        
        public event System.EventHandler<SplitReadCompletedEventArgs> SplitReadCompleted;
        
        public event System.EventHandler<SplitUpdateCompletedEventArgs> SplitUpdateCompleted;
        
        public event System.EventHandler<SplitDeleteCompletedEventArgs> SplitDeleteCompleted;
        
        public event System.EventHandler<SplitSearchCompletedEventArgs> SplitSearchCompleted;
        
        public event System.EventHandler<GroupCreateCompletedEventArgs> GroupCreateCompleted;
        
        public event System.EventHandler<GroupReadCompletedEventArgs> GroupReadCompleted;
        
        public event System.EventHandler<GroupUpdateCompletedEventArgs> GroupUpdateCompleted;
        
        public event System.EventHandler<GroupDeleteCompletedEventArgs> GroupDeleteCompleted;
        
        public event System.EventHandler<GroupSearchCompletedEventArgs> GroupSearchCompleted;
        
        public event System.EventHandler<BondReadCompletedEventArgs> BondReadCompleted;
        
        public event System.EventHandler<BondSearchCompletedEventArgs> BondSearchCompleted;
        
        public event System.EventHandler<FilestreamReadCompletedEventArgs> FilestreamReadCompleted;
        
        public event System.EventHandler<FilestreamSearchCompletedEventArgs> FilestreamSearchCompleted;
        
        public System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token> Multilanguage(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate) {
            return base.Channel.Multilanguage(culturePredicate, resourcePredicate, translationPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMultilanguage(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMultilanguage(culturePredicate, resourcePredicate, translationPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token> EndMultilanguage(System.IAsyncResult result) {
            return base.Channel.EndMultilanguage(result);
        }
        
        private System.IAsyncResult OnBeginMultilanguage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate = ((Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate)(inValues[0]));
            Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate = ((Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate)(inValues[1]));
            Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate = ((Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate)(inValues[2]));
            return this.BeginMultilanguage(culturePredicate, resourcePredicate, translationPredicate, callback, asyncState);
        }
        
        private object[] OnEndMultilanguage(System.IAsyncResult result) {
            System.Tuple<Nimble.Business.Library.Model.Framework.Multilanguage.Culture[], Nimble.Business.Library.Model.Framework.Multilanguage.Resource[], Nimble.Business.Library.Model.Framework.Multilanguage.Translation[], Nimble.Business.Library.Model.Framework.Security.Token> retVal = this.EndMultilanguage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMultilanguageCompleted(object state) {
            if ((this.MultilanguageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MultilanguageCompleted(this, new MultilanguageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MultilanguageAsync(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate) {
            this.MultilanguageAsync(culturePredicate, resourcePredicate, translationPredicate, null);
        }
        
        public void MultilanguageAsync(Nimble.Business.Library.Model.Framework.Multilanguage.CulturePredicate culturePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.ResourcePredicate resourcePredicate, Nimble.Business.Library.Model.Framework.Multilanguage.TranslationPredicate translationPredicate, object userState) {
            if ((this.onBeginMultilanguageDelegate == null)) {
                this.onBeginMultilanguageDelegate = new BeginOperationDelegate(this.OnBeginMultilanguage);
            }
            if ((this.onEndMultilanguageDelegate == null)) {
                this.onEndMultilanguageDelegate = new EndOperationDelegate(this.OnEndMultilanguage);
            }
            if ((this.onMultilanguageCompletedDelegate == null)) {
                this.onMultilanguageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMultilanguageCompleted);
            }
            base.InvokeAsync(this.onBeginMultilanguageDelegate, new object[] {
                        culturePredicate,
                        resourcePredicate,
                        translationPredicate}, this.onEndMultilanguageDelegate, this.onMultilanguageCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Multilanguage.Translation Translation(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource) {
            return base.Channel.Translation(resource);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTranslation(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslation(resource, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Multilanguage.Translation EndTranslation(System.IAsyncResult result) {
            return base.Channel.EndTranslation(result);
        }
        
        private System.IAsyncResult OnBeginTranslation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource = ((Nimble.Business.Library.Model.Framework.Multilanguage.Resource)(inValues[0]));
            return this.BeginTranslation(resource, callback, asyncState);
        }
        
        private object[] OnEndTranslation(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Multilanguage.Translation retVal = this.EndTranslation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslationCompleted(object state) {
            if ((this.TranslationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslationCompleted(this, new TranslationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslationAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource) {
            this.TranslationAsync(resource, null);
        }
        
        public void TranslationAsync(Nimble.Business.Library.Model.Framework.Multilanguage.Resource resource, object userState) {
            if ((this.onBeginTranslationDelegate == null)) {
                this.onBeginTranslationDelegate = new BeginOperationDelegate(this.OnBeginTranslation);
            }
            if ((this.onEndTranslationDelegate == null)) {
                this.onEndTranslationDelegate = new EndOperationDelegate(this.OnEndTranslation);
            }
            if ((this.onTranslationCompletedDelegate == null)) {
                this.onTranslationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslationCompleted);
            }
            base.InvokeAsync(this.onBeginTranslationDelegate, new object[] {
                        resource}, this.onEndTranslationDelegate, this.onTranslationCompletedDelegate, userState);
        }
        
        public string Translate(string code, string category, object[] parameters) {
            return base.Channel.Translate(code, category, parameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTranslate(string code, string category, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslate(code, category, parameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndTranslate(System.IAsyncResult result) {
            return base.Channel.EndTranslate(result);
        }
        
        private System.IAsyncResult OnBeginTranslate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            string category = ((string)(inValues[1]));
            object[] parameters = ((object[])(inValues[2]));
            return this.BeginTranslate(code, category, parameters, callback, asyncState);
        }
        
        private object[] OnEndTranslate(System.IAsyncResult result) {
            string retVal = this.EndTranslate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslateCompleted(object state) {
            if ((this.TranslateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslateCompleted(this, new TranslateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslateAsync(string code, string category, object[] parameters) {
            this.TranslateAsync(code, category, parameters, null);
        }
        
        public void TranslateAsync(string code, string category, object[] parameters, object userState) {
            if ((this.onBeginTranslateDelegate == null)) {
                this.onBeginTranslateDelegate = new BeginOperationDelegate(this.OnBeginTranslate);
            }
            if ((this.onEndTranslateDelegate == null)) {
                this.onEndTranslateDelegate = new EndOperationDelegate(this.OnEndTranslate);
            }
            if ((this.onTranslateCompletedDelegate == null)) {
                this.onTranslateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslateCompleted);
            }
            base.InvokeAsync(this.onBeginTranslateDelegate, new object[] {
                        code,
                        category,
                        parameters}, this.onEndTranslateDelegate, this.onTranslateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token Login(string userCode, string userPassword) {
            return base.Channel.Login(userCode, userPassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string userCode, string userPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(userCode, userPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.Token EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userCode = ((string)(inValues[0]));
            string userPassword = ((string)(inValues[1]));
            return this.BeginLogin(userCode, userPassword, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.Token retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string userCode, string userPassword) {
            this.LoginAsync(userCode, userPassword, null);
        }
        
        public void LoginAsync(string userCode, string userPassword, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        userCode,
                        userPassword}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public bool Logout() {
            return base.Channel.Logout();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndLogout(System.IAsyncResult result) {
            return base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginLogout(callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            bool retVal = this.EndLogout(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, null, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        public string IpInfoRead(string ip) {
            return base.Channel.IpInfoRead(ip);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIpInfoRead(string ip, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIpInfoRead(ip, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndIpInfoRead(System.IAsyncResult result) {
            return base.Channel.EndIpInfoRead(result);
        }
        
        private System.IAsyncResult OnBeginIpInfoRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ip = ((string)(inValues[0]));
            return this.BeginIpInfoRead(ip, callback, asyncState);
        }
        
        private object[] OnEndIpInfoRead(System.IAsyncResult result) {
            string retVal = this.EndIpInfoRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIpInfoReadCompleted(object state) {
            if ((this.IpInfoReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IpInfoReadCompleted(this, new IpInfoReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IpInfoReadAsync(string ip) {
            this.IpInfoReadAsync(ip, null);
        }
        
        public void IpInfoReadAsync(string ip, object userState) {
            if ((this.onBeginIpInfoReadDelegate == null)) {
                this.onBeginIpInfoReadDelegate = new BeginOperationDelegate(this.OnBeginIpInfoRead);
            }
            if ((this.onEndIpInfoReadDelegate == null)) {
                this.onEndIpInfoReadDelegate = new EndOperationDelegate(this.OnEndIpInfoRead);
            }
            if ((this.onIpInfoReadCompletedDelegate == null)) {
                this.onIpInfoReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIpInfoReadCompleted);
            }
            base.InvokeAsync(this.onBeginIpInfoReadDelegate, new object[] {
                        ip}, this.onEndIpInfoReadDelegate, this.onIpInfoReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token SignIn(string referenceId) {
            return base.Channel.SignIn(referenceId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignIn(string referenceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignIn(referenceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.Token EndSignIn(System.IAsyncResult result) {
            return base.Channel.EndSignIn(result);
        }
        
        private System.IAsyncResult OnBeginSignIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string referenceId = ((string)(inValues[0]));
            return this.BeginSignIn(referenceId, callback, asyncState);
        }
        
        private object[] OnEndSignIn(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.Token retVal = this.EndSignIn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSignInCompleted(object state) {
            if ((this.SignInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignInCompleted(this, new SignInCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignInAsync(string referenceId) {
            this.SignInAsync(referenceId, null);
        }
        
        public void SignInAsync(string referenceId, object userState) {
            if ((this.onBeginSignInDelegate == null)) {
                this.onBeginSignInDelegate = new BeginOperationDelegate(this.OnBeginSignIn);
            }
            if ((this.onEndSignInDelegate == null)) {
                this.onEndSignInDelegate = new EndOperationDelegate(this.OnEndSignIn);
            }
            if ((this.onSignInCompletedDelegate == null)) {
                this.onSignInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignInCompleted);
            }
            base.InvokeAsync(this.onBeginSignInDelegate, new object[] {
                        referenceId}, this.onEndSignInDelegate, this.onSignInCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Common.FaultExceptionDetail ResetPasswordSend(string email) {
            return base.Channel.ResetPasswordSend(email);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetPasswordSend(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetPasswordSend(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Common.FaultExceptionDetail EndResetPasswordSend(System.IAsyncResult result) {
            return base.Channel.EndResetPasswordSend(result);
        }
        
        private System.IAsyncResult OnBeginResetPasswordSend(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return this.BeginResetPasswordSend(email, callback, asyncState);
        }
        
        private object[] OnEndResetPasswordSend(System.IAsyncResult result) {
            Nimble.Business.Library.Common.FaultExceptionDetail retVal = this.EndResetPasswordSend(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResetPasswordSendCompleted(object state) {
            if ((this.ResetPasswordSendCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetPasswordSendCompleted(this, new ResetPasswordSendCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetPasswordSendAsync(string email) {
            this.ResetPasswordSendAsync(email, null);
        }
        
        public void ResetPasswordSendAsync(string email, object userState) {
            if ((this.onBeginResetPasswordSendDelegate == null)) {
                this.onBeginResetPasswordSendDelegate = new BeginOperationDelegate(this.OnBeginResetPasswordSend);
            }
            if ((this.onEndResetPasswordSendDelegate == null)) {
                this.onEndResetPasswordSendDelegate = new EndOperationDelegate(this.OnEndResetPasswordSend);
            }
            if ((this.onResetPasswordSendCompletedDelegate == null)) {
                this.onResetPasswordSendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPasswordSendCompleted);
            }
            base.InvokeAsync(this.onBeginResetPasswordSendDelegate, new object[] {
                        email}, this.onEndResetPasswordSendDelegate, this.onResetPasswordSendCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.User ResetPasswordCheck(string key, string value) {
            return base.Channel.ResetPasswordCheck(key, value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetPasswordCheck(string key, string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetPasswordCheck(key, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.User EndResetPasswordCheck(System.IAsyncResult result) {
            return base.Channel.EndResetPasswordCheck(result);
        }
        
        private System.IAsyncResult OnBeginResetPasswordCheck(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string value = ((string)(inValues[1]));
            return this.BeginResetPasswordCheck(key, value, callback, asyncState);
        }
        
        private object[] OnEndResetPasswordCheck(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.User retVal = this.EndResetPasswordCheck(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResetPasswordCheckCompleted(object state) {
            if ((this.ResetPasswordCheckCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetPasswordCheckCompleted(this, new ResetPasswordCheckCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetPasswordCheckAsync(string key, string value) {
            this.ResetPasswordCheckAsync(key, value, null);
        }
        
        public void ResetPasswordCheckAsync(string key, string value, object userState) {
            if ((this.onBeginResetPasswordCheckDelegate == null)) {
                this.onBeginResetPasswordCheckDelegate = new BeginOperationDelegate(this.OnBeginResetPasswordCheck);
            }
            if ((this.onEndResetPasswordCheckDelegate == null)) {
                this.onEndResetPasswordCheckDelegate = new EndOperationDelegate(this.OnEndResetPasswordCheck);
            }
            if ((this.onResetPasswordCheckCompletedDelegate == null)) {
                this.onResetPasswordCheckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPasswordCheckCompleted);
            }
            base.InvokeAsync(this.onBeginResetPasswordCheckDelegate, new object[] {
                        key,
                        value}, this.onEndResetPasswordCheckDelegate, this.onResetPasswordCheckCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.User ResetPasswordProceed(string key, string value, string password) {
            return base.Channel.ResetPasswordProceed(key, value, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetPasswordProceed(string key, string value, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetPasswordProceed(key, value, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.User EndResetPasswordProceed(System.IAsyncResult result) {
            return base.Channel.EndResetPasswordProceed(result);
        }
        
        private System.IAsyncResult OnBeginResetPasswordProceed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string value = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            return this.BeginResetPasswordProceed(key, value, password, callback, asyncState);
        }
        
        private object[] OnEndResetPasswordProceed(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.User retVal = this.EndResetPasswordProceed(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResetPasswordProceedCompleted(object state) {
            if ((this.ResetPasswordProceedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetPasswordProceedCompleted(this, new ResetPasswordProceedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetPasswordProceedAsync(string key, string value, string password) {
            this.ResetPasswordProceedAsync(key, value, password, null);
        }
        
        public void ResetPasswordProceedAsync(string key, string value, string password, object userState) {
            if ((this.onBeginResetPasswordProceedDelegate == null)) {
                this.onBeginResetPasswordProceedDelegate = new BeginOperationDelegate(this.OnBeginResetPasswordProceed);
            }
            if ((this.onEndResetPasswordProceedDelegate == null)) {
                this.onEndResetPasswordProceedDelegate = new EndOperationDelegate(this.OnEndResetPasswordProceed);
            }
            if ((this.onResetPasswordProceedCompletedDelegate == null)) {
                this.onResetPasswordProceedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPasswordProceedCompleted);
            }
            base.InvokeAsync(this.onBeginResetPasswordProceedDelegate, new object[] {
                        key,
                        value,
                        password}, this.onEndResetPasswordProceedDelegate, this.onResetPasswordProceedCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.User ResetPasswordUnlock(string key, string value, string password, bool isEncrypted) {
            return base.Channel.ResetPasswordUnlock(key, value, password, isEncrypted);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetPasswordUnlock(string key, string value, string password, bool isEncrypted, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetPasswordUnlock(key, value, password, isEncrypted, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.User EndResetPasswordUnlock(System.IAsyncResult result) {
            return base.Channel.EndResetPasswordUnlock(result);
        }
        
        private System.IAsyncResult OnBeginResetPasswordUnlock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string value = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            bool isEncrypted = ((bool)(inValues[3]));
            return this.BeginResetPasswordUnlock(key, value, password, isEncrypted, callback, asyncState);
        }
        
        private object[] OnEndResetPasswordUnlock(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.User retVal = this.EndResetPasswordUnlock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResetPasswordUnlockCompleted(object state) {
            if ((this.ResetPasswordUnlockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetPasswordUnlockCompleted(this, new ResetPasswordUnlockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetPasswordUnlockAsync(string key, string value, string password, bool isEncrypted) {
            this.ResetPasswordUnlockAsync(key, value, password, isEncrypted, null);
        }
        
        public void ResetPasswordUnlockAsync(string key, string value, string password, bool isEncrypted, object userState) {
            if ((this.onBeginResetPasswordUnlockDelegate == null)) {
                this.onBeginResetPasswordUnlockDelegate = new BeginOperationDelegate(this.OnBeginResetPasswordUnlock);
            }
            if ((this.onEndResetPasswordUnlockDelegate == null)) {
                this.onEndResetPasswordUnlockDelegate = new EndOperationDelegate(this.OnEndResetPasswordUnlock);
            }
            if ((this.onResetPasswordUnlockCompletedDelegate == null)) {
                this.onResetPasswordUnlockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPasswordUnlockCompleted);
            }
            base.InvokeAsync(this.onBeginResetPasswordUnlockDelegate, new object[] {
                        key,
                        value,
                        password,
                        isEncrypted}, this.onEndResetPasswordUnlockDelegate, this.onResetPasswordUnlockCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person SignCheckPerson(string userCode) {
            return base.Channel.SignCheckPerson(userCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignCheckPerson(string userCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignCheckPerson(userCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Person EndSignCheckPerson(System.IAsyncResult result) {
            return base.Channel.EndSignCheckPerson(result);
        }
        
        private System.IAsyncResult OnBeginSignCheckPerson(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userCode = ((string)(inValues[0]));
            return this.BeginSignCheckPerson(userCode, callback, asyncState);
        }
        
        private object[] OnEndSignCheckPerson(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Person retVal = this.EndSignCheckPerson(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSignCheckPersonCompleted(object state) {
            if ((this.SignCheckPersonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignCheckPersonCompleted(this, new SignCheckPersonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignCheckPersonAsync(string userCode) {
            this.SignCheckPersonAsync(userCode, null);
        }
        
        public void SignCheckPersonAsync(string userCode, object userState) {
            if ((this.onBeginSignCheckPersonDelegate == null)) {
                this.onBeginSignCheckPersonDelegate = new BeginOperationDelegate(this.OnBeginSignCheckPerson);
            }
            if ((this.onEndSignCheckPersonDelegate == null)) {
                this.onEndSignCheckPersonDelegate = new EndOperationDelegate(this.OnEndSignCheckPerson);
            }
            if ((this.onSignCheckPersonCompletedDelegate == null)) {
                this.onSignCheckPersonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignCheckPersonCompleted);
            }
            base.InvokeAsync(this.onBeginSignCheckPersonDelegate, new object[] {
                        userCode}, this.onEndSignCheckPersonDelegate, this.onSignCheckPersonCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Person SignUpPerson(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            return base.Channel.SignUpPerson(person);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignUpPerson(Nimble.Business.Library.Model.Framework.Owner.Person person, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignUpPerson(person, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Person EndSignUpPerson(System.IAsyncResult result) {
            return base.Channel.EndSignUpPerson(result);
        }
        
        private System.IAsyncResult OnBeginSignUpPerson(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Person person = ((Nimble.Business.Library.Model.Framework.Owner.Person)(inValues[0]));
            return this.BeginSignUpPerson(person, callback, asyncState);
        }
        
        private object[] OnEndSignUpPerson(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Person retVal = this.EndSignUpPerson(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSignUpPersonCompleted(object state) {
            if ((this.SignUpPersonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignUpPersonCompleted(this, new SignUpPersonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignUpPersonAsync(Nimble.Business.Library.Model.Framework.Owner.Person person) {
            this.SignUpPersonAsync(person, null);
        }
        
        public void SignUpPersonAsync(Nimble.Business.Library.Model.Framework.Owner.Person person, object userState) {
            if ((this.onBeginSignUpPersonDelegate == null)) {
                this.onBeginSignUpPersonDelegate = new BeginOperationDelegate(this.OnBeginSignUpPerson);
            }
            if ((this.onEndSignUpPersonDelegate == null)) {
                this.onEndSignUpPersonDelegate = new EndOperationDelegate(this.OnEndSignUpPerson);
            }
            if ((this.onSignUpPersonCompletedDelegate == null)) {
                this.onSignUpPersonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignUpPersonCompleted);
            }
            base.InvokeAsync(this.onBeginSignUpPersonDelegate, new object[] {
                        person}, this.onEndSignUpPersonDelegate, this.onSignUpPersonCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee SignCheckOrganisation(string organisationCode, string userCode) {
            return base.Channel.SignCheckOrganisation(organisationCode, userCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignCheckOrganisation(string organisationCode, string userCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignCheckOrganisation(organisationCode, userCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Employee EndSignCheckOrganisation(System.IAsyncResult result) {
            return base.Channel.EndSignCheckOrganisation(result);
        }
        
        private System.IAsyncResult OnBeginSignCheckOrganisation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string organisationCode = ((string)(inValues[0]));
            string userCode = ((string)(inValues[1]));
            return this.BeginSignCheckOrganisation(organisationCode, userCode, callback, asyncState);
        }
        
        private object[] OnEndSignCheckOrganisation(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Employee retVal = this.EndSignCheckOrganisation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSignCheckOrganisationCompleted(object state) {
            if ((this.SignCheckOrganisationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignCheckOrganisationCompleted(this, new SignCheckOrganisationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignCheckOrganisationAsync(string organisationCode, string userCode) {
            this.SignCheckOrganisationAsync(organisationCode, userCode, null);
        }
        
        public void SignCheckOrganisationAsync(string organisationCode, string userCode, object userState) {
            if ((this.onBeginSignCheckOrganisationDelegate == null)) {
                this.onBeginSignCheckOrganisationDelegate = new BeginOperationDelegate(this.OnBeginSignCheckOrganisation);
            }
            if ((this.onEndSignCheckOrganisationDelegate == null)) {
                this.onEndSignCheckOrganisationDelegate = new EndOperationDelegate(this.OnEndSignCheckOrganisation);
            }
            if ((this.onSignCheckOrganisationCompletedDelegate == null)) {
                this.onSignCheckOrganisationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignCheckOrganisationCompleted);
            }
            base.InvokeAsync(this.onBeginSignCheckOrganisationDelegate, new object[] {
                        organisationCode,
                        userCode}, this.onEndSignCheckOrganisationDelegate, this.onSignCheckOrganisationCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Owner.Employee SignUpOrganisation(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            return base.Channel.SignUpOrganisation(employee);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignUpOrganisation(Nimble.Business.Library.Model.Framework.Owner.Employee employee, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignUpOrganisation(employee, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Owner.Employee EndSignUpOrganisation(System.IAsyncResult result) {
            return base.Channel.EndSignUpOrganisation(result);
        }
        
        private System.IAsyncResult OnBeginSignUpOrganisation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Employee employee = ((Nimble.Business.Library.Model.Framework.Owner.Employee)(inValues[0]));
            return this.BeginSignUpOrganisation(employee, callback, asyncState);
        }
        
        private object[] OnEndSignUpOrganisation(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Owner.Employee retVal = this.EndSignUpOrganisation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSignUpOrganisationCompleted(object state) {
            if ((this.SignUpOrganisationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignUpOrganisationCompleted(this, new SignUpOrganisationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignUpOrganisationAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee) {
            this.SignUpOrganisationAsync(employee, null);
        }
        
        public void SignUpOrganisationAsync(Nimble.Business.Library.Model.Framework.Owner.Employee employee, object userState) {
            if ((this.onBeginSignUpOrganisationDelegate == null)) {
                this.onBeginSignUpOrganisationDelegate = new BeginOperationDelegate(this.OnBeginSignUpOrganisation);
            }
            if ((this.onEndSignUpOrganisationDelegate == null)) {
                this.onEndSignUpOrganisationDelegate = new EndOperationDelegate(this.OnEndSignUpOrganisation);
            }
            if ((this.onSignUpOrganisationCompletedDelegate == null)) {
                this.onSignUpOrganisationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignUpOrganisationCompleted);
            }
            base.InvokeAsync(this.onBeginSignUpOrganisationDelegate, new object[] {
                        employee}, this.onEndSignUpOrganisationDelegate, this.onSignUpOrganisationCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token SignInOrganisation(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            return base.Channel.SignInOrganisation(organisation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignInOrganisation(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignInOrganisation(organisation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.Token EndSignInOrganisation(System.IAsyncResult result) {
            return base.Channel.EndSignInOrganisation(result);
        }
        
        private System.IAsyncResult OnBeginSignInOrganisation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Owner.Organisation organisation = ((Nimble.Business.Library.Model.Framework.Owner.Organisation)(inValues[0]));
            return this.BeginSignInOrganisation(organisation, callback, asyncState);
        }
        
        private object[] OnEndSignInOrganisation(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.Token retVal = this.EndSignInOrganisation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSignInOrganisationCompleted(object state) {
            if ((this.SignInOrganisationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignInOrganisationCompleted(this, new SignInOrganisationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignInOrganisationAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation) {
            this.SignInOrganisationAsync(organisation, null);
        }
        
        public void SignInOrganisationAsync(Nimble.Business.Library.Model.Framework.Owner.Organisation organisation, object userState) {
            if ((this.onBeginSignInOrganisationDelegate == null)) {
                this.onBeginSignInOrganisationDelegate = new BeginOperationDelegate(this.OnBeginSignInOrganisation);
            }
            if ((this.onEndSignInOrganisationDelegate == null)) {
                this.onEndSignInOrganisationDelegate = new EndOperationDelegate(this.OnEndSignInOrganisation);
            }
            if ((this.onSignInOrganisationCompletedDelegate == null)) {
                this.onSignInOrganisationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignInOrganisationCompleted);
            }
            base.InvokeAsync(this.onBeginSignInOrganisationDelegate, new object[] {
                        organisation}, this.onEndSignInOrganisationDelegate, this.onSignInOrganisationCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token TokenRead() {
            return base.Channel.TokenRead();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTokenRead(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTokenRead(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.Token EndTokenRead(System.IAsyncResult result) {
            return base.Channel.EndTokenRead(result);
        }
        
        private System.IAsyncResult OnBeginTokenRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTokenRead(callback, asyncState);
        }
        
        private object[] OnEndTokenRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.Token retVal = this.EndTokenRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTokenReadCompleted(object state) {
            if ((this.TokenReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TokenReadCompleted(this, new TokenReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TokenReadAsync() {
            this.TokenReadAsync(null);
        }
        
        public void TokenReadAsync(object userState) {
            if ((this.onBeginTokenReadDelegate == null)) {
                this.onBeginTokenReadDelegate = new BeginOperationDelegate(this.OnBeginTokenRead);
            }
            if ((this.onEndTokenReadDelegate == null)) {
                this.onEndTokenReadDelegate = new EndOperationDelegate(this.OnEndTokenRead);
            }
            if ((this.onTokenReadCompletedDelegate == null)) {
                this.onTokenReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTokenReadCompleted);
            }
            base.InvokeAsync(this.onBeginTokenReadDelegate, null, this.onEndTokenReadDelegate, this.onTokenReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token TokenUpdate(Nimble.Business.Library.Model.Framework.Security.Token token) {
            return base.Channel.TokenUpdate(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTokenUpdate(Nimble.Business.Library.Model.Framework.Security.Token token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTokenUpdate(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.Token EndTokenUpdate(System.IAsyncResult result) {
            return base.Channel.EndTokenUpdate(result);
        }
        
        private System.IAsyncResult OnBeginTokenUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Security.Token token = ((Nimble.Business.Library.Model.Framework.Security.Token)(inValues[0]));
            return this.BeginTokenUpdate(token, callback, asyncState);
        }
        
        private object[] OnEndTokenUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.Token retVal = this.EndTokenUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTokenUpdateCompleted(object state) {
            if ((this.TokenUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TokenUpdateCompleted(this, new TokenUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TokenUpdateAsync(Nimble.Business.Library.Model.Framework.Security.Token token) {
            this.TokenUpdateAsync(token, null);
        }
        
        public void TokenUpdateAsync(Nimble.Business.Library.Model.Framework.Security.Token token, object userState) {
            if ((this.onBeginTokenUpdateDelegate == null)) {
                this.onBeginTokenUpdateDelegate = new BeginOperationDelegate(this.OnBeginTokenUpdate);
            }
            if ((this.onEndTokenUpdateDelegate == null)) {
                this.onEndTokenUpdateDelegate = new EndOperationDelegate(this.OnEndTokenUpdate);
            }
            if ((this.onTokenUpdateCompletedDelegate == null)) {
                this.onTokenUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTokenUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTokenUpdateDelegate, new object[] {
                        token}, this.onEndTokenUpdateDelegate, this.onTokenUpdateCompletedDelegate, userState);
        }
        
        public bool TokenDelete(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate) {
            return base.Channel.TokenDelete(tokenPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTokenDelete(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTokenDelete(tokenPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndTokenDelete(System.IAsyncResult result) {
            return base.Channel.EndTokenDelete(result);
        }
        
        private System.IAsyncResult OnBeginTokenDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate = ((Nimble.Business.Library.Model.Framework.Security.TokenPredicate)(inValues[0]));
            return this.BeginTokenDelete(tokenPredicate, callback, asyncState);
        }
        
        private object[] OnEndTokenDelete(System.IAsyncResult result) {
            bool retVal = this.EndTokenDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTokenDeleteCompleted(object state) {
            if ((this.TokenDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TokenDeleteCompleted(this, new TokenDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TokenDeleteAsync(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate) {
            this.TokenDeleteAsync(tokenPredicate, null);
        }
        
        public void TokenDeleteAsync(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, object userState) {
            if ((this.onBeginTokenDeleteDelegate == null)) {
                this.onBeginTokenDeleteDelegate = new BeginOperationDelegate(this.OnBeginTokenDelete);
            }
            if ((this.onEndTokenDeleteDelegate == null)) {
                this.onEndTokenDeleteDelegate = new EndOperationDelegate(this.OnEndTokenDelete);
            }
            if ((this.onTokenDeleteCompletedDelegate == null)) {
                this.onTokenDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTokenDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTokenDeleteDelegate, new object[] {
                        tokenPredicate}, this.onEndTokenDeleteDelegate, this.onTokenDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token[] TokenSearch(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate) {
            return base.Channel.TokenSearch(tokenPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTokenSearch(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTokenSearch(tokenPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.Token[] EndTokenSearch(System.IAsyncResult result) {
            return base.Channel.EndTokenSearch(result);
        }
        
        private System.IAsyncResult OnBeginTokenSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate = ((Nimble.Business.Library.Model.Framework.Security.TokenPredicate)(inValues[0]));
            return this.BeginTokenSearch(tokenPredicate, callback, asyncState);
        }
        
        private object[] OnEndTokenSearch(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.Token[] retVal = this.EndTokenSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTokenSearchCompleted(object state) {
            if ((this.TokenSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TokenSearchCompleted(this, new TokenSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TokenSearchAsync(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate) {
            this.TokenSearchAsync(tokenPredicate, null);
        }
        
        public void TokenSearchAsync(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, object userState) {
            if ((this.onBeginTokenSearchDelegate == null)) {
                this.onBeginTokenSearchDelegate = new BeginOperationDelegate(this.OnBeginTokenSearch);
            }
            if ((this.onEndTokenSearchDelegate == null)) {
                this.onEndTokenSearchDelegate = new EndOperationDelegate(this.OnEndTokenSearch);
            }
            if ((this.onTokenSearchCompletedDelegate == null)) {
                this.onTokenSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTokenSearchCompleted);
            }
            base.InvokeAsync(this.onBeginTokenSearchDelegate, new object[] {
                        tokenPredicate}, this.onEndTokenSearchDelegate, this.onTokenSearchCompletedDelegate, userState);
        }
        
        public bool TokenHasPermissions(Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes) {
            return base.Channel.TokenHasPermissions(permissionTypes);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTokenHasPermissions(Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTokenHasPermissions(permissionTypes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndTokenHasPermissions(System.IAsyncResult result) {
            return base.Channel.EndTokenHasPermissions(result);
        }
        
        private System.IAsyncResult OnBeginTokenHasPermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes = ((Nimble.Business.Library.Model.Framework.Security.PermissionType[])(inValues[0]));
            return this.BeginTokenHasPermissions(permissionTypes, callback, asyncState);
        }
        
        private object[] OnEndTokenHasPermissions(System.IAsyncResult result) {
            bool retVal = this.EndTokenHasPermissions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTokenHasPermissionsCompleted(object state) {
            if ((this.TokenHasPermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TokenHasPermissionsCompleted(this, new TokenHasPermissionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TokenHasPermissionsAsync(Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes) {
            this.TokenHasPermissionsAsync(permissionTypes, null);
        }
        
        public void TokenHasPermissionsAsync(Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes, object userState) {
            if ((this.onBeginTokenHasPermissionsDelegate == null)) {
                this.onBeginTokenHasPermissionsDelegate = new BeginOperationDelegate(this.OnBeginTokenHasPermissions);
            }
            if ((this.onEndTokenHasPermissionsDelegate == null)) {
                this.onEndTokenHasPermissionsDelegate = new EndOperationDelegate(this.OnEndTokenHasPermissions);
            }
            if ((this.onTokenHasPermissionsCompletedDelegate == null)) {
                this.onTokenHasPermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTokenHasPermissionsCompleted);
            }
            base.InvokeAsync(this.onBeginTokenHasPermissionsDelegate, new object[] {
                        permissionTypes}, this.onEndTokenHasPermissionsDelegate, this.onTokenHasPermissionsCompletedDelegate, userState);
        }
        
        public bool AccountHasPermissions(Nimble.Business.Library.Model.Framework.Security.Account account, Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes) {
            return base.Channel.AccountHasPermissions(account, permissionTypes);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAccountHasPermissions(Nimble.Business.Library.Model.Framework.Security.Account account, Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAccountHasPermissions(account, permissionTypes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAccountHasPermissions(System.IAsyncResult result) {
            return base.Channel.EndAccountHasPermissions(result);
        }
        
        private System.IAsyncResult OnBeginAccountHasPermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Security.Account account = ((Nimble.Business.Library.Model.Framework.Security.Account)(inValues[0]));
            Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes = ((Nimble.Business.Library.Model.Framework.Security.PermissionType[])(inValues[1]));
            return this.BeginAccountHasPermissions(account, permissionTypes, callback, asyncState);
        }
        
        private object[] OnEndAccountHasPermissions(System.IAsyncResult result) {
            bool retVal = this.EndAccountHasPermissions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAccountHasPermissionsCompleted(object state) {
            if ((this.AccountHasPermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AccountHasPermissionsCompleted(this, new AccountHasPermissionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AccountHasPermissionsAsync(Nimble.Business.Library.Model.Framework.Security.Account account, Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes) {
            this.AccountHasPermissionsAsync(account, permissionTypes, null);
        }
        
        public void AccountHasPermissionsAsync(Nimble.Business.Library.Model.Framework.Security.Account account, Nimble.Business.Library.Model.Framework.Security.PermissionType[] permissionTypes, object userState) {
            if ((this.onBeginAccountHasPermissionsDelegate == null)) {
                this.onBeginAccountHasPermissionsDelegate = new BeginOperationDelegate(this.OnBeginAccountHasPermissions);
            }
            if ((this.onEndAccountHasPermissionsDelegate == null)) {
                this.onEndAccountHasPermissionsDelegate = new EndOperationDelegate(this.OnEndAccountHasPermissions);
            }
            if ((this.onAccountHasPermissionsCompletedDelegate == null)) {
                this.onAccountHasPermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAccountHasPermissionsCompleted);
            }
            base.InvokeAsync(this.onBeginAccountHasPermissionsDelegate, new object[] {
                        account,
                        permissionTypes}, this.onEndAccountHasPermissionsDelegate, this.onAccountHasPermissionsCompletedDelegate, userState);
        }
        
        public bool TokenIsExpired() {
            return base.Channel.TokenIsExpired();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTokenIsExpired(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTokenIsExpired(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndTokenIsExpired(System.IAsyncResult result) {
            return base.Channel.EndTokenIsExpired(result);
        }
        
        private System.IAsyncResult OnBeginTokenIsExpired(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTokenIsExpired(callback, asyncState);
        }
        
        private object[] OnEndTokenIsExpired(System.IAsyncResult result) {
            bool retVal = this.EndTokenIsExpired(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTokenIsExpiredCompleted(object state) {
            if ((this.TokenIsExpiredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TokenIsExpiredCompleted(this, new TokenIsExpiredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TokenIsExpiredAsync() {
            this.TokenIsExpiredAsync(null);
        }
        
        public void TokenIsExpiredAsync(object userState) {
            if ((this.onBeginTokenIsExpiredDelegate == null)) {
                this.onBeginTokenIsExpiredDelegate = new BeginOperationDelegate(this.OnBeginTokenIsExpired);
            }
            if ((this.onEndTokenIsExpiredDelegate == null)) {
                this.onEndTokenIsExpiredDelegate = new EndOperationDelegate(this.OnEndTokenIsExpired);
            }
            if ((this.onTokenIsExpiredCompletedDelegate == null)) {
                this.onTokenIsExpiredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTokenIsExpiredCompleted);
            }
            base.InvokeAsync(this.onBeginTokenIsExpiredDelegate, null, this.onEndTokenIsExpiredDelegate, this.onTokenIsExpiredCompletedDelegate, userState);
        }
        
        public bool LockDelete(Nimble.Business.Library.Model.Framework.Security.Token token) {
            return base.Channel.LockDelete(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLockDelete(Nimble.Business.Library.Model.Framework.Security.Token token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLockDelete(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndLockDelete(System.IAsyncResult result) {
            return base.Channel.EndLockDelete(result);
        }
        
        private System.IAsyncResult OnBeginLockDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Security.Token token = ((Nimble.Business.Library.Model.Framework.Security.Token)(inValues[0]));
            return this.BeginLockDelete(token, callback, asyncState);
        }
        
        private object[] OnEndLockDelete(System.IAsyncResult result) {
            bool retVal = this.EndLockDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLockDeleteCompleted(object state) {
            if ((this.LockDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LockDeleteCompleted(this, new LockDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LockDeleteAsync(Nimble.Business.Library.Model.Framework.Security.Token token) {
            this.LockDeleteAsync(token, null);
        }
        
        public void LockDeleteAsync(Nimble.Business.Library.Model.Framework.Security.Token token, object userState) {
            if ((this.onBeginLockDeleteDelegate == null)) {
                this.onBeginLockDeleteDelegate = new BeginOperationDelegate(this.OnBeginLockDelete);
            }
            if ((this.onEndLockDeleteDelegate == null)) {
                this.onEndLockDeleteDelegate = new EndOperationDelegate(this.OnEndLockDelete);
            }
            if ((this.onLockDeleteCompletedDelegate == null)) {
                this.onLockDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLockDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginLockDeleteDelegate, new object[] {
                        token}, this.onEndLockDeleteDelegate, this.onLockDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Security.Token[] LockSearch(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate) {
            return base.Channel.LockSearch(tokenPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLockSearch(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLockSearch(tokenPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Security.Token[] EndLockSearch(System.IAsyncResult result) {
            return base.Channel.EndLockSearch(result);
        }
        
        private System.IAsyncResult OnBeginLockSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate = ((Nimble.Business.Library.Model.Framework.Security.TokenPredicate)(inValues[0]));
            return this.BeginLockSearch(tokenPredicate, callback, asyncState);
        }
        
        private object[] OnEndLockSearch(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Security.Token[] retVal = this.EndLockSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLockSearchCompleted(object state) {
            if ((this.LockSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LockSearchCompleted(this, new LockSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LockSearchAsync(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate) {
            this.LockSearchAsync(tokenPredicate, null);
        }
        
        public void LockSearchAsync(Nimble.Business.Library.Model.Framework.Security.TokenPredicate tokenPredicate, object userState) {
            if ((this.onBeginLockSearchDelegate == null)) {
                this.onBeginLockSearchDelegate = new BeginOperationDelegate(this.OnBeginLockSearch);
            }
            if ((this.onEndLockSearchDelegate == null)) {
                this.onEndLockSearchDelegate = new EndOperationDelegate(this.OnEndLockSearch);
            }
            if ((this.onLockSearchCompletedDelegate == null)) {
                this.onLockSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLockSearchCompleted);
            }
            base.InvokeAsync(this.onBeginLockSearchDelegate, new object[] {
                        tokenPredicate}, this.onEndLockSearchDelegate, this.onLockSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Preset PresetCreate(Nimble.Business.Library.Model.Framework.Common.Preset preset) {
            return base.Channel.PresetCreate(preset);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPresetCreate(Nimble.Business.Library.Model.Framework.Common.Preset preset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPresetCreate(preset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Preset EndPresetCreate(System.IAsyncResult result) {
            return base.Channel.EndPresetCreate(result);
        }
        
        private System.IAsyncResult OnBeginPresetCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Preset preset = ((Nimble.Business.Library.Model.Framework.Common.Preset)(inValues[0]));
            return this.BeginPresetCreate(preset, callback, asyncState);
        }
        
        private object[] OnEndPresetCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Preset retVal = this.EndPresetCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPresetCreateCompleted(object state) {
            if ((this.PresetCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PresetCreateCompleted(this, new PresetCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PresetCreateAsync(Nimble.Business.Library.Model.Framework.Common.Preset preset) {
            this.PresetCreateAsync(preset, null);
        }
        
        public void PresetCreateAsync(Nimble.Business.Library.Model.Framework.Common.Preset preset, object userState) {
            if ((this.onBeginPresetCreateDelegate == null)) {
                this.onBeginPresetCreateDelegate = new BeginOperationDelegate(this.OnBeginPresetCreate);
            }
            if ((this.onEndPresetCreateDelegate == null)) {
                this.onEndPresetCreateDelegate = new EndOperationDelegate(this.OnEndPresetCreate);
            }
            if ((this.onPresetCreateCompletedDelegate == null)) {
                this.onPresetCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPresetCreateCompleted);
            }
            base.InvokeAsync(this.onBeginPresetCreateDelegate, new object[] {
                        preset}, this.onEndPresetCreateDelegate, this.onPresetCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Preset PresetRead(Nimble.Business.Library.Model.Framework.Common.Preset preset) {
            return base.Channel.PresetRead(preset);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPresetRead(Nimble.Business.Library.Model.Framework.Common.Preset preset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPresetRead(preset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Preset EndPresetRead(System.IAsyncResult result) {
            return base.Channel.EndPresetRead(result);
        }
        
        private System.IAsyncResult OnBeginPresetRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Preset preset = ((Nimble.Business.Library.Model.Framework.Common.Preset)(inValues[0]));
            return this.BeginPresetRead(preset, callback, asyncState);
        }
        
        private object[] OnEndPresetRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Preset retVal = this.EndPresetRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPresetReadCompleted(object state) {
            if ((this.PresetReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PresetReadCompleted(this, new PresetReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PresetReadAsync(Nimble.Business.Library.Model.Framework.Common.Preset preset) {
            this.PresetReadAsync(preset, null);
        }
        
        public void PresetReadAsync(Nimble.Business.Library.Model.Framework.Common.Preset preset, object userState) {
            if ((this.onBeginPresetReadDelegate == null)) {
                this.onBeginPresetReadDelegate = new BeginOperationDelegate(this.OnBeginPresetRead);
            }
            if ((this.onEndPresetReadDelegate == null)) {
                this.onEndPresetReadDelegate = new EndOperationDelegate(this.OnEndPresetRead);
            }
            if ((this.onPresetReadCompletedDelegate == null)) {
                this.onPresetReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPresetReadCompleted);
            }
            base.InvokeAsync(this.onBeginPresetReadDelegate, new object[] {
                        preset}, this.onEndPresetReadDelegate, this.onPresetReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Preset PresetUpdate(Nimble.Business.Library.Model.Framework.Common.Preset preset) {
            return base.Channel.PresetUpdate(preset);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPresetUpdate(Nimble.Business.Library.Model.Framework.Common.Preset preset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPresetUpdate(preset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Preset EndPresetUpdate(System.IAsyncResult result) {
            return base.Channel.EndPresetUpdate(result);
        }
        
        private System.IAsyncResult OnBeginPresetUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Preset preset = ((Nimble.Business.Library.Model.Framework.Common.Preset)(inValues[0]));
            return this.BeginPresetUpdate(preset, callback, asyncState);
        }
        
        private object[] OnEndPresetUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Preset retVal = this.EndPresetUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPresetUpdateCompleted(object state) {
            if ((this.PresetUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PresetUpdateCompleted(this, new PresetUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PresetUpdateAsync(Nimble.Business.Library.Model.Framework.Common.Preset preset) {
            this.PresetUpdateAsync(preset, null);
        }
        
        public void PresetUpdateAsync(Nimble.Business.Library.Model.Framework.Common.Preset preset, object userState) {
            if ((this.onBeginPresetUpdateDelegate == null)) {
                this.onBeginPresetUpdateDelegate = new BeginOperationDelegate(this.OnBeginPresetUpdate);
            }
            if ((this.onEndPresetUpdateDelegate == null)) {
                this.onEndPresetUpdateDelegate = new EndOperationDelegate(this.OnEndPresetUpdate);
            }
            if ((this.onPresetUpdateCompletedDelegate == null)) {
                this.onPresetUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPresetUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginPresetUpdateDelegate, new object[] {
                        preset}, this.onEndPresetUpdateDelegate, this.onPresetUpdateCompletedDelegate, userState);
        }
        
        public bool PresetDelete(Nimble.Business.Library.Model.Framework.Common.Preset preset) {
            return base.Channel.PresetDelete(preset);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPresetDelete(Nimble.Business.Library.Model.Framework.Common.Preset preset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPresetDelete(preset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPresetDelete(System.IAsyncResult result) {
            return base.Channel.EndPresetDelete(result);
        }
        
        private System.IAsyncResult OnBeginPresetDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Preset preset = ((Nimble.Business.Library.Model.Framework.Common.Preset)(inValues[0]));
            return this.BeginPresetDelete(preset, callback, asyncState);
        }
        
        private object[] OnEndPresetDelete(System.IAsyncResult result) {
            bool retVal = this.EndPresetDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPresetDeleteCompleted(object state) {
            if ((this.PresetDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PresetDeleteCompleted(this, new PresetDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PresetDeleteAsync(Nimble.Business.Library.Model.Framework.Common.Preset preset) {
            this.PresetDeleteAsync(preset, null);
        }
        
        public void PresetDeleteAsync(Nimble.Business.Library.Model.Framework.Common.Preset preset, object userState) {
            if ((this.onBeginPresetDeleteDelegate == null)) {
                this.onBeginPresetDeleteDelegate = new BeginOperationDelegate(this.OnBeginPresetDelete);
            }
            if ((this.onEndPresetDeleteDelegate == null)) {
                this.onEndPresetDeleteDelegate = new EndOperationDelegate(this.OnEndPresetDelete);
            }
            if ((this.onPresetDeleteCompletedDelegate == null)) {
                this.onPresetDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPresetDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginPresetDeleteDelegate, new object[] {
                        preset}, this.onEndPresetDeleteDelegate, this.onPresetDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset> PresetSearch(Nimble.Business.Library.Model.Framework.Common.PresetPredicate presetPredicate) {
            return base.Channel.PresetSearch(presetPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPresetSearch(Nimble.Business.Library.Model.Framework.Common.PresetPredicate presetPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPresetSearch(presetPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset> EndPresetSearch(System.IAsyncResult result) {
            return base.Channel.EndPresetSearch(result);
        }
        
        private System.IAsyncResult OnBeginPresetSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.PresetPredicate presetPredicate = ((Nimble.Business.Library.Model.Framework.Common.PresetPredicate)(inValues[0]));
            return this.BeginPresetSearch(presetPredicate, callback, asyncState);
        }
        
        private object[] OnEndPresetSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Preset> retVal = this.EndPresetSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPresetSearchCompleted(object state) {
            if ((this.PresetSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PresetSearchCompleted(this, new PresetSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PresetSearchAsync(Nimble.Business.Library.Model.Framework.Common.PresetPredicate presetPredicate) {
            this.PresetSearchAsync(presetPredicate, null);
        }
        
        public void PresetSearchAsync(Nimble.Business.Library.Model.Framework.Common.PresetPredicate presetPredicate, object userState) {
            if ((this.onBeginPresetSearchDelegate == null)) {
                this.onBeginPresetSearchDelegate = new BeginOperationDelegate(this.OnBeginPresetSearch);
            }
            if ((this.onEndPresetSearchDelegate == null)) {
                this.onEndPresetSearchDelegate = new EndOperationDelegate(this.OnEndPresetSearch);
            }
            if ((this.onPresetSearchCompletedDelegate == null)) {
                this.onPresetSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPresetSearchCompleted);
            }
            base.InvokeAsync(this.onBeginPresetSearchDelegate, new object[] {
                        presetPredicate}, this.onEndPresetSearchDelegate, this.onPresetSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Split SplitCreate(Nimble.Business.Library.Model.Framework.Common.Split split) {
            return base.Channel.SplitCreate(split);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSplitCreate(Nimble.Business.Library.Model.Framework.Common.Split split, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSplitCreate(split, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Split EndSplitCreate(System.IAsyncResult result) {
            return base.Channel.EndSplitCreate(result);
        }
        
        private System.IAsyncResult OnBeginSplitCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Split split = ((Nimble.Business.Library.Model.Framework.Common.Split)(inValues[0]));
            return this.BeginSplitCreate(split, callback, asyncState);
        }
        
        private object[] OnEndSplitCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Split retVal = this.EndSplitCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSplitCreateCompleted(object state) {
            if ((this.SplitCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SplitCreateCompleted(this, new SplitCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SplitCreateAsync(Nimble.Business.Library.Model.Framework.Common.Split split) {
            this.SplitCreateAsync(split, null);
        }
        
        public void SplitCreateAsync(Nimble.Business.Library.Model.Framework.Common.Split split, object userState) {
            if ((this.onBeginSplitCreateDelegate == null)) {
                this.onBeginSplitCreateDelegate = new BeginOperationDelegate(this.OnBeginSplitCreate);
            }
            if ((this.onEndSplitCreateDelegate == null)) {
                this.onEndSplitCreateDelegate = new EndOperationDelegate(this.OnEndSplitCreate);
            }
            if ((this.onSplitCreateCompletedDelegate == null)) {
                this.onSplitCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSplitCreateCompleted);
            }
            base.InvokeAsync(this.onBeginSplitCreateDelegate, new object[] {
                        split}, this.onEndSplitCreateDelegate, this.onSplitCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Split SplitRead(Nimble.Business.Library.Model.Framework.Common.Split split) {
            return base.Channel.SplitRead(split);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSplitRead(Nimble.Business.Library.Model.Framework.Common.Split split, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSplitRead(split, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Split EndSplitRead(System.IAsyncResult result) {
            return base.Channel.EndSplitRead(result);
        }
        
        private System.IAsyncResult OnBeginSplitRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Split split = ((Nimble.Business.Library.Model.Framework.Common.Split)(inValues[0]));
            return this.BeginSplitRead(split, callback, asyncState);
        }
        
        private object[] OnEndSplitRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Split retVal = this.EndSplitRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSplitReadCompleted(object state) {
            if ((this.SplitReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SplitReadCompleted(this, new SplitReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SplitReadAsync(Nimble.Business.Library.Model.Framework.Common.Split split) {
            this.SplitReadAsync(split, null);
        }
        
        public void SplitReadAsync(Nimble.Business.Library.Model.Framework.Common.Split split, object userState) {
            if ((this.onBeginSplitReadDelegate == null)) {
                this.onBeginSplitReadDelegate = new BeginOperationDelegate(this.OnBeginSplitRead);
            }
            if ((this.onEndSplitReadDelegate == null)) {
                this.onEndSplitReadDelegate = new EndOperationDelegate(this.OnEndSplitRead);
            }
            if ((this.onSplitReadCompletedDelegate == null)) {
                this.onSplitReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSplitReadCompleted);
            }
            base.InvokeAsync(this.onBeginSplitReadDelegate, new object[] {
                        split}, this.onEndSplitReadDelegate, this.onSplitReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Split SplitUpdate(Nimble.Business.Library.Model.Framework.Common.Split split) {
            return base.Channel.SplitUpdate(split);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSplitUpdate(Nimble.Business.Library.Model.Framework.Common.Split split, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSplitUpdate(split, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Split EndSplitUpdate(System.IAsyncResult result) {
            return base.Channel.EndSplitUpdate(result);
        }
        
        private System.IAsyncResult OnBeginSplitUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Split split = ((Nimble.Business.Library.Model.Framework.Common.Split)(inValues[0]));
            return this.BeginSplitUpdate(split, callback, asyncState);
        }
        
        private object[] OnEndSplitUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Split retVal = this.EndSplitUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSplitUpdateCompleted(object state) {
            if ((this.SplitUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SplitUpdateCompleted(this, new SplitUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SplitUpdateAsync(Nimble.Business.Library.Model.Framework.Common.Split split) {
            this.SplitUpdateAsync(split, null);
        }
        
        public void SplitUpdateAsync(Nimble.Business.Library.Model.Framework.Common.Split split, object userState) {
            if ((this.onBeginSplitUpdateDelegate == null)) {
                this.onBeginSplitUpdateDelegate = new BeginOperationDelegate(this.OnBeginSplitUpdate);
            }
            if ((this.onEndSplitUpdateDelegate == null)) {
                this.onEndSplitUpdateDelegate = new EndOperationDelegate(this.OnEndSplitUpdate);
            }
            if ((this.onSplitUpdateCompletedDelegate == null)) {
                this.onSplitUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSplitUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginSplitUpdateDelegate, new object[] {
                        split}, this.onEndSplitUpdateDelegate, this.onSplitUpdateCompletedDelegate, userState);
        }
        
        public bool SplitDelete(Nimble.Business.Library.Model.Framework.Common.Split split) {
            return base.Channel.SplitDelete(split);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSplitDelete(Nimble.Business.Library.Model.Framework.Common.Split split, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSplitDelete(split, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSplitDelete(System.IAsyncResult result) {
            return base.Channel.EndSplitDelete(result);
        }
        
        private System.IAsyncResult OnBeginSplitDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Split split = ((Nimble.Business.Library.Model.Framework.Common.Split)(inValues[0]));
            return this.BeginSplitDelete(split, callback, asyncState);
        }
        
        private object[] OnEndSplitDelete(System.IAsyncResult result) {
            bool retVal = this.EndSplitDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSplitDeleteCompleted(object state) {
            if ((this.SplitDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SplitDeleteCompleted(this, new SplitDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SplitDeleteAsync(Nimble.Business.Library.Model.Framework.Common.Split split) {
            this.SplitDeleteAsync(split, null);
        }
        
        public void SplitDeleteAsync(Nimble.Business.Library.Model.Framework.Common.Split split, object userState) {
            if ((this.onBeginSplitDeleteDelegate == null)) {
                this.onBeginSplitDeleteDelegate = new BeginOperationDelegate(this.OnBeginSplitDelete);
            }
            if ((this.onEndSplitDeleteDelegate == null)) {
                this.onEndSplitDeleteDelegate = new EndOperationDelegate(this.OnEndSplitDelete);
            }
            if ((this.onSplitDeleteCompletedDelegate == null)) {
                this.onSplitDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSplitDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginSplitDeleteDelegate, new object[] {
                        split}, this.onEndSplitDeleteDelegate, this.onSplitDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split> SplitSearch(Nimble.Business.Library.Model.Framework.Common.SplitPredicate splitPredicate) {
            return base.Channel.SplitSearch(splitPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSplitSearch(Nimble.Business.Library.Model.Framework.Common.SplitPredicate splitPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSplitSearch(splitPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split> EndSplitSearch(System.IAsyncResult result) {
            return base.Channel.EndSplitSearch(result);
        }
        
        private System.IAsyncResult OnBeginSplitSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.SplitPredicate splitPredicate = ((Nimble.Business.Library.Model.Framework.Common.SplitPredicate)(inValues[0]));
            return this.BeginSplitSearch(splitPredicate, callback, asyncState);
        }
        
        private object[] OnEndSplitSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Split> retVal = this.EndSplitSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSplitSearchCompleted(object state) {
            if ((this.SplitSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SplitSearchCompleted(this, new SplitSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SplitSearchAsync(Nimble.Business.Library.Model.Framework.Common.SplitPredicate splitPredicate) {
            this.SplitSearchAsync(splitPredicate, null);
        }
        
        public void SplitSearchAsync(Nimble.Business.Library.Model.Framework.Common.SplitPredicate splitPredicate, object userState) {
            if ((this.onBeginSplitSearchDelegate == null)) {
                this.onBeginSplitSearchDelegate = new BeginOperationDelegate(this.OnBeginSplitSearch);
            }
            if ((this.onEndSplitSearchDelegate == null)) {
                this.onEndSplitSearchDelegate = new EndOperationDelegate(this.OnEndSplitSearch);
            }
            if ((this.onSplitSearchCompletedDelegate == null)) {
                this.onSplitSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSplitSearchCompleted);
            }
            base.InvokeAsync(this.onBeginSplitSearchDelegate, new object[] {
                        splitPredicate}, this.onEndSplitSearchDelegate, this.onSplitSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Group GroupCreate(Nimble.Business.Library.Model.Framework.Common.Group group) {
            return base.Channel.GroupCreate(group);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGroupCreate(Nimble.Business.Library.Model.Framework.Common.Group group, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGroupCreate(group, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Group EndGroupCreate(System.IAsyncResult result) {
            return base.Channel.EndGroupCreate(result);
        }
        
        private System.IAsyncResult OnBeginGroupCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Group group = ((Nimble.Business.Library.Model.Framework.Common.Group)(inValues[0]));
            return this.BeginGroupCreate(group, callback, asyncState);
        }
        
        private object[] OnEndGroupCreate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Group retVal = this.EndGroupCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGroupCreateCompleted(object state) {
            if ((this.GroupCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GroupCreateCompleted(this, new GroupCreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GroupCreateAsync(Nimble.Business.Library.Model.Framework.Common.Group group) {
            this.GroupCreateAsync(group, null);
        }
        
        public void GroupCreateAsync(Nimble.Business.Library.Model.Framework.Common.Group group, object userState) {
            if ((this.onBeginGroupCreateDelegate == null)) {
                this.onBeginGroupCreateDelegate = new BeginOperationDelegate(this.OnBeginGroupCreate);
            }
            if ((this.onEndGroupCreateDelegate == null)) {
                this.onEndGroupCreateDelegate = new EndOperationDelegate(this.OnEndGroupCreate);
            }
            if ((this.onGroupCreateCompletedDelegate == null)) {
                this.onGroupCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGroupCreateCompleted);
            }
            base.InvokeAsync(this.onBeginGroupCreateDelegate, new object[] {
                        group}, this.onEndGroupCreateDelegate, this.onGroupCreateCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Group GroupRead(Nimble.Business.Library.Model.Framework.Common.Group group) {
            return base.Channel.GroupRead(group);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGroupRead(Nimble.Business.Library.Model.Framework.Common.Group group, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGroupRead(group, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Group EndGroupRead(System.IAsyncResult result) {
            return base.Channel.EndGroupRead(result);
        }
        
        private System.IAsyncResult OnBeginGroupRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Group group = ((Nimble.Business.Library.Model.Framework.Common.Group)(inValues[0]));
            return this.BeginGroupRead(group, callback, asyncState);
        }
        
        private object[] OnEndGroupRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Group retVal = this.EndGroupRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGroupReadCompleted(object state) {
            if ((this.GroupReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GroupReadCompleted(this, new GroupReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GroupReadAsync(Nimble.Business.Library.Model.Framework.Common.Group group) {
            this.GroupReadAsync(group, null);
        }
        
        public void GroupReadAsync(Nimble.Business.Library.Model.Framework.Common.Group group, object userState) {
            if ((this.onBeginGroupReadDelegate == null)) {
                this.onBeginGroupReadDelegate = new BeginOperationDelegate(this.OnBeginGroupRead);
            }
            if ((this.onEndGroupReadDelegate == null)) {
                this.onEndGroupReadDelegate = new EndOperationDelegate(this.OnEndGroupRead);
            }
            if ((this.onGroupReadCompletedDelegate == null)) {
                this.onGroupReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGroupReadCompleted);
            }
            base.InvokeAsync(this.onBeginGroupReadDelegate, new object[] {
                        group}, this.onEndGroupReadDelegate, this.onGroupReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Group GroupUpdate(Nimble.Business.Library.Model.Framework.Common.Group group) {
            return base.Channel.GroupUpdate(group);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGroupUpdate(Nimble.Business.Library.Model.Framework.Common.Group group, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGroupUpdate(group, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Group EndGroupUpdate(System.IAsyncResult result) {
            return base.Channel.EndGroupUpdate(result);
        }
        
        private System.IAsyncResult OnBeginGroupUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Group group = ((Nimble.Business.Library.Model.Framework.Common.Group)(inValues[0]));
            return this.BeginGroupUpdate(group, callback, asyncState);
        }
        
        private object[] OnEndGroupUpdate(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Group retVal = this.EndGroupUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGroupUpdateCompleted(object state) {
            if ((this.GroupUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GroupUpdateCompleted(this, new GroupUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GroupUpdateAsync(Nimble.Business.Library.Model.Framework.Common.Group group) {
            this.GroupUpdateAsync(group, null);
        }
        
        public void GroupUpdateAsync(Nimble.Business.Library.Model.Framework.Common.Group group, object userState) {
            if ((this.onBeginGroupUpdateDelegate == null)) {
                this.onBeginGroupUpdateDelegate = new BeginOperationDelegate(this.OnBeginGroupUpdate);
            }
            if ((this.onEndGroupUpdateDelegate == null)) {
                this.onEndGroupUpdateDelegate = new EndOperationDelegate(this.OnEndGroupUpdate);
            }
            if ((this.onGroupUpdateCompletedDelegate == null)) {
                this.onGroupUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGroupUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginGroupUpdateDelegate, new object[] {
                        group}, this.onEndGroupUpdateDelegate, this.onGroupUpdateCompletedDelegate, userState);
        }
        
        public bool GroupDelete(Nimble.Business.Library.Model.Framework.Common.Group group) {
            return base.Channel.GroupDelete(group);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGroupDelete(Nimble.Business.Library.Model.Framework.Common.Group group, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGroupDelete(group, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGroupDelete(System.IAsyncResult result) {
            return base.Channel.EndGroupDelete(result);
        }
        
        private System.IAsyncResult OnBeginGroupDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Group group = ((Nimble.Business.Library.Model.Framework.Common.Group)(inValues[0]));
            return this.BeginGroupDelete(group, callback, asyncState);
        }
        
        private object[] OnEndGroupDelete(System.IAsyncResult result) {
            bool retVal = this.EndGroupDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGroupDeleteCompleted(object state) {
            if ((this.GroupDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GroupDeleteCompleted(this, new GroupDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GroupDeleteAsync(Nimble.Business.Library.Model.Framework.Common.Group group) {
            this.GroupDeleteAsync(group, null);
        }
        
        public void GroupDeleteAsync(Nimble.Business.Library.Model.Framework.Common.Group group, object userState) {
            if ((this.onBeginGroupDeleteDelegate == null)) {
                this.onBeginGroupDeleteDelegate = new BeginOperationDelegate(this.OnBeginGroupDelete);
            }
            if ((this.onEndGroupDeleteDelegate == null)) {
                this.onEndGroupDeleteDelegate = new EndOperationDelegate(this.OnEndGroupDelete);
            }
            if ((this.onGroupDeleteCompletedDelegate == null)) {
                this.onGroupDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGroupDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginGroupDeleteDelegate, new object[] {
                        group}, this.onEndGroupDeleteDelegate, this.onGroupDeleteCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group> GroupSearch(Nimble.Business.Library.Model.Framework.Common.GroupPredicate groupPredicate) {
            return base.Channel.GroupSearch(groupPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGroupSearch(Nimble.Business.Library.Model.Framework.Common.GroupPredicate groupPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGroupSearch(groupPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group> EndGroupSearch(System.IAsyncResult result) {
            return base.Channel.EndGroupSearch(result);
        }
        
        private System.IAsyncResult OnBeginGroupSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.GroupPredicate groupPredicate = ((Nimble.Business.Library.Model.Framework.Common.GroupPredicate)(inValues[0]));
            return this.BeginGroupSearch(groupPredicate, callback, asyncState);
        }
        
        private object[] OnEndGroupSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Group> retVal = this.EndGroupSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGroupSearchCompleted(object state) {
            if ((this.GroupSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GroupSearchCompleted(this, new GroupSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GroupSearchAsync(Nimble.Business.Library.Model.Framework.Common.GroupPredicate groupPredicate) {
            this.GroupSearchAsync(groupPredicate, null);
        }
        
        public void GroupSearchAsync(Nimble.Business.Library.Model.Framework.Common.GroupPredicate groupPredicate, object userState) {
            if ((this.onBeginGroupSearchDelegate == null)) {
                this.onBeginGroupSearchDelegate = new BeginOperationDelegate(this.OnBeginGroupSearch);
            }
            if ((this.onEndGroupSearchDelegate == null)) {
                this.onEndGroupSearchDelegate = new EndOperationDelegate(this.OnEndGroupSearch);
            }
            if ((this.onGroupSearchCompletedDelegate == null)) {
                this.onGroupSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGroupSearchCompleted);
            }
            base.InvokeAsync(this.onBeginGroupSearchDelegate, new object[] {
                        groupPredicate}, this.onEndGroupSearchDelegate, this.onGroupSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Bond BondRead(Nimble.Business.Library.Model.Framework.Common.Bond bond) {
            return base.Channel.BondRead(bond);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBondRead(Nimble.Business.Library.Model.Framework.Common.Bond bond, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBondRead(bond, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Bond EndBondRead(System.IAsyncResult result) {
            return base.Channel.EndBondRead(result);
        }
        
        private System.IAsyncResult OnBeginBondRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Bond bond = ((Nimble.Business.Library.Model.Framework.Common.Bond)(inValues[0]));
            return this.BeginBondRead(bond, callback, asyncState);
        }
        
        private object[] OnEndBondRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Bond retVal = this.EndBondRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBondReadCompleted(object state) {
            if ((this.BondReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BondReadCompleted(this, new BondReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BondReadAsync(Nimble.Business.Library.Model.Framework.Common.Bond bond) {
            this.BondReadAsync(bond, null);
        }
        
        public void BondReadAsync(Nimble.Business.Library.Model.Framework.Common.Bond bond, object userState) {
            if ((this.onBeginBondReadDelegate == null)) {
                this.onBeginBondReadDelegate = new BeginOperationDelegate(this.OnBeginBondRead);
            }
            if ((this.onEndBondReadDelegate == null)) {
                this.onEndBondReadDelegate = new EndOperationDelegate(this.OnEndBondRead);
            }
            if ((this.onBondReadCompletedDelegate == null)) {
                this.onBondReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBondReadCompleted);
            }
            base.InvokeAsync(this.onBeginBondReadDelegate, new object[] {
                        bond}, this.onEndBondReadDelegate, this.onBondReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond> BondSearch(Nimble.Business.Library.Model.Framework.Common.BondPredicate bondPredicate) {
            return base.Channel.BondSearch(bondPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBondSearch(Nimble.Business.Library.Model.Framework.Common.BondPredicate bondPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBondSearch(bondPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond> EndBondSearch(System.IAsyncResult result) {
            return base.Channel.EndBondSearch(result);
        }
        
        private System.IAsyncResult OnBeginBondSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.BondPredicate bondPredicate = ((Nimble.Business.Library.Model.Framework.Common.BondPredicate)(inValues[0]));
            return this.BeginBondSearch(bondPredicate, callback, asyncState);
        }
        
        private object[] OnEndBondSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Bond> retVal = this.EndBondSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBondSearchCompleted(object state) {
            if ((this.BondSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BondSearchCompleted(this, new BondSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BondSearchAsync(Nimble.Business.Library.Model.Framework.Common.BondPredicate bondPredicate) {
            this.BondSearchAsync(bondPredicate, null);
        }
        
        public void BondSearchAsync(Nimble.Business.Library.Model.Framework.Common.BondPredicate bondPredicate, object userState) {
            if ((this.onBeginBondSearchDelegate == null)) {
                this.onBeginBondSearchDelegate = new BeginOperationDelegate(this.OnBeginBondSearch);
            }
            if ((this.onEndBondSearchDelegate == null)) {
                this.onEndBondSearchDelegate = new EndOperationDelegate(this.OnEndBondSearch);
            }
            if ((this.onBondSearchCompletedDelegate == null)) {
                this.onBondSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBondSearchCompleted);
            }
            base.InvokeAsync(this.onBeginBondSearchDelegate, new object[] {
                        bondPredicate}, this.onEndBondSearchDelegate, this.onBondSearchCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.Model.Framework.Common.Filestream FilestreamRead(Nimble.Business.Library.Model.Framework.Common.Filestream filestream) {
            return base.Channel.FilestreamRead(filestream);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFilestreamRead(Nimble.Business.Library.Model.Framework.Common.Filestream filestream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFilestreamRead(filestream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.Model.Framework.Common.Filestream EndFilestreamRead(System.IAsyncResult result) {
            return base.Channel.EndFilestreamRead(result);
        }
        
        private System.IAsyncResult OnBeginFilestreamRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.Filestream filestream = ((Nimble.Business.Library.Model.Framework.Common.Filestream)(inValues[0]));
            return this.BeginFilestreamRead(filestream, callback, asyncState);
        }
        
        private object[] OnEndFilestreamRead(System.IAsyncResult result) {
            Nimble.Business.Library.Model.Framework.Common.Filestream retVal = this.EndFilestreamRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFilestreamReadCompleted(object state) {
            if ((this.FilestreamReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FilestreamReadCompleted(this, new FilestreamReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FilestreamReadAsync(Nimble.Business.Library.Model.Framework.Common.Filestream filestream) {
            this.FilestreamReadAsync(filestream, null);
        }
        
        public void FilestreamReadAsync(Nimble.Business.Library.Model.Framework.Common.Filestream filestream, object userState) {
            if ((this.onBeginFilestreamReadDelegate == null)) {
                this.onBeginFilestreamReadDelegate = new BeginOperationDelegate(this.OnBeginFilestreamRead);
            }
            if ((this.onEndFilestreamReadDelegate == null)) {
                this.onEndFilestreamReadDelegate = new EndOperationDelegate(this.OnEndFilestreamRead);
            }
            if ((this.onFilestreamReadCompletedDelegate == null)) {
                this.onFilestreamReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFilestreamReadCompleted);
            }
            base.InvokeAsync(this.onBeginFilestreamReadDelegate, new object[] {
                        filestream}, this.onEndFilestreamReadDelegate, this.onFilestreamReadCompletedDelegate, userState);
        }
        
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream> FilestreamSearch(Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate filestreamPredicate) {
            return base.Channel.FilestreamSearch(filestreamPredicate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFilestreamSearch(Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate filestreamPredicate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFilestreamSearch(filestreamPredicate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream> EndFilestreamSearch(System.IAsyncResult result) {
            return base.Channel.EndFilestreamSearch(result);
        }
        
        private System.IAsyncResult OnBeginFilestreamSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate filestreamPredicate = ((Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate)(inValues[0]));
            return this.BeginFilestreamSearch(filestreamPredicate, callback, asyncState);
        }
        
        private object[] OnEndFilestreamSearch(System.IAsyncResult result) {
            Nimble.Business.Library.DataAccess.GenericOutput<Nimble.Business.Library.Model.Framework.Common.Filestream> retVal = this.EndFilestreamSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFilestreamSearchCompleted(object state) {
            if ((this.FilestreamSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FilestreamSearchCompleted(this, new FilestreamSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FilestreamSearchAsync(Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate filestreamPredicate) {
            this.FilestreamSearchAsync(filestreamPredicate, null);
        }
        
        public void FilestreamSearchAsync(Nimble.Business.Library.Model.Framework.Common.FilestreamPredicate filestreamPredicate, object userState) {
            if ((this.onBeginFilestreamSearchDelegate == null)) {
                this.onBeginFilestreamSearchDelegate = new BeginOperationDelegate(this.OnBeginFilestreamSearch);
            }
            if ((this.onEndFilestreamSearchDelegate == null)) {
                this.onEndFilestreamSearchDelegate = new EndOperationDelegate(this.OnEndFilestreamSearch);
            }
            if ((this.onFilestreamSearchCompletedDelegate == null)) {
                this.onFilestreamSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFilestreamSearchCompleted);
            }
            base.InvokeAsync(this.onBeginFilestreamSearchDelegate, new object[] {
                        filestreamPredicate}, this.onEndFilestreamSearchDelegate, this.onFilestreamSearchCompletedDelegate, userState);
        }
    }
}
